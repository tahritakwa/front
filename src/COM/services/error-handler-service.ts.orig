import { HttpErrorResponse } from '@angular/common/http';
import { ErrorHandler, Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { HttpAccountErrorCodes } from '../../app/accounting/http-error-account-codes';
import { GrowlService } from '../Growl/growl.service';
import { HttpStatusCodes } from './http-status-codes';
import { DatePipe } from '@angular/common';
import { TimePipe } from '../../app/shared/components/time-pipe/time-pipe.component';
import { SharedConstant } from '../../app/constant/shared/shared.constant';
import { DocumentAccountConstant } from '../../app/constant/accounting/document-account.constant';

const pipe = new DatePipe('en-US');
const timePipe = new TimePipe();

const FUNCTION = 'function';
const LOGIN_URL = 'login';
const EN = 'en';
const DELETE = 'DELETE';
const ADD = 'ADD';
const UPDATE = 'UPDATE';
const SAVE = 'SAVE';
const LIST = 'LIST';
const PRINT = 'PRINT';
const SHOW = 'SHOW';
const VALIDATE = 'VALIDATE';
const IMPORT = 'IMPORT';
const LOGIN_PAGE = 'login';
const UNAUTHRIZED_ERROR_MSG = 'UNAUTHRIZED_ERROR_MSG';
const FORBIDDEN_ERROR_MSG = 'FORBIDDEN_ERROR_MSG';
const BADREQUEST_ERROR_MSG = 'BADREQUEST_ERROR_MSG';
const BADGATEWAY_ERROR_MSG = 'BADGATEWAY_ERROR_MSG';
const ECOMMERCE_BADGATEWAY_ERROR_MSG = 'ECOMMERCE_BADGATEWAY_ERROR_MSG';
const ECOMMERCE_IN_PROGRESS_EXCEPTION = 'ECOMMERCE_IN_PROGRESS_EXCEPTION';
const NOTFOUND_ERROR_MSG = 'NOTFOUND_ERROR_MSG';
const UNSUPPORTED_MEDIA_TYPE_ERROR_MSG = 'UNSUPPORTED_MEDIA_TYPE_ERROR_MSG';
const CONFLICT_ERROR_MSG = 'CONFLICT_ERROR_MSG';
const REQUEST_TIMEOUT_ERROR_MSG = 'REQUEST_TIMEOUT_ERROR_MSG';
const REQUEST_URI_TOO_LONG = 'REQUEST_URI_TOO_LONG';
const INTERNAL_SERVER_ERROR_MSG = 'INTERNAL_SERVER_ERROR_MSG';
const UNKNOWN_ERROR_MSG = 'UNKNOWN_ERROR_MSG';
const SESSION_EXPIRED = 'SESSION_EXPIRED';
const VALIDATE_SUBSEQUENT_INVOICES = 'INTERNAL_SERVER_ERROR_MSG';
const VALIDATE_PREVIOUS_INVOICES = 'VALIDATE_PREVIOUS_INVOICES';
const VALIDATE_PREVIOUS_BL = 'VALIDATE_PREVIOUS_BL';

const ClientRquiredError = 'ClientRquiredError';
const SupplierRquiredError = 'SupplierRquiredError';
const TaxItemValueError = 'TaxItemValueError';
const ClientCurrencyError = 'ClientCurrencyError';
const SupplierCurrencyError = 'SupplierCurrencyError';
const INVALID_EXCEL_FORMAT = 'INVALID_EXCEL_FORMAT';
const INVALID_EXCEL_DATA = 'INVALID_EXCEL_DATA';
const DELETE_ERROR = 'DELETE_ERROR';
const TITLE_DELETE_ERROR = 'TITLE_DELETE_ERROR';
const UNAUTHRIZED_DELETE_ERROR_MSG = 'UNAUTHRIZED_DELETE_ERROR_MSG';
const UNAUTHRIZED_ADD_ERROR_MSG = 'UNAUTHRIZED_ADD_ERROR_MSG';
const UNAUTHRIZED_UPDATE_ERROR_MSG = 'UNAUTHRIZED_UPDATE_ERROR_MSG';
const UNAUTHRIZED_LIST_ERROR_MSG = 'UNAUTHRIZED_LIST_ERROR_MSG';
const UNAUTHRIZED_SAVE_ERROR_MSG = 'UNAUTHRIZED_SAVE_ERROR_MSG';
const UNAUTHRIZED_VALIDATE_ERROR_MSG = 'UNAUTHRIZED_VALIDATE_ERROR_MSG';
const UNAUTHRIZED_IMPORT_ERROR_MSG = 'UNAUTHRIZED_IMPORT_ERROR_MSG';
const UNAUTHRIZED_PRINT_ERROR_MSG = 'UNAUTHRIZED_PRINT_ERROR_MSG';
const UNAUTHRIZED_SHOW_ERROR_MSG = 'UNAUTHRIZED_SHOW_ERROR_MSG';
const WAREHOUSE_REQUIRED = 'WAREHOUSE_REQUIRED';
const INSUFFICIENT_QUANTITY = 'INSUFFICIENT_QUANTITY';
const FISCAL_YEAR_NOT_OPENED_OPERATION_NOT_ALLOWED = 'FISCAL_YEAR_NOT_OPENED_OPERATION_NOT_ALLOWED';
const INSUFFICIENT_QUANTITY_FOR_ITEM = 'INSUFFICIENT_QUANTITY_FOR_ITEM';
const HOURS_NOT_FOUND_IN_PERIOD_EXCEPTION = 'HOURS_NOT_FOUND_IN_PERIOD_EXCEPTION';
const SET_SUPPLIER_TO_ITEMS = 'SET_SUPPLIER_TO_ITEMS';
const PRODUCT_TYPE = 'PRODUCT_TYPE';
const UPDATE_CANDIDACY_WITH_INTERVIEWS_ERROR = 'UPDATE_CANDIDACY_WITH_INTERVIEWS_ERROR';
const UPDATE_EVALUATION_WITH_SENDED_OFFERS_ERROR = 'UPDATE_EVALUATION_WITH_SENDED_OFFERS_ERROR';
const UPDATE_CANDIDACY_WITH_SENDED_OFFERS_ERROR = 'UPDATE_CANDIDACY_WITH_SENDED_OFFERS_ERROR';
const UPDATE_INTERVIEW_WITH_SENDED_OFFERS_ERROR = 'UPDATE_INTERVIEW_WITH_SENDED_OFFERS_ERROR';
const POSITIVE_QUANTITY_VIOLATION_ERROR = 'POSITIVE_QUANTITY_VIOLATION_ERROR';
const ADD_TRAINING_REQUEST_EXCEPTION = 'ADD_TRAINING_REQUEST_EXCEPTION';
const UPDATE_TRAINING_REQUEST_EXCEPTION = 'UPDATE_TRAINING_REQUEST_EXCEPTION';
const OVERLAP_TARIF_ERROR = 'OVERLAP_TARIF_ERROR';
const VALUE_DISCOUNTE_PRICES = 'VALUE_DISCOUNTE_PRICES';
const SETTLEMENT_AMOUNT_IS_ZERO = 'SETTLEMENT_AMOUNT_IS_ZERO';
const SETTLEMENT_AMOUNT_IS_GREATER_THAN_COMMITMENT = 'SETTLEMENT_AMOUNT_IS_GREATER_THAN_COMMITMENT';
const FINANCIAL_COMMITMENT_ALLOCATED_AMOUNT_IS_GREATER_THAN_REMAINING = 'FINANCIAL_COMMITMENT_ALLOCATED_AMOUNT_IS_GREATER_THAN_REMAINING';
const WAREHOUSE_UNICITY = 'WAREHOUSE_UNICITY';
const EXCEL_REQUIRED_COLUMN = 'EXCEL_REQUIRED_COLUMN';
const EXCEL_UNIQUE_COLUMN_IN_DB = 'EXCEL_UNIQUE_COLUMN_IN_DB';
const EXCEL_UNIQUE_COLUMN_IN_FILE = 'EXCEL_UNIQUE_COLUMN_IN_FILE';
const EXCEL_INVALID_EMAIL_COLUMN = 'EXCEL_INVALID_EMAIL_COLUMN';
const LEAVE_MAXIMUM_NUMBER_OF_DAYS_VIOLATION = 'LEAVE_MAXIMUM_NUMBER_OF_DAYS_VIOLATION';
const DATES_DEPENDENCY = 'DATES_DEPENDENCY';
const ATTENDANCE_VALUE_EXCEED = 'ATTENDANCE_VALUE_EXCEED';
const DUPLICATED_BONUS_VALIDITY_EXCEPTION = 'DUPLICATED_BONUS_VALIDITY_EXCEPTION';
const DUPLICATE_SKILLS_EXCEPTION = 'DUPLICATE_SKILLS_EXCEPTION';
const DUPLICATE_FORMATION_EXCEPTION = 'DUPLICATE_FORMATION_EXCEPTION';
const SESSION_NUMBER_UNIQUE = 'SESSION_NUMBER_UNIQUE';
const EMPLOYEE_RECURSIVITY_VIOLATION = 'EMPLOYEE_RECURSIVITY_VIOLATION';
const TIERS_PRICE_REQUEST_UNICITY = 'SUPPLIER_MUST_BE_UNIQUE';
const WAREHOUSE_QUANTITY_MIN_MAX = 'WAREHOUSE_QUANTITY_MIN_MAX';
const EXPENSE_REPORT_UPDATE_VIOLATION = 'EXPENSE_REPORT_UPDATE_VIOLATION';
const DOCUMENT_REQUEST_UPDATE_VIOLATION = 'DOCUMENT_REQUEST_UPDATE_VIOLATION';
const CONTRACT_BY_TRANSFER_ORDER_UNICITY = 'CONTRACT_BY_TRANSFER_ORDER_UNICITY';
const INCOMPATIBLE_EQUIVALENCE_GROUPE = 'INCOMPATIBLE_EQUIVALENCE_GROUPE';
const CONTACT_REQUIRED = 'CONTACT_REQUIRED';
const SEND_MAIL_ERROR = 'SEND_MAIL_ERROR';
const TITLE_SEND_MAIL_ERROR = 'TITLE_SEND_MAIL_ERROR';
const GENERATE_PRICE_REQUEST_ERROR = 'GENERATE_PRICE_REQUEST_ERROR';
const TITLE_GENERATE_PRICE_REQUEST_ERROR = 'TITLE_GENERATE_PRICE_REQUEST_ERROR';
const VALIDATION_OF_DOCUMENT_WITH_STOCK_RESERVATION_ERROR_MSG = 'VALIDATION_OF_DOCUMENT_WITH_STOCK_RESERVATION_ERROR_MSG';
const PAYSLIP_PREVIEW_NOT_GENERATED = 'PAYSLIP_PREVIEW_NOT_GENERATED';
const CHART_ACCOUNT_CODE_EXISTS = 'CHART_ACCOUNT_CODE_EXISTS';
const EXCEL_OLD_FORMAT_NOT_SUPPORTED = 'EXCEL_OLD_FORMAT_NOT_SUPPORTED';
const EXCEL_OOXML_FORMAT_NOT_SUPPORTED = 'EXCEL_OOXML_FORMAT_NOT_SUPPORTED';
const TRY_AGAIN = 'TRY_AGAIN';
const LAST_CODE_REACHED = 'LAST_CODE_REACHED';
const REPORT_TYPE_INVALID = 'REPORT_TYPE_INVALID';
const REPORT_LINE_INDEX_LINE_ORDER_INVALID = 'REPORT_LINE_INDEX_LINE_ORDER_INVALID';
const REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION = 'REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION';
const REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION_WITH_INDEX_FOR_THIS_REPORT_TYPE = 'REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION_WITH_INDEX_FOR_THIS_REPORT_TYPE';
const REPORT_LINE_ANNEX_ALREADY_EXISTS = 'REPORT_LINE_ANNEX_ALREADY_EXISTS';
const REPORT_LINE_INEXISTANT_REPORT_LINE = 'REPORT_LINE_INEXISTANT_REPORT_LINE';
const BILL_DATE_AFTER_CURRENT_DATE = 'BILL_DATE_AFTER_CURRENT_DATE';
const DOCUMENT_ACCOUNT_NON_EXISTENT = 'DOCUMENT_ACCOUNT_NON_EXISTENT';
const REPORT_LINE_INVALID_FORMULA = 'REPORT_LINE_INVALID_FORMULA';
const REPORT_LINE_INDEX_LINE_NOT_FOUND = 'REPORT_LINE_INDEX_LINE_NOT_FOUND';
const REPORT_LINE_FORMULA_CONTAINS_REPETITION = 'REPORT_LINE_FORMULA_CONTAINS_REPETITION';
const CHART_ACCOUNT_INEXISTANT = 'CHART_ACCOUNT_INEXISTANT';
const ACCOUNT_MISSING_PARAMETERS = 'ACCOUNT_MISSING_PARAMETERS';
const ACCOUNT_CREDIT_DEBIT_IS_DIFFERENT = 'ACCOUNT_CREDIT_DEBIT_IS_DIFFERENT';
const ACCOUNT_CODE_DIFFERENT_THAN_PARENT = 'ACCOUNT_CODE_DIFFERENT_THAN_PARENT';
const ACCOUNT_COULD_NOT_BE_CREATED = 'ACCOUNT_COULD_NOT_BE_CREATED';
const ACCOUNT_IS_USED = 'ACCOUNT_IS_USED';
const JOURNAL_CODE_EXISTS = 'JOURNAL_CODE_EXISTS';
const JOURNAL_CODE_LENGTH = 'JOURNAL_CODE_LENGTH';
const JOURNAL_LABEL_EXISTS = 'JOURNAL_LABEL_EXISTS';
const NO_OPENING_BALANCE_SHEET_ACCOUNT = 'NO_OPENING_BALANCE_SHEET_ACCOUNT';
const NO_CLOSING_BALANCE_SHEET_ACCOUNT = 'NO_CLOSING_BALANCE_SHEET_ACCOUNT';
const ACCOUNT_RELATION_TYPE_INVALID = 'ACCOUNT_RELATION_TYPE_INVALID';
const ACCOUNT_RELATION_TYPE_DUPLICATES = 'ACCOUNT_RELATION_TYPE_DUPLICATES';
const ACCOUNT_RELATION_IMPLEMENTATION_NONEXISTENT = 'ACCOUNT_RELATION_IMPLEMENTATION_NONEXISTENT';
const ACCOUNT_DOES_NOT_EXIST_ALLOCATION_NOT_POSSIBLE = 'ACCOUNT_DOES_NOT_EXIST_ALLOCATION_NOT_POSSIBLE';
const JOURNAL_MISSING_PARAMETERS = 'JOURNAL_MISSING_PARAMETERS';
const JOURNAL_NO_JOURNAL_A_NEW = 'JOURNAL_NO_JOURNAL_A_NEW';
const REPORT_LINE_CANNOT_UPDATE_WHEN_FISCAL_YEAR_NOT_OPENED = 'REPORT_LINE_CANNOT_UPDATE_WHEN_FISCAL_YEAR_NOT_OPENED';
const ACCOUNT_NEGATIVE_CREDIT_OR_DEBIT = 'ACCOUNT_NEGATIVE_CREDIT_OR_DEBIT';
const CHART_ACCOUNT_PARENT_CHART_ACCOUNT_DONT_EXIST = 'CHART_ACCOUNT_PARENT_CHART_ACCOUNT_DONT_EXIST';
const CHART_ACCOUNT_LABEL_EXISTS = 'CHART_ACCOUNT_LABEL_EXISTS';
const TARGET_FISCAL_YEAR_NOT_AFTER_SELECTED_FISCAL_YEAR = 'TARGET_FISCAL_YEAR_NOT_AFTER_SELECTED_FISCAL_YEAR';
const DOCUMENT_ACCOUNT_LINE_WITH_BOTH_DEBIT_AND_CREDIT = 'DOCUMENT_ACCOUNT_LINE_WITH_BOTH_DEBIT_AND_CREDIT';
const CHART_ACCOUNT_CODE_AND_LABEL_EXIST = 'CHART_ACCOUNT_CODE_AND_LABEL_EXIST';
const USER_NOT_FOUND = 'USER_NOT_FOUND';
const USER_HAS_A_JOURNAL = 'USER_HAS_A_JOURNAL';
const CHART_ACCOUNT_MISSING_PARAMETERS = 'CHART_ACCOUNT_MISSING_PARAMETERS';
const DOCUMENT_ACCOUNT_AMOUNT_NOT_VALID = 'DOCUMENT_ACCOUNT_AMOUNT_NOT_VALID';
const CHART_ACCOUNT_ALREADY_USED_CANT_CHANGE_CODE = 'CHART_ACCOUNT_ALREADY_USED_CANT_CHANGE_CODE';
const START_DATE_IS_AFTER_END_DATE = 'START_DATE_IS_AFTER_END_DATE';
const CURRENT_FISCAL_YEAR_IS_NOT_CLOSED = 'CURRENT_FISCAL_YEAR_IS_NOT_CLOSED';
const START_DATE_INVALID = 'START_DATE_INVALID';
const DOCUMENT_ACCOUNT_CANT_UPDATE_DOCUMENT_IN_CLOSED_PERIOD = 'DOCUMENT_ACCOUNT_CANT_UPDATE_DOCUMENT_IN_CLOSED_PERIOD';
const UPDATING_FISCAL_YEAR_THAT_IS_NOT_OPENED = 'UPDATING_FISCAL_YEAR_THAT_IS_NOT_OPENED';
const UPDATING_FISCAL_YEAR_THAT_IS_NOT_LAST = 'UPDATING_FISCAL_YEAR_THAT_IS_NOT_LAST';
const YOU_MUST_CHOOSE_FOR_THE_THE_SAME_LETTER_SINGLE_ACCOUNT = 'YOU_MUST_CHOOSE_FOR_THE_THE_SAME_LETTER_SINGLE_ACCOUNT';
const TOTAL_DEBIT_SHOULD_BE_EQUAL_TO_TOTAL_CREDIT_FOR_ACCOUNT_AND_LETTER = 'TOTAL_DEBIT_SHOULD_BE_EQUAL_TO_TOTAL_CREDIT_FOR_ACCOUNT_AND_LETTER';
const DOCUMENT_ACCOUNT_CANT_DELETE_DOCUMENT_IN_CLOSED_PERIOD = 'DOCUMENT_ACCOUNT_CANT_DELETE_DOCUMENT_IN_CLOSED_PERIOD';
const YOU_MUST_CHOOSE_BOTH_A_SINGLE_ACCOUNT = 'YOU_MUST_CHOOSE_BOTH_A_SINGLE_ACCOUNT';
const TOTAL_DEBIT_IS_NOT_EQUAL_TO_TOTAL_CREDIT = 'TOTAL_DEBIT_IS_NOT_EQUAL_TO_TOTAL_CREDIT';
const CHOSEN_LETTERING_CODE_ALREADY_EXISTS = 'CHOSEN_LETTERING_CODE_ALREADY_EXISTS';
const BEGIN_ACCOUNT_CODE_IS_GREATER_THAN_END_ACCOUNT = 'BEGIN_ACCOUNT_CODE_IS_GREATER_THAN_END_ACCOUNT';
const ACCOUNT_CODE_LENGTH_INVALID = 'ACCOUNT_CODE_LENGTH_INVALID';
const ACCOUNTING_CONFIGURATION_MISSING_PARAMETERS = 'ACCOUNTING_CONFIGURATION_MISSING_PARAMETERS';
const ACCOUNTING_CONFIGURATION_CATEGORY_NOT_FOUND = 'ACCOUNTING_CONFIGURATION_CATEGORY_NOT_FOUND';
const DOCUMENT_ACCOUNT_NOT_IN_FISCAL_YEAR = 'DOCUMENT_ACCOUNT_NOT_IN_FISCAL_YEAR';
const ACCOUNTING_CONFIGURATION_DEPRECITION_PERIOD_UNAFFECTED = 'ACCOUNTING_CONFIGURATION_DEPRECITION_PERIOD_UNAFFECTED';
const TEMPLATE_ACCOUNTING_MISSING_PARAMETERS = 'TEMPLATE_ACCOUNTING_MISSING_PARAMETERS';
const REPORT_LINE_STATE_OF_INCOME_FIELDS_MISMATCH = 'REPORT_LINE_STATE_OF_INCOME_FIELDS_MISMATCH';
const LABEL_MIN_LENGTH = 'LABEL_MIN_LENGTH';
const DOCUMENT_ACCOUNT_MISSING_PARAMETERS = 'DOCUMENT_ACCOUNT_MISSING_PARAMETERS';
const DOCUMENT_ACCOUNT_NO_FISCAL_YEAR = 'DOCUMENT_ACCOUNT_NO_FISCAL_YEAR';
const DOCUMENT_ACCOUNT_DATE_INVALID = 'DOCUMENT_ACCOUNT_DATE_INVALID';
const TEMPLATE_ACCOUNTING_WITHOUT_LINES_CODE = 'TEMPLATE_ACCOUNTING_WITHOUT_LINES_CODE';
const DELETE_INTERVIEW_VIOLATION = 'DELETE_INTERVIEW_VIOLATION';
const TEMPLATE_ACCOUNTING_LABEL_EXISTS = 'TEMPLATE_ACCOUNTING_LABEL_EXISTS';

const FISCAL_YEAR_INEXISTANT_FISCAL_YEAR = 'FISCAL_YEAR_INEXISTANT_FISCAL_YEAR';
const TARGET_FISCAL_YEAR_IS_CLOSED = 'TARGET_FISCAL_YEAR_IS_CLOSED';
const FISCAL_YEAR_MISSING_PARAMETERS = 'FISCAL_YEAR_MISSING_PARAMETERS';
const FISCAL_YEAR_DATES_OVERLAP_ERROR = 'FISCAL_YEAR_DATES_OVERLAP_ERROR';
const FISCAL_YEAR_DATES_ORDER_INVALID = 'FISCAL_YEAR_DATES_ORDER_INVALID';
const ENTITY_NOT_FOUND = 'ENTITY_NOT_FOUND';
const DOCUMENT_ACCOUNT_ENTITY_NOT_FOUND = 'DOCUMENT_ACCOUNT_ENTITY_NOT_FOUND';
const FISCAL_YEAR_NAME_EXISTS = 'FISCAL_YEAR_NAME_EXISTS';
const FISCAL_YEAR_CLOSED = 'FISCAL_YEAR_CLOSED';
const DOCUMENT_ACCOUNT_CODE_EXISTS = 'DOCUMENT_ACCOUNT_CODE_EXISTS';
const DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_DELETED = 'DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_DELETED';
const DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_MANUALLY_UPDATED = 'DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_MANUALLY_UPDATED';
const DOCUMENT_ACCOUNT_COMING_FROM_BILL_CANNOT_BE_DELETED = 'DOCUMENT_ACCOUNT_COMING_FROM_BILL_CANNOT_BE_DELETED';
const DOCUMENT_ACCOUNT_CONTAINS_RECONCILABLE_LINES_CANNOT_BE_DELETED = 'DOCUMENT_ACCOUNT_CONTAINS_RECONCILABLE_LINES_CANNOT_BE_DELETED';
const DOCUMENT_ACCOUNT_CONTAINS_LETTERED_LINES_CANNOT_BE_DELETED = 'DOCUMENT_ACCOUNT_CONTAINS_LETTERED_LINES_CANNOT_BE_DELETED';
const DOCUMENT_ACCOUNT_COMING_FROM_A_BILL_CANNOT_BE_MANUALLY_UPDATED = 'DOCUMENT_ACCOUNT_COMING_FROM_A_BILL_CANNOT_BE_MANUALLY_UPDATED';
const FISCAL_YEAR_NOT_ALL_DOCUMENTS_IN_NEW_PERIOD = 'FISCAL_YEAR_NOT_ALL_DOCUMENTS_IN_NEW_PERIOD';
const EXPORT_COULD_NOT_CREATE_DIRECTORY_FOR_FILES = 'EXPORT_COULD_NOT_CREATE_DIRECTORY_FOR_FILES';
const EXCEL_ERROR_WHILE_READING_FILE = 'EXCEL_ERROR_WHILE_READING_FILE';
const EXCEL_ERROR_DOWNLOADING_THE_FILE = 'EXCEL_ERROR_DOWNLOADING_THE_FILE';
const EXCEL_INVALID_HEADERS = 'EXCEL_INVALID_HEADERS';
const EXCEL_EMPTY_FILE = 'EXCEL_EMPTY_FILE';
const EXCEL_INVALID_CONTENT_FORMAT = 'EXCEL_INVALID_CONTENT_FORMAT';
const EXCEL_INVALID_ROW = 'EXCEL_INVALID_ROW';
const EXCEL_FIRST_ROW_SHOULD_CONTAIN_DOCUMENT_INFORMATION = 'EXCEL_FIRST_ROW_SHOULD_CONTAIN_DOCUMENT_INFORMATION';
const EXCEL_HEADER_SHOULD_BE_IN_FIRST_ROW = 'EXCEL_HEADER_SHOULD_BE_IN_FIRST_ROW';
const EXCEL_HEADER_SHOULD_START_IN_FIRST_CELL = 'EXCEL_HEADER_SHOULD_START_IN_FIRST_CELL';
const EXCEL_NO_FOLDER_FOR_GENERATED_REPORTS = 'EXCEL_NO_FOLDER_FOR_GENERATED_REPORTS';
const DOCUMENT_ACCOUNT_DATE_IN_CLOSED_PERIOD = 'DOCUMENT_ACCOUNT_DATE_IN_CLOSED_PERIOD';
const FISCAL_YEAR_CLOSING_INTERVAL_OVERLAP_WITH_ALREADY_CLOSED_ONE = 'FISCAL_YEAR_CLOSING_INTERVAL_OVERLAP_WITH_ALREADY_CLOSED_ONE';
const DOCUMENT_ACCOUNT_CANT_HAVE_MULTIPLE_JOURNAL_ANEW_DOCUMENTS = 'DOCUMENT_ACCOUNT_CANT_HAVE_MULTIPLE_JOURNAL_ANEW_DOCUMENTS';
const FISCAL_YEAR_CLOSED_PERIOD_INEXISTANT = 'FISCAL_YEAR_CLOSED_PERIOD_INEXISTANT';
const DOCUMENT_ACCOUNT_WITHOUT_FISCAL_YEAR = 'DOCUMENT_ACCOUNT_WITHOUT_FISCAL_YEAR';
const FISCAL_YEAR_PREVIOUS_FISCAL_YEAR_HAS_NO_NON_LETTERED_DOCUMENT_ACCOUNT_LINES = 'FISCAL_YEAR_PREVIOUS_FISCAL_YEAR_HAS_NO_NON_LETTERED_DOCUMENT_ACCOUNT_LINES';
const FISCAL_YEAR_CLOSING_DATE_NULL = 'FISCAL_YEAR_CLOSING_DATE_NULL';
const CNSS_DECLARATION_ERROR = 'CNSS_DECLARATION_ERROR';
const ADD_TRAINING_SEANCE_DATE_LAPS_EXCEPTION = 'ADD_TRAINING_SEANCE_DATE_LAPS_EXCEPTION';
const ADD_TRAINING_SESSION_PERIOD_EXCEPTION = 'ADD_TRAINING_SESSION_PERIOD_EXCEPTION';
const END_AMOUNT_LESS_THAN_BEGIN_AMOUNT = 'END_AMOUNT_LESS_THAN_BEGIN_AMOUNT';
const BEGIN_AMOUNT_OR_END_AMOUNT_FORMAT_INCORRECT = 'BEGIN_AMOUNT_OR_END_AMOUNT_FORMAT_INCORRECT';
const ASSETS_OUT_OF_SERVICE = 'ASSETS_OUT_OF_SERVICE';
const DATE_CESSION_AFTER_DATE_COMMISSIONING = 'DATE_CESSION_AFTER_DATE_COMMISSIONING';
const DEPRECIATION_ASSETS_NOT_ACCOUNTED = 'DEPRECIATION_ASSETS_NOT_ACCOUNTED';
const AMORTIZATION_OF_ASSETS_NOT_FOUND = 'AMORTIZATION_OF_ASSETS_NOT_FOUND';
const DEPRECIATION_ASSETS_FIELD_EMPTY = 'DEPRECIATION_ASSETS_FIELD_EMPTY';
const EXCEL_FILE_LOCKED_BY_PASSWORD = 'EXCEL_FILE_LOCKED_BY_PASSWORD';
const EXCEL_FILE_NOT_FOUND = 'EXCEL_FILE_NOT_FOUND';
const ENTITY_ACCOUNTING_FIELD_NOT_VALID = 'ENTITY_ACCOUNTING_FIELD_NOT_VALID';
const INVALID_FORMAT_EXCEPTION = 'INVALID_FORMAT_EXCEPTION';
const HTTP_MESSAGE_NOT_READABLE_EXCEPTION = 'HTTP_MESSAGE_NOT_READABLE_EXCEPTION';
const ACCOUNT_NOT_BALANCED = 'ACCOUNT_NOT_BALANCED';

const CHART_ACCOUNT_MAX_CODE_EXCEEDED = 'CHART_ACCOUNT_MAX_CODE_EXCEEDED';
const EXCEL_NO_CHART_ACCOUNTS_TO_BE_SAVED = 'EXCEL_NO_CHART_ACCOUNTS_TO_BE_SAVED';
const EXCEL_NO_DOCUMENT_ACCOUNTS_TO_BE_SAVED = 'EXCEL_NO_DOCUMENT_ACCOUNTS_TO_BE_SAVED';
const TARGET_FISCAL_YEAR_NON_EXISTENT = 'TARGET_FISCAL_YEAR_NON_EXISTENT';
const CURRENT_FISCAL_YEAR_NON_EXISTENT = 'CURRENT_FISCAL_YEAR_NON_EXISTENT';
const RESULT_ACCOUNT_NON_EXISTENT = 'RESULT_ACCOUNT_NON_EXISTENT';


const DATE_CESSION_NULL = 'DATE_CESSION_NULL';
const RESOURCE_NOT_FOUND = 'RESOURCE_NOT_FOUND';
const DATE_CESSION_OUT_OF_SERVICE = 'DATE_CESSION_OUT_OF_SERVICE';

const PREVIOUS_FISCAL_YEARS_NOT_ALL_CONCLUDED = 'PREVIOUS_FISCAL_YEARS_NOT_ALL_CONCLUDED';
const LEAVE_REQUEST_VIOLATION = 'LEAVE_REQUEST_VIOLATION';
const LEAVE_DATE_VIOLATION = 'LEAVE_DATE_VIOLATION';
const LEAVE_UPDATE_VIOLATION = 'LEAVE_UPDATE_VIOLATION';
const LEAVE_DELETE_VIOLATION = 'LEAVE_DELETE_VIOLATION';
const LEAVE_DATE_INTERVAL_VIOLATION = 'LEAVE_DATE_INTERVAL_VIOLATION';
const EMPLOYEE_HAVENOT_PAYSLIP = 'EMPLOYEE_HAVENOT_PAYSLIP';
const NOMENCALTURE_REFERENCE_EXIST = 'NOMENCLATURE_REFERENCE_EXIST';
const NOMENCALTURE_PRODUCT_EXIST = 'NOMENCALTURE_PRODUCT_EXIST';
const NOMENCLATURE_NOT_EXIST = 'NOMENCLATURE_NOT_EXIST';
const NOMECLATRUE_CHECK_PRODUCT_EXIST_IN_SUB_PRODUCT = 'NOMECLATRUE_CHECK_PRODUCT_EXIST_IN_SUB_PRODUCT';

const ACCOUNTING_CONFIGURATION_NO_CONFIGURATION_FOUND = 'ACCOUNTING_CONFIGURATION_NO_CONFIGURATION_FOUND';
const ACCOUNTING_CONFIGURATION_ACCOUNTS_NOT_FOUND = 'ACCOUNTING_CONFIGURATION_ACCOUNTS_NOT_FOUND';
const ACCOUNTING_CONFIGURATION_FISCAL_YEAR_NOT_FOUND = 'ACCOUNTING_CONFIGURATION_FISCAL_YEAR_NOT_FOUND';
const DOCUMENT_ACCOUNT_WITHOUT_LINES_CODE = 'DOCUMENT_ACCOUNT_WITHOUT_LINES_CODE';
const REPORT_LINE_ASSETS_NOT_FOUND = 'REPORT_LINE_ASSETS_NOT_FOUND';

const CANDIDACY_UNPRESELECTED_VIOLATION = 'CANDIDACY_UNPRESELECTED_VIOLATION';
const CANDIDACY_ADD_EXISTING_CANDIDATE = 'CANDIDACY_ADD_EXISTING_CANDIDATE';
const ADD_EXISTING_CANDIDATE = 'ADD_EXISTING_CANDIDATE';
const CANDIDACY_EMPTY_LIST = 'CANDIDACY_EMPTY_LIST';
const CHANGE_PASSWORD_ERRORS = 'CHANGE_PASSWORD_ERRORS';
const JOB_ADD_EXCEPTION = 'JOB_ADD_EXCEPTION';
const NULL_JOB_ADD_EXCEPTION = 'NULL_JOB_ADD_EXCEPTION';
const JOB_UPDATE_EXCEPTION = 'JOB_UPDATE_EXCEPTION';
const ADD_TRAINING_SEANCE_HOURS_EXCEPTION = 'ADD_TRAINING_SEANCE_HOURS_EXCEPTION';
const ADD_TRAINING_SEANCE_HOURS_LAPS_EXCEPTION = 'ADD_TRAINING_SEANCE_HOURS_LAPS_EXCEPTION';
const INTERVIEW_TO_NEXT_STEP_VIOLATION = 'INTERVIEW_TO_NEXT_STEP_VIOLATION';
const DONE_RECRUITMENT_VIOLATION = 'DONE_RECRUITMENT_VIOLATION';
const UPDATE_CLOSED_RECRUITMENT_VIOLATION = 'UPDATE_CLOSED_RECRUITMENT_VIOLATION';
const EMPTY_EVALUATION_LIST_VIOLATION = 'EMPTY_EVALUATION_LIST_VIOLATION';
const OBJECTIVE_EXCEPTION = 'OBJECTIVE_EXCEPTION';
const EXCEL_FILE_CREATION_FAIL = 'EXCEL_FILE_CREATION_FAIL';
const CNSS_TELE_DECLARATION_ERROR = 'CNSS_TELE_DECLARATION_ERROR';
const COMPANY_CNSS_AFFILIATION_INCORRECT = 'COMPANY_CNSS_AFFILIATION_INCORRECT';
const CNSS_EXPLOITATION_CODE_INCORRECT = 'CNSS_EXPLOITATION_CODE_INCORRECT';
const EMPLOYEE_CNSS_NUMBER_INCORRECT = 'EMPLOYEE_CNSS_NUMBER_INCORRECT';
const EMPLOYEE_IDENTITY_PIECE_INCORRECT = 'EMPLOYEE_IDENTITY_PIECE_INCORRECT';
const PARAMETER_LENGTH_EXCEED = 'PARAMETER_LENGTH_EXCEED';
const LEAVE_WITH_JUSTIFICATION_VIOLATION = 'LEAVE_WITH_JUSTIFICATION_VIOLATION';
const PRE_SELECTION_TO_NEXT_STEP_VIOLATION = 'PRE_SELECTION_TO_NEXT_STEP_VIOLATION';
const CANDIDACY_UNSELECTED_VIOLATION = 'CANDIDACY_UNSELECTED_VIOLATION';
const BILL_ALREADY_IMPORTED = 'BILL_ALREADY_IMPORTED';
const BILL_SAVE_ERROR = 'BILL_SAVE_ERROR';
const BILL_DATE_NOT_IN_FISCAL_YEAR = 'BILL_DATE_NOT_IN_FISCAL_YEAR';
const NULL_BILL_ACCOUNT_ID = 'NULL_BILL_ACCOUNT_ID';
const NULL_VAT_ACCOUNT_ID = 'NULL_VAT_ACCOUNT_ID';
const NULL_TIER_ACCOUNT_ID = 'NULL_TIER_ACCOUNT_ID';
const NULL_ARTICLE_ACCOUNT_ID = 'NULL_ARTICLE_ACCOUNT_ID';
const DUPLICATE_ENTRY = 'DUPLICATE_ENTRY';
const DOCUMENT_ACCOUNT_LINE_NOT_FOUND = 'DOCUMENT_ACCOUNT_LINE_NOT_FOUND';
const LETTERING_OPERATION_IN_CLOSED_PERIOD = 'LETTERING_OPERATION_IN_CLOSED_PERIOD';
const ADD_PERIOD_WITH_NO_HOURS_EXCEPTION = 'ADD_PERIOD_WITH_NO_HOURS_EXCEPTION';
const REVIEW_SKILLS_DELETE_EXCEPTION = 'REVIEW_SKILLS_DELETE_EXCEPTION';
const REVIEW_EDITION_EXCEPTION = 'REVIEW_EDITION_EXCEPTION';
const REVIEW_QUESTION_EXCEPTION = 'REVIEW_QUESTION_EXCEPTION';
const DELETE_REVIEW_ARRAY_EXCEPTION = 'DELETE_REVIEW_ARRAY_EXCEPTION';
const SELECTION_TO_NEXT_STEP_VIOLATION = 'SELECTION_TO_NEXT_STEP_VIOLATION';
const ADD_OFFER_VIOLATION = 'ADD_OFFER_VIOLATION';
const UPDATE_OFFER_VIOLATION = 'UPDATE_OFFER_VIOLATION';
const OFFER_TO_NEXT_STEP_VIOLATION = 'OFFER_TO_NEXT_STEP_VIOLATION';
const HOLIDAY_DATE_NOT_INCLUDE_IN_PERIOD_DATE = 'HOLIDAY_DATE_NOT_INCLUDE_IN_PERIOD_DATE';
const OVERLAPPING_PERIOD = 'OVERLAPPING_PERIOD';
const CONTIGUOUS_HOURS_EXCEPTION = 'CONTIGUOUS_HOURS_EXCEPTION';
const DUPLICATE_DAYOFF_EXCEPTION = 'DUPLICATE_DAYOFF_EXCEPTION';
const HOURS_TIME_EXCEPTION = 'HOURS_TIME_EXCEPTION';
const PERIOD_NOT_CONTIGUOUS_EXCEPTION = 'PERIOD_NOT_CONTIGUOUS_EXCEPTION';
const ITEM_NOT_FILED = 'ITEM_NOT_FILED';
const EXIST_PENDING_INVENTORY_DOCUMENT = 'EXIST_PENDING_INVENTORY_DOCUMENT';
const ADD_NOT_EXISTING_INVENTORY = 'ADD_NOT_EXISTING_INVENTORY';
const ADD_NOT_EXISTING_INVENTORY_LINE = 'ADD_NOT_EXISTING_INVENTORY_LINE';
const ADD_EXISTING_INVENTORY_LINE = 'ADD_EXISTING_INVENTORY_LINE';
const ADD_EXISTING_INVENTORY = 'ADD_EXISTING_INVENTORY';
const STARTDATE_EXCEED_ENDDATE = 'STARTDATE_EXCEED_ENDDATE';
const OFFER_DELTE_VIOLATION = 'OFFER_DELTE_VIOLATION';
const OFFER_ACCEPT_VIOLATION = 'OFFER_ACCEPT_VIOLATION';
const OFFER_REJECT_VIOLATION = 'OFFER_REJECT_VIOLATION';
const MACHINE_DESCRIPTION_EXIST = 'MACHINE_DESCRIPTION_EXIST';
const GAMME_EXIST = 'GAMME_EXIST';
const USER_EMAIL_UNICITY = 'USER_EMAIL_UNICITY';
const ANY_PERIOD_DEFINED = 'ANY_PERIOD_DEFINED';
const STARTTIME_EXCEED_ENDTIME = 'STARTTIME_EXCEED_ENDTIME';
const DATE_MUST_HAVE_ONE_UNIQUE_PERIOD = 'DATE_MUST_HAVE_ONE_UNIQUE_PERIOD';
const ITEM_UNICITY = 'ITEM_UNICITY';
const AUTHORIZED_AMOUNT_EXCEEDED = 'AUTHORIZED_AMOUNT_EXCEEDED';
const TIMESHEET_UPDATE_VIOLATION = 'TIMESHEET_UPDATE_VIOLATION';
const HAVENOT_PERMISSION_FORVLIDATE_OR_REFUSE = 'HAVENOT_PERMISSION_FORVLIDATE_OR_REFUSE';
const ITEM_ALREADY_EXIST_IN_DOCUMENTLINE = 'ITEM_ALREADY_EXIST_IN_DOCUMENTLINE';
const AREA_NOT_EMPTY = 'AREA_NOT_EMPTY';
const MACHINE_USED_IN_OPERATION = 'MACHINE_USED_IN_OPERATION';
const NOMENCLATURE_USED_IN_FABRICATION_ARRANGEMENT = 'NOMENCLATURE_USED_IN_FABRICATION_ARRANGEMENT';
const GAMME_USED_IN_FABRICATION_ARRANGEMENT = 'GAMME_USED_IN_FABRICATION_ARRANGEMENT';
const TIMESHEET_LINE_OVERLAP = 'TIMESHEET_LINE_OVERLAP';
const CODE_UNICITY = 'CODE_UNICITY';
const TITLE_CODE_UNICITY = 'TITLE_CODE_UNICITY';
const NOMENCLATURE_USED_IN_OTHER_NOMENCLATURE = 'NOMENCLATURE_USED_IN_OTHER_NOMENCLATURE';
const REQUIRED_EMPLOYEE_USER_VIOLATION = 'REQUIRED_EMPLOYEE_USER_VIOLATION';
const CANT_ADD_NEXT_MONTH_TIMESHEET = 'CANT_ADD_NEXT_MONTH_TIMESHEET';
const ITEM_REPLACEMENT_LOOP = 'ITEM_REPLACEMENT_LOOP';
const TAX_REQUIRED_ERROR = 'TAX_REQUIRED_ERROR';
const CANT_VALIDATE_TIMESHEET_BECAUSE_WAITING_LEAVE_EXIST = 'CANT_VALIDATE_TIMESHEET_BECAUSE_WAITING_LEAVE_EXIST';
const LIBERATION_QUANTITY_BECAUSE_PANIER = 'LIBERATION_QUANTITY_BECAUSE_PANIER';
const NO_LINES_ARE_ADDED = 'NO_LINES_ARE_ADDED';
const SEND_MAIL_ERROR_TIERS_WITHOUT_CONTACT_EMAIL = 'SEND_MAIL_ERROR_TIERS_WITHOUT_CONTACT_EMAIL';

const SEND_MAIL_ERROR_DOCUMENT_WITHOUT_CONTACT = 'SEND_MAIL_ERROR_DOCUMENT_WITHOUT_CONTACT';
const NO_ACCOUNT_PREFIXED_BY_CODE = 'NO_ACCOUNT_PREFIXED_BY_CODE';
const ENTITY_REFERENCED = 'ENTITY_REFERENCED';
const ACCOUNT_SUPPLIER_DOES_NOT_EXIST = 'ACCOUNT_SUPPLIER_DOES_NOT_EXIST';
const ACCOUNT_CUSTOMER_DOES_NOT_EXIST = 'ACCOUNT_CUSTOMER_DOES_NOT_EXIST';
const ACCOUNT_TAXE_DOES_NOT_EXIST = 'ACCOUNT_TAXE_DOES_NOT_EXIST';

const INVALID_SATATUS_DOCUMENT = 'INVALID_SATATUS_DOCUMENT';

const ADD_EXISTING_CLAIM = 'ADD_EXISTING_CLAIM';
const ADD_NOT_EXISTING_CLAIM = 'ADD_NOT_EXISTING_CLAIM';
const UPDATE_NOT_EXISTING_CLAIM = 'UPDATE_NOT_EXISTING_CLAIM';
const ADD_EXISTING_CLAIM_TIERS_ASSET = 'ADD_EXISTING_CLAIM_TIERS_ASSET';
const ADD_EXISTING_CLAIM_MOVEMENT_IN = 'ADD_EXISTING_CLAIM_MOVEMENT_IN';
const ADD_EXISTING_CLAIM_MOVEMENT_OUT = 'ADD_EXISTING_CLAIM_MOVEMENT_OUT';
const ADD_NOT_EXISTING_CLAIM_TIERS_ASSET = 'ADD_NOT_EXISTING_CLAIM_TIERS_ASSET';
const ADD_EXISTING_CLAIM_STOCK_MOVEMENT = 'ADD_EXISTING_CLAIM_STOCK_MOVEMENT';
const ADD_NOT_EXISTING_CLAIM_STOCK_MOVEMENT = 'ADD_NOT_EXISTING_CLAIM_STOCK_MOVEMENT';
const UPDATE_NOT_EXISTING_STOCK_MOVEMENT = 'UPDATE_NOT_EXISTING_STOCK_MOVEMENT';

const No_Lines_To_Be_ADDED = 'No_Lines_To_Be_ADDED';
const ALREADY_VALIDATED_DOCUMENT = 'ALREADY_VALIDATED_DOCUMENT';
const EXISTING_SALES_INVOICE_FROM_VALIDATED_DOCUMENT = 'EXISTING_SALES_INVOICE_FROM_VALIDATED_DOCUMENT';
const NOT_AVAILABLE_CLAIM_STOCKMOVEMENT_QUANTITY = 'NOT_AVAILABLE_CLAIM_STOCKMOVEMENT_QUANTITY';
const NOT_SAME_CLAIM_QUANTITY = 'NOT_SAMECLAIM_QUANTITY';
const INVALID_SETTELMENT_DATE = 'INVALID_SETTELMENT_DATE';
const DOCUMENT_DELETED = 'DOCUMENT_DELETED';
const ERROR_QUANTITY_WITH_PARAM = 'ERROR_QUANTITY_WITH_PARAM';
const ERROR_QUANTITY_TITLE = 'ERROR_QUANTITY_TITLE';
const BL_INVOICED = 'BL_INVOICED';
const UPDATE_NOT_EXISTING_ROLE_CODE = 'UPDATE_NOT_EXISTING_ROLE_CODE';
const ADD_EXISTING_ROLE_CODE = 'ADD_EXISTING_ROLE_CODE';
const TRYING_TO_SORT_USING_NON_EXISTENT_FIELD = 'TRYING_TO_SORT_USING_NON_EXISTENT_FIELD';
const CHART_ACCOUNT_ALREADY_USED_CANT_DELETE = 'CHART_ACCOUNT_ALREADY_USED_CANT_DELETE';
const EMPTY_LIST = 'EMPTY_LIST';
const NO_PRINTER_INSTALLED = 'NO_PRINTER_INSTALLED';
const CANT_DELETE_RESERVED_DOCUMENT = 'CANT_DELETE_RESERVED_DOCUMENT';
const VALID_ASSOCIATED_INVOICE = 'VALID_ASSOCIATED_INVOICE';
const ITEM_NOT_EXIST_IN_WARHOUSE = 'ITEM_NOT_EXIST_IN_WARHOUSE';
const DOCUMENT_IS_IMPORTED = 'DOCUMENT_IS_IMPORTED';
const DELETED_DOCUMENT_LINE = 'DELETED_DOCUMENT_LINE';
const UPDATED_QTY_DOCUMENT_LINE = 'UPDATED_QTY_DOCUMENT_LINE';
const UPDATE_PURCHASE_DELIVERY_QUANTITY = 'UPDATE_PURCHASE_DELIVERY_QUANTITY';
const NEGOTIATION_ALREADY_ADDED = 'NEGOTIATION_ALREADY_ADDED';
const NO_RIGHTS_TO_DELETE_RESERVED_LINE_EXCEPTION = 'NO_RIGHTS_TO_DELETE_RESERVED_LINE_EXCEPTION';

/**
 *
 * handle http response errors
 * */
@Injectable()
export class ErrorHandlerService implements ErrorHandler {

  // errors diactionary
  private errorActions: Array<Function>;

  /**
   * create new service instance
   * @param router
   * @param growlService
   * @param translate
   */
  constructor(private router: Router, private growlService: GrowlService, private translate: TranslateService, private datePipe: DatePipe) {
    this.initErrorActions();
  }

  /**
   * handel error and show error message
   * @param error
   * @param listErrorParams
   */
  public handleError(error: HttpErrorResponse, listErrorParams?: any): void {
    const httpErrorCode = error.status;
    if (!this.translate.getDefaultLang()) {
      this.translate.setDefaultLang(EN);
    }
    if (typeof this.errorActions[httpErrorCode] === FUNCTION) {
      if (listErrorParams) {
        this.errorActions[httpErrorCode](listErrorParams);
      } else if (httpErrorCode === 800) {
        this.growlService.ErrorNotification(this.translate.instant(SESSION_EXPIRED));
        setTimeout(() => {
          this.router.navigateByUrl(LOGIN_PAGE);
        }, 2000);
      } else {
        this.errorActions[httpErrorCode]();
      }
    } else {
      this.growlService.ErrorNotification(this.translate.instant(UNKNOWN_ERROR_MSG));
    }
  }

  /**
   * init errors diactionary
   * */
  private initErrorActions() {
    // create error dictionary
    this.errorActions = new Array();
    // when Unauthorized error action
    this.errorActions[HttpStatusCodes.Unauthorized] = (listErrorParams?: any) => {
      if (!listErrorParams) {
        this.growlService.ErrorNotification(this.translate.instant(UNAUTHRIZED_ERROR_MSG));
      } else {
        this.growlService.ErrorNotification(this.buildUnathErrorMessage(listErrorParams));
      }
    };
    this.errorActions[HttpStatusCodes.EMPTY_LIST] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EMPTY_LIST)}`);
    };
    // when Forbidden error action
    this.errorActions[HttpStatusCodes.Forbidden] = () => {
      this.router.navigateByUrl(LOGIN_URL);
      this.growlService.ErrorNotification(this.translate.instant(FORBIDDEN_ERROR_MSG));
    };

    // when Forbidden error action
    this.errorActions[HttpStatusCodes.WarehouseQuantityMinMax] = () => {
      this.growlService.ErrorNotification(this.translate.instant(WAREHOUSE_QUANTITY_MIN_MAX));
    };

    // when SessionExpired action
    this.errorActions[HttpStatusCodes.SessionExpired] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SESSION_EXPIRED));
      setTimeout(() => {
        this.router.navigateByUrl(LOGIN_PAGE);
      }, 2000);
    };

    // when BadRequest error action
    this.errorActions[HttpStatusCodes.BadRequest] = () => {
      this.growlService.ErrorNotification(this.translate.instant(BADREQUEST_ERROR_MSG));
    };

    // when Employee Recursivity Violation action
    this.errorActions[HttpStatusCodes.EmployeeRecursivityViolation] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EMPLOYEE_RECURSIVITY_VIOLATION));
    };

    // when BadGateway error action
    this.errorActions[HttpStatusCodes.BadGateway] = () => {
      this.growlService.ErrorNotification(this.translate.instant(BADGATEWAY_ERROR_MSG));
    };

    // when Ecommerce error action
    this.errorActions[HttpStatusCodes.EcommerceException] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ECOMMERCE_BADGATEWAY_ERROR_MSG));
    };
    // when Ecommerce in progress action
    this.errorActions[HttpStatusCodes.EcommerceInProgressException] = () => {
      this.growlService.warningNotification(this.translate.instant(ECOMMERCE_IN_PROGRESS_EXCEPTION));
    };

    // when NotFound error action
    this.errorActions[HttpStatusCodes.NotFound] = () => {
      this.growlService.ErrorNotification(this.translate.instant(NOTFOUND_ERROR_MSG));
    };

    // when UnsupportedMediaType error action
    this.errorActions[HttpStatusCodes.UnsupportedMediaType] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UNSUPPORTED_MEDIA_TYPE_ERROR_MSG));
    };
    // when Conflict error action
    this.errorActions[HttpStatusCodes.Conflict] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CONFLICT_ERROR_MSG));
    };

    // when RequestTimeout error action
    this.errorActions[HttpStatusCodes.RequestTimeout] = () => {
      this.growlService.ErrorNotification(this.translate.instant(REQUEST_TIMEOUT_ERROR_MSG));
    };

    // when RequestUriTooLong error action
    this.errorActions[HttpStatusCodes.RequestUriTooLong] = () => {
      this.growlService.ErrorNotification(this.translate.instant(REQUEST_URI_TOO_LONG));
    };

    // when InternalServerError error action
    this.errorActions[HttpStatusCodes.InternalServerError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(INTERNAL_SERVER_ERROR_MSG));
    };

    // when VALIDATE_SUBSEQUENT_INVOICES error action
    this.errorActions[HttpStatusCodes.VALIDATE_SUBSEQUENT_INVOICES] = () => {
      this.growlService.ErrorNotification(this.translate.instant(VALIDATE_SUBSEQUENT_INVOICES));
    };

    // when VALIDATE_PREVIOUS_INVOICES error action
    this.errorActions[HttpStatusCodes.VALIDATE_PREVIOUS_INVOICES] = () => {
      this.growlService.ErrorNotification(this.translate.instant(VALIDATE_PREVIOUS_INVOICES));
    };

    // when VALIDATE_PREVIOUS_BL error action
    this.errorActions[HttpStatusCodes.VALIDATE_PREVIOUS_BL] = () => {
      this.growlService.ErrorNotification(this.translate.instant(VALIDATE_PREVIOUS_BL));
    };

    // when ClientRquiredError error action
    this.errorActions[HttpStatusCodes.ClientRquiredError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ClientRquiredError));
    };

    // when SupplierRquiredError error action
    this.errorActions[HttpStatusCodes.SupplierRquiredError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SupplierRquiredError));
    };

    // when TaxItemValueError error action
    this.errorActions[HttpStatusCodes.TaxItemValueError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(TaxItemValueError));
    };

    // when ClientCurrencyError error action
    this.errorActions[HttpStatusCodes.ClientCurrencyError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ClientCurrencyError));
    };

    // when SupplierCurrencyError error action
    this.errorActions[HttpStatusCodes.SupplierCurrencyError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SupplierCurrencyError));
    };

    // when InvalidExcelFormat error action
    this.errorActions[HttpStatusCodes.InvalidExcelFormat] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INVALID_EXCEL_FORMAT)}`);
    };

    // when Warehouse is required
    this.errorActions[HttpStatusCodes.DepotObligatoire] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(WAREHOUSE_REQUIRED)}`);
    };

    // when Warehouse is required
    this.errorActions[HttpStatusCodes.ValidationOfDocumentWithStockReservation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(VALIDATION_OF_DOCUMENT_WITH_STOCK_RESERVATION_ERROR_MSG)}`);
    };

    // INSUFFICIENT_QUANTITY
    this.errorActions[HttpStatusCodes.InsufficientQuantity] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INSUFFICIENT_QUANTITY)}`);
    };

    // when OverlapTarif error action
    this.errorActions[HttpStatusCodes.OverlapTarif] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OVERLAP_TARIF_ERROR)}`);
    };

    // when OverlapTarif error action
    this.errorActions[HttpStatusCodes.ValueDiscountePrices] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(VALUE_DISCOUNTE_PRICES)}`);
    };
    // when OverlapTarif error action
    this.errorActions[HttpStatusCodes.VALID_ASSOCIATED_INVOICE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(VALID_ASSOCIATED_INVOICE)}`);
    };

    this.errorActions[HttpStatusCodes.INVALID_SATATUS_DOCUMENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INVALID_SATATUS_DOCUMENT)}`);
    };

    this.errorActions[HttpStatusCodes.ITEM_NOT_EXIST_IN_WARHOUSE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ITEM_NOT_EXIST_IN_WARHOUSE)}`);
    };
    this.errorActions[HttpStatusCodes.DOCUMENT_IS_IMPORTED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_IS_IMPORTED)}`);
    };
    this.errorActions[HttpStatusCodes.UPDATE_PURCHASE_DELIVERY_QUANTITY] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(UPDATE_PURCHASE_DELIVERY_QUANTITY)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.warningNotification(errorMEssage);
    };

    this.errorActions[HttpStatusCodes.InsufficientQuantityForItem] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(INSUFFICIENT_QUANTITY_FOR_ITEM)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    // when Forbidden duplicated entry
    this.errorActions[HttpStatusCodes.duplicateEntry] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATE_ENTRY)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName][0]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    // when InvalidExcelData error action
    this.errorActions[HttpStatusCodes.InvalidExcelData] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(INVALID_EXCEL_DATA)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // when Excel RequiredColumn is null or empty error action
    this.errorActions[HttpStatusCodes.ExcelRequiredColumn] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EXCEL_REQUIRED_COLUMN)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // when Excel UniqueColumnInDB is duplicated
    this.errorActions[HttpStatusCodes.ExcelUniqueColumnInDB] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EXCEL_UNIQUE_COLUMN_IN_DB)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // when Excel UniqueColumnInFile is duplicated
    this.errorActions[HttpStatusCodes.ExcelUniqueColumnInFile] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EXCEL_UNIQUE_COLUMN_IN_FILE)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // when Excel Invalid Email Column is duplicated
    this.errorActions[HttpStatusCodes.ExcelInvalidEmailColumn] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EXCEL_INVALID_EMAIL_COLUMN)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    // when dependency dates violated
    this.errorActions[HttpStatusCodes.DatesDependency] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(DATES_DEPENDENCY)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'),
          this.translate.instant(listErrorParams[paramName].toUpperCase()));
      }
      this.growlService.ErrorNotification(errorMEssage);
    };


    // when invalid delete entity
    this.errorActions[HttpStatusCodes.DeleteError] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(DELETE_ERROR)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'),
          this.translate.instant(listErrorParams[paramName].toUpperCase()));
      }
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_DELETE_ERROR));
    };
    // when article without supplier
    this.errorActions[HttpStatusCodes.SetSupplierToItem] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SET_SUPPLIER_TO_ITEMS));
    };

    // when interview requested to candidate deleting
    this.errorActions[HttpStatusCodes.DeleteInterviewViolation] = () => {
      this.growlService.ErrorNotification(this.translate.instant(DELETE_INTERVIEW_VIOLATION));
    };

    // when article with type service in provisionning
    this.errorActions[HttpStatusCodes.ProductType] = () => {
      this.growlService.ErrorNotification(this.translate.instant(PRODUCT_TYPE));
    };

    // when trying to update candidacy that have one or more interviews
    this.errorActions[HttpStatusCodes.UpdateCandidacyWithInterviews] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UPDATE_CANDIDACY_WITH_INTERVIEWS_ERROR));
    };

    // when trying to update evaluation that have one or more offers sende, accepted or rejected
    this.errorActions[HttpStatusCodes.UpdateEvaluationWithSendedOffers] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UPDATE_EVALUATION_WITH_SENDED_OFFERS_ERROR));
    };

    // when trying to update candidacy that have one or more offers sende, accepted or rejected
    this.errorActions[HttpStatusCodes.UpdateCandidacyWithSendedOffers] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UPDATE_CANDIDACY_WITH_SENDED_OFFERS_ERROR));
    };

    // when trying to update candidacy that have one or more offers sende, accepted or rejected
    this.errorActions[HttpStatusCodes.UpdateInterviewWithSendedOffers] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UPDATE_INTERVIEW_WITH_SENDED_OFFERS_ERROR));
    };

    // when trying to set a negative quantity
    this.errorActions[HttpStatusCodes.PositiveQuantityViolation] = () => {
      this.growlService.ErrorNotification(this.translate.instant(POSITIVE_QUANTITY_VIOLATION_ERROR));
    };

    // when settlement amount is zero
    this.errorActions[HttpStatusCodes.SettlementAmountIsZero] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SETTLEMENT_AMOUNT_IS_ZERO));
    };
    // when settlement amount is Greater Than Selected Commitment
    this.errorActions[HttpStatusCodes.SettlementAmountIsGreaterThanSelectedCommitment] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SETTLEMENT_AMOUNT_IS_GREATER_THAN_COMMITMENT));
    };
    // when financial commitment allocated amount is Greater Than Remaining
    this.errorActions[HttpStatusCodes.FinancialCommitmentAllocatedAmountGreaterThanRemaining] = () => {
      this.growlService.ErrorNotification(this.translate.instant(FINANCIAL_COMMITMENT_ALLOCATED_AMOUNT_IS_GREATER_THAN_REMAINING));
    };
    // When the attendances of one employee exceed company number days of work
    this.errorActions[HttpStatusCodes.ATTENDANCE_VALUE_EXCEED] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(ATTENDANCE_VALUE_EXCEED)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // When add an duplicate skills
    this.errorActions[HttpStatusCodes.DuplicateSkillsException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATE_SKILLS_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // When add an duplicate formation to the review-form
    this.errorActions[HttpStatusCodes.DuplicateFormationException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATE_FORMATION_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // When attempt to include an employee who havenot payslip for specific month
    this.errorActions[HttpStatusCodes.EMPLOYEE_HAVENOT_PAYSLIP] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(EMPLOYEE_HAVENOT_PAYSLIP)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /* When the CNSS Exploitation code length is different to required length */
    this.errorActions[HttpStatusCodes.CNSS_EXPLOITATION_CODE_INCORRECT] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(CNSS_EXPLOITATION_CODE_INCORRECT)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /* When the employee cnss number length is different to required length */
    this.errorActions[HttpStatusCodes.EMPLOYEE_CNSS_NUMBER_INCORRECT] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(EMPLOYEE_CNSS_NUMBER_INCORRECT)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /* Cnss teledeclaration file generation error */
    this.errorActions[HttpStatusCodes.CNSS_TELE_DECLARATION_ERROR] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CNSS_TELE_DECLARATION_ERROR)}`);
    };
    /* When the company Cnss Affiliation number length is different to required length */
    this.errorActions[HttpStatusCodes.COMPANY_CNSS_AFFILIATION_INCORRECT] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(COMPANY_CNSS_AFFILIATION_INCORRECT)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /* When the employee identity piece length is different to required length */
    this.errorActions[HttpStatusCodes.EMPLOYEE_IDENTITY_PIECE_INCORRECT] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(EMPLOYEE_IDENTITY_PIECE_INCORRECT)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // when Employee Recursivity Violation action
    this.errorActions[HttpStatusCodes.EmployeeRecursivityViolation] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EMPLOYEE_RECURSIVITY_VIOLATION)}`;
      // tslint:disable-next-line:forin
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    /** When any teledeclaration parameter exceed the required length */
    this.errorActions[HttpStatusCodes.PARAMETER_LENGTH_EXCEED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(PARAMETER_LENGTH_EXCEED)}`);
    };

    // when add same warehouse in item section
    this.errorActions[HttpStatusCodes.WarehouseUnicity] = () => {
      this.growlService.ErrorNotification(this.translate.instant(WAREHOUSE_UNICITY));
    };
    // When the session number is not unique per month
    this.errorActions[HttpStatusCodes.SESSION_NUMBER_NOT_UNIQUE] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SESSION_NUMBER_UNIQUE));
    };
    // When attempt to generate cnss declaration for one month of select trimester does not have a session
    this.errorActions[HttpStatusCodes.CNSS_DECLARATION_ERROR] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CNSS_DECLARATION_ERROR));
    };
    // when PriceRequest contains two tiersPriceRequest with the same Supplier Id
    this.errorActions[HttpStatusCodes.TiersPriceRequestUnicity] = () => {
      this.growlService.ErrorNotification(this.translate.instant(TIERS_PRICE_REQUEST_UNICITY));
    };
    // When attempt to include one contract in two different transfer order
    this.errorActions[HttpStatusCodes.CONTRACT_BY_TRANSFER_ORDER_UNICITY] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CONTRACT_BY_TRANSFER_ORDER_UNICITY));
    };
    // when List Equivalence has different guid from the current item
    this.errorActions[HttpStatusCodes.IncompatibleEquivalenceGroup] = () => {
      this.growlService.ErrorNotification(this.translate.instant(INCOMPATIBLE_EQUIVALENCE_GROUPE));
    };

    // when generating price request contact ters is required
    this.errorActions[HttpStatusCodes.ContactRequired] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CONTACT_REQUIRED));
    };

    // when invalid send mail
    this.errorActions[HttpStatusCodes.SendMailError] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(SEND_MAIL_ERROR)}`;
      for (const paramName in listErrorParams) {
        for (const tiers of listErrorParams[paramName]) {
          errorMEssage = errorMEssage.concat(' \n - ').concat(tiers.Name);
        }
      }
      errorMEssage = errorMEssage.concat(' \n ');
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_SEND_MAIL_ERROR));
    };

    // when invalid generate price request
    this.errorActions[HttpStatusCodes.GeneratePriceRequestError] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(GENERATE_PRICE_REQUEST_ERROR)}`;
      for (const paramName in listErrorParams) {
        for (const name of listErrorParams[paramName]) {
          errorMEssage = errorMEssage.concat(' \n - ').concat(name);
        }
      }
      errorMEssage = errorMEssage.concat(' \n ');
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_GENERATE_PRICE_REQUEST_ERROR));
    };

    // when payslip preview error is generated
    this.errorActions[HttpStatusCodes.PAYSLIP_PREVIEW] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(PAYSLIP_PREVIEW_NOT_GENERATED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_CODE_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_CODE_EXISTS, { code: params[0] })}`);
    };


    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_AMOUNT_CODE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_AMOUNT_NOT_VALID)}`);
    };

    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_DELETED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_DELETED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_MANUALLY_UPDATED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_MANUALLY_UPDATED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_COMING_FROM_BILL_CANNOT_BE_DELETED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_COMING_FROM_BILL_CANNOT_BE_DELETED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_CONTAINS_RECONCILABLE_LINES_CANNOT_BE_DELETED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_CONTAINS_RECONCILABLE_LINES_CANNOT_BE_DELETED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_CONTAINS_LETTERED_LINES_CANNOT_BE_DELETED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_CONTAINS_LETTERED_LINES_CANNOT_BE_DELETED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_COMING_FROM_A_BILL_CANNOT_BE_MANUALLY_UPDATED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_COMING_FROM_A_BILL_CANNOT_BE_MANUALLY_UPDATED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_MISSING_PARAMETERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_MISSING_PARAMETERS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_FILE_CREATION_FAIL] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_FILE_CREATION_FAIL)}`);
    };


    this.errorActions[HttpAccountErrorCodes.START_DATE_IS_AFTER_END_DATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(START_DATE_IS_AFTER_END_DATE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_OLD_FORMAT_NOT_SUPPORTED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_OLD_FORMAT_NOT_SUPPORTED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_OOXML_FORMAT_NOT_SUPPORTED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_OOXML_FORMAT_NOT_SUPPORTED)}`);
    };

    this.errorActions[HttpAccountErrorCodes.YOU_MUST_CHOOSE_FOR_THE_THE_SAME_LETTER_SINGLE_ACCOUNT] = (params?: any) => {
      this.growlService.ErrorNotification(`${this.translate.instant(YOU_MUST_CHOOSE_FOR_THE_THE_SAME_LETTER_SINGLE_ACCOUNT, { letter: params[0].letter })}`);
    };

    this.errorActions[HttpAccountErrorCodes.TOTAL_DEBIT_SHOULD_BE_EQUAL_TO_TOTAL_CREDIT_FOR_ACCOUNT_AND_LETTER] = (params?: any) => {
      this.growlService.ErrorNotification(`${this.translate.instant(TOTAL_DEBIT_SHOULD_BE_EQUAL_TO_TOTAL_CREDIT_FOR_ACCOUNT_AND_LETTER, {
        account: params[0].account,
        letter: params[0].letter
      })}`);
    };

    this.errorActions[HttpAccountErrorCodes.CHOSEN_LETTERING_CODE_ALREADY_EXISTS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHOSEN_LETTERING_CODE_ALREADY_EXISTS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_CANT_UPDATE_DOCUMENT_IN_CLOSED_PERIOD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_CANT_UPDATE_DOCUMENT_IN_CLOSED_PERIOD)}`);
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    };

    this.errorActions[HttpAccountErrorCodes.TARGET_FISCAL_YEAR_NON_EXISTENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TARGET_FISCAL_YEAR_NON_EXISTENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.CURRENT_FISCAL_YEAR_NON_EXISTENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CURRENT_FISCAL_YEAR_NON_EXISTENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.RESULT_ACCOUNT_NON_EXISTENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(RESULT_ACCOUNT_NON_EXISTENT)}`);
    };

    this.errorActions[HttpAccountErrorCodes.BEGIN_ACCOUNT_CODE_IS_GREATER_THAN_END_ACCOUNT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BEGIN_ACCOUNT_CODE_IS_GREATER_THAN_END_ACCOUNT)}`);
    };

    this.errorActions[HttpAccountErrorCodes.ACCOUNT_CODE_LENGTH_INVALID] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_CODE_LENGTH_INVALID)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNTING_CONFIGURATION_MISSING_PARAMETERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNTING_CONFIGURATION_MISSING_PARAMETERS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNTING_CONFIGURATION_CATEGORY_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNTING_CONFIGURATION_CATEGORY_NOT_FOUND)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_NOT_IN_FISCAL_YEAR] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(this.translate.instant(DOCUMENT_ACCOUNT_NOT_IN_FISCAL_YEAR, { currentFiscalYear: params[0] }));
      setTimeout(() => {
        this.router.navigateByUrl(DocumentAccountConstant.LIST_DOCUMENT_ACCOUNT_URL);
      }, 2000);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNTING_CONFIGURATION_DEPRECITION_PERIOD_UNAFFECTED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNTING_CONFIGURATION_DEPRECITION_PERIOD_UNAFFECTED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DATE_CESSION_NULL] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DATE_CESSION_NULL)}`);
    };
    this.errorActions[HttpAccountErrorCodes.RESOURCE_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(RESOURCE_NOT_FOUND)}`);
    };
    this.errorActions[HttpAccountErrorCodes.TRYING_TO_SORT_USING_NON_EXISTENT_FIELD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TRYING_TO_SORT_USING_NON_EXISTENT_FIELD)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DATE_CESSION_OUT_OF_SERVICE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DATE_CESSION_OUT_OF_SERVICE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.TEMPLATE_ACCOUNTING_MISSING_PARAMETERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TEMPLATE_ACCOUNTING_MISSING_PARAMETERS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.TEMPLATE_ACCOUNTING_LABEL_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(TEMPLATE_ACCOUNTING_LABEL_EXISTS, { label: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXPORT_COULD_NOT_CREATE_DIRECTORY_FOR_FILES] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXPORT_COULD_NOT_CREATE_DIRECTORY_FOR_FILES)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_ERROR_WHILE_READING_FILE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_ERROR_WHILE_READING_FILE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_ERROR_DOWNLOADING_THE_FILE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_ERROR_DOWNLOADING_THE_FILE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_INVALID_HEADERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_INVALID_HEADERS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_EMPTY_FILE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_EMPTY_FILE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_INVALID_CONTENT_FORMAT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_INVALID_CONTENT_FORMAT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_INVALID_ROW] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_INVALID_ROW, { sheetName: params[0], rowNumber: params[1] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_FIRST_ROW_SHOULD_CONTAIN_DOCUMENT_INFORMATION] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_FIRST_ROW_SHOULD_CONTAIN_DOCUMENT_INFORMATION, { sheetName: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_NOT_OPENED_OPERATION_NOT_ALLOWED] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_NOT_OPENED_OPERATION_NOT_ALLOWED, { fiscalYear: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_HEADER_SHOULD_BE_IN_FIRST_ROW] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_HEADER_SHOULD_BE_IN_FIRST_ROW, { sheetName: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_HEADER_SHOULD_START_IN_FIRST_CELL] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_HEADER_SHOULD_START_IN_FIRST_CELL, { sheetName: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_NO_FOLDER_FOR_GENERATED_REPORTS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_NO_FOLDER_FOR_GENERATED_REPORTS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_FILE_LOCKED_BY_PASSWORD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_FILE_LOCKED_BY_PASSWORD)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_FILE_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_FILE_NOT_FOUND)}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_INVALID_FORMULA] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_INVALID_FORMULA, { formula: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_STATE_OF_INCOME_FIELDS_MISMATCH] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_STATE_OF_INCOME_FIELDS_MISMATCH)}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_INDEX_LINE_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_INDEX_LINE_NOT_FOUND, { index: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.ACCOUNT_CODE_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_CODE_EXISTS, { code: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_TYPE_INVALID] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_TYPE_INVALID, { reportType: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_INDEX_LINE_ORDER_INVALID] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_INDEX_LINE_ORDER_INVALID, { index: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION)}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION_WITH_INDEX_FOR_THIS_REPORT_TYPE] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION_WITH_INDEX_FOR_THIS_REPORT_TYPE, { index: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_CANNOT_UPDATE_WHEN_FISCAL_YEAR_NOT_OPENED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_CANNOT_UPDATE_WHEN_FISCAL_YEAR_NOT_OPENED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_ANNEX_ALREADY_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_ANNEX_ALREADY_EXISTS, { annexCode: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_FORMULA_CONTAINS_REPETITION] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_FORMULA_CONTAINS_REPETITION, { formula: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.ACCOUNT_CREDIT_DEBIT_IS_DIFFERENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_CREDIT_DEBIT_IS_DIFFERENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_NOT_ALL_DOCUMENTS_IN_NEW_PERIOD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_NOT_ALL_DOCUMENTS_IN_NEW_PERIOD)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_CODE_DIFFERENT_THAN_PARENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_CODE_DIFFERENT_THAN_PARENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_COULD_NOT_BE_CREATED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_COULD_NOT_BE_CREATED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_IS_USED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_IS_USED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.JOURNAL_CODE_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_CODE_EXISTS, { code: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.JOURNAL_LABEL_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_LABEL_EXISTS, { label: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.JOURNAL_CODE_LENGTH] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_CODE_LENGTH, { code: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.NO_OPENING_BALANCE_SHEET_ACCOUNT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_OPENING_BALANCE_SHEET_ACCOUNT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.NO_CLOSING_BALANCE_SHEET_ACCOUNT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_CLOSING_BALANCE_SHEET_ACCOUNT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_DOES_NOT_EXIST_ALLOCATION_NOT_POSSIBLE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_DOES_NOT_EXIST_ALLOCATION_NOT_POSSIBLE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_RELATION_TYPE_INVALID] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_RELATION_TYPE_INVALID)}`);
    };
    this.errorActions[HttpAccountErrorCodes.UPDATING_FISCAL_YEAR_THAT_IS_NOT_OPENED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATING_FISCAL_YEAR_THAT_IS_NOT_OPENED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.UPDATING_FISCAL_YEAR_THAT_IS_NOT_LAST] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATING_FISCAL_YEAR_THAT_IS_NOT_LAST)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_RELATION_TYPE_DUPLICATES] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_RELATION_TYPE_DUPLICATES)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_RELATION_IMPLEMENTATION_NONEXISTENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_RELATION_IMPLEMENTATION_NONEXISTENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.JOURNAL_MISSING_PARAMETERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_MISSING_PARAMETERS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.JOURNAL_NO_JOURNAL_A_NEW] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_NO_JOURNAL_A_NEW)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_NEGATIVE_CREDIT_OR_DEBIT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_NEGATIVE_CREDIT_OR_DEBIT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_PARENT_CHART_ACCOUNT_DONT_EXIST] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_PARENT_CHART_ACCOUNT_DONT_EXIST)}`);
    };
    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_CODE_AND_LABEL_EXIST] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_CODE_AND_LABEL_EXIST)}`);
    };

    this.errorActions[HttpAccountErrorCodes.USER_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.warningNotification(`${this.translate.instant(USER_NOT_FOUND, { id: params[0] })}` + JSON.parse(localStorage.getItem('user')).Email);
    };
    this.errorActions[HttpAccountErrorCodes.USER_HAS_A_JOURNAL] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(USER_HAS_A_JOURNAL, { id: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_LABEL_EXISTS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_LABEL_EXISTS)}`);
    };

    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_MISSING_PARAMETERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_MISSING_PARAMETERS)}`);
    };

    this.errorActions[HttpAccountErrorCodes.LABEL_MIN_LENGTH] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(LABEL_MIN_LENGTH, { length: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_WITHOUT_LINES_CODE] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_WITHOUT_LINES_CODE, { length: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_NON_EXISTENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_NON_EXISTENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.TARGET_FISCAL_YEAR_NOT_AFTER_SELECTED_FISCAL_YEAR] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TARGET_FISCAL_YEAR_NOT_AFTER_SELECTED_FISCAL_YEAR)}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_ASSETS_NOT_FOUND] = () => {
      this.growlService.InfoNotification(`${this.translate.instant(REPORT_LINE_ASSETS_NOT_FOUND)}`);
    };
    this.errorActions[HttpAccountErrorCodes.BILL_DATE_AFTER_CURRENT_DATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BILL_DATE_AFTER_CURRENT_DATE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ASSETS_OUT_OF_SERVICE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ASSETS_OUT_OF_SERVICE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DATE_CESSION_AFTER_DATE_COMMISSIONING] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DATE_CESSION_AFTER_DATE_COMMISSIONING)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_CANT_DELETE_DOCUMENT_IN_CLOSED_PERIOD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_CANT_DELETE_DOCUMENT_IN_CLOSED_PERIOD)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DEPRECIATION_ASSETS_NOT_ACCOUNTED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DEPRECIATION_ASSETS_NOT_ACCOUNTED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.AMORTIZATION_OF_ASSETS_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(AMORTIZATION_OF_ASSETS_NOT_FOUND)}`);
    };
    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_MAX_CODE_EXCEEDED] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_MAX_CODE_EXCEEDED, { max: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_NO_CHART_ACCOUNTS_TO_BE_SAVED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_NO_CHART_ACCOUNTS_TO_BE_SAVED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_NO_DOCUMENT_ACCOUNTS_TO_BE_SAVED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_NO_DOCUMENT_ACCOUNTS_TO_BE_SAVED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DEPRECIATION_ASSETS_FIELD_EMPTY] = (params?: any) => {
      this.growlService.warningNotification(`${this.translate.instant(DEPRECIATION_ASSETS_FIELD_EMPTY, {
        field: this.translate.instant(params[0].field),
        label: params[0].label
      })}`);
    };
    this.errorActions[HttpAccountErrorCodes.ENTITY_ACCOUNTING_FIELD_NOT_VALID] = (params?: any) => {
      this.growlService.ErrorNotification(`${this.translate.instant(ENTITY_ACCOUNTING_FIELD_NOT_VALID, {
        fieldName: this.translate.instant(params[0].fieldName),
        maxLength: params[0].maxLength,
        minLength: params[0].minLength
      })}`);
    };
    this.errorActions[HttpAccountErrorCodes.INVALID_FORMAT_EXCEPTION] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INVALID_FORMAT_EXCEPTION)}`);
    };
    this.errorActions[HttpAccountErrorCodes.HTTP_MESSAGE_NOT_READABLE_EXCEPTION] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(HTTP_MESSAGE_NOT_READABLE_EXCEPTION)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_LINE_WITH_BOTH_DEBIT_AND_CREDIT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_LINE_WITH_BOTH_DEBIT_AND_CREDIT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_DATE_INVALID] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_DATE_INVALID)}`);
    };

    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_MISSING_PARAMETERS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_MISSING_PARAMETERS, { length: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_ALREADY_USED_CANT_CHANGE_CODE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_ALREADY_USED_CANT_CHANGE_CODE)}`);
    };

    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_NO_FISCAL_YEAR] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_NO_FISCAL_YEAR, { length: params[0] })}`);
    };


    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_INEXISTANT_REPORT_LINE] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_INEXISTANT_REPORT_LINE, { id: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_INEXISTANT] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_INEXISTANT, { code: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.LAST_CODE_REACHED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LAST_CODE_REACHED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.TEMPLATE_ACCOUNTING_WITHOUT_LINES_CODE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TEMPLATE_ACCOUNTING_WITHOUT_LINES_CODE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_NOT_BALANCED] = (params?: Array<string>) => {
      this.growlService.InfoNotification(`${this.translate.instant(ACCOUNT_NOT_BALANCED, { chartAccountCode: params[0] })}`);
    };

    /*FiscalYear errors*/
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_INEXISTANT_FISCAL_YEAR] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_INEXISTANT_FISCAL_YEAR)}`);
    };
    this.errorActions[HttpAccountErrorCodes.TARGET_FISCAL_YEAR_IS_CLOSED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TARGET_FISCAL_YEAR_IS_CLOSED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.PREVIOUS_FISCAL_YEARS_NOT_ALL_CONCLUDED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(PREVIOUS_FISCAL_YEARS_NOT_ALL_CONCLUDED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_MISSING_PARAMETERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_MISSING_PARAMETERS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.CURRENT_FISCAL_YEAR_IS_NOT_CLOSED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CURRENT_FISCAL_YEAR_IS_NOT_CLOSED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.START_DATE_INVALID] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(START_DATE_INVALID, { startDate: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_DATES_OVERLAP_ERROR] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_DATES_OVERLAP_ERROR, { date: this.datePipe.transform(params[0], this.translate.instant(localStorage.getItem(SharedConstant.FORMAT_DATE))), fiscalYear: params[1] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_DATES_ORDER_INVALID] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_DATES_ORDER_INVALID)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ENTITY_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(ENTITY_NOT_FOUND, { id: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_ENTITY_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_ENTITY_NOT_FOUND, { codeDocument: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_NAME_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_NAME_EXISTS, { id: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_CLOSED] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_CLOSED, { name: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_CODE_EXISTS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_CODE_EXISTS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_CLOSING_DATE_NULL] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_CLOSING_DATE_NULL)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_DATE_IN_CLOSED_PERIOD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_DATE_IN_CLOSED_PERIOD)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_CLOSING_INTERVAL_OVERLAP_WITH_ALREADY_CLOSED_ONE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_CLOSING_INTERVAL_OVERLAP_WITH_ALREADY_CLOSED_ONE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_CLOSED_PERIOD_INEXISTANT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_CLOSED_PERIOD_INEXISTANT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_CANT_HAVE_MULTIPLE_JOURNAL_ANEW_DOCUMENTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_CANT_HAVE_MULTIPLE_JOURNAL_ANEW_DOCUMENTS, { code: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_WITHOUT_FISCAL_YEAR] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_WITHOUT_FISCAL_YEAR)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_PREVIOUS_FISCAL_YEAR_HAS_NO_NON_LETTERED_DOCUMENT_ACCOUNT_LINES] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_PREVIOUS_FISCAL_YEAR_HAS_NO_NON_LETTERED_DOCUMENT_ACCOUNT_LINES)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ENTITY_REFERENCED] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(ENTITY_REFERENCED, {
        className: this.translate.instant(params[0]),
        field: this.translate.instant(params[1]), message: this.translate.instant(params[2])
      })}`);
    };
    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_ALREADY_USED_CANT_DELETE] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_ALREADY_USED_CANT_DELETE, { code: params[0] })}`);
    };

    /*General ledger  errors*/
    this.errorActions[HttpAccountErrorCodes.END_AMOUNT_LESS_THAN_BEGIN_AMOUNT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(END_AMOUNT_LESS_THAN_BEGIN_AMOUNT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.BEGIN_AMOUNT_OR_END_AMOUNT_FORMAT_INCORRECT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BEGIN_AMOUNT_OR_END_AMOUNT_FORMAT_INCORRECT)}`);
    };
    /*Leave errors*/
    this.errorActions[HttpStatusCodes.LeaveRequestViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LEAVE_REQUEST_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.LeaveDateViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LEAVE_DATE_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.LeaveUpdateViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LEAVE_UPDATE_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.LeaveDeleteViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LEAVE_DELETE_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.LeaveDateIntervalViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LEAVE_DATE_INTERVAL_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.NomenclatureReferenceUnique] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOMENCALTURE_REFERENCE_EXIST)}`);
    };
    this.errorActions[HttpStatusCodes.NomenclatureProductUnique] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOMENCALTURE_PRODUCT_EXIST)}`);
    };
    this.errorActions[HttpStatusCodes.NomenclatureProductNotExist] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOMENCLATURE_NOT_EXIST)}`);
    };
    this.errorActions[HttpStatusCodes.NomenclatureCheckProductExistInSubProduct] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOMECLATRUE_CHECK_PRODUCT_EXIST_IN_SUB_PRODUCT)}`);
    };
    this.errorActions[HttpStatusCodes.MachineDescriptionUnique] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(MACHINE_DESCRIPTION_EXIST)}`);
    };
    this.errorActions[HttpStatusCodes.GammeUnique] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(GAMME_EXIST)}`);
    };
    this.errorActions[HttpStatusCodes.AreaNotEmpty] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(AREA_NOT_EMPTY)}`);
    };
    this.errorActions[HttpStatusCodes.MachineUsedInOperation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(MACHINE_USED_IN_OPERATION)}`);
    };
    this.errorActions[HttpStatusCodes.NomenclatureUsedInFabricationArrangement] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOMENCLATURE_USED_IN_FABRICATION_ARRANGEMENT)}`);
    };
    this.errorActions[HttpStatusCodes.GammeUsedInFabricationArrangement] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(GAMME_USED_IN_FABRICATION_ARRANGEMENT)}`);
    };
    this.errorActions[HttpStatusCodes.NomenclatureUsedInOtherNomenclature] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOMENCLATURE_USED_IN_OTHER_NOMENCLATURE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNTING_CONFIGURATION_NO_CONFIGURATION_FOUND] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNTING_CONFIGURATION_NO_CONFIGURATION_FOUND));
    };

    this.errorActions[HttpAccountErrorCodes.ACCOUNTING_CONFIGURATION_ACCOUNTS_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNTING_CONFIGURATION_ACCOUNTS_NOT_FOUND));
    };

    this.errorActions[HttpAccountErrorCodes.ACCOUNTING_CONFIGURATION_FISCAL_YEAR_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNTING_CONFIGURATION_FISCAL_YEAR_NOT_FOUND));
    };

    this.errorActions[HttpAccountErrorCodes.ACCOUNT_SUPPLIER_DOES_NOT_EXIST] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNT_SUPPLIER_DOES_NOT_EXIST));
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_CUSTOMER_DOES_NOT_EXIST] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNT_CUSTOMER_DOES_NOT_EXIST));
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_TAXE_DOES_NOT_EXIST] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNT_TAXE_DOES_NOT_EXIST));
    };

    this.errorActions[HttpAccountErrorCodes.NO_ACCOUNT_PREFIXED_BY_CODE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_ACCOUNT_PREFIXED_BY_CODE)}`);
    };

    /*Change password errors*/
    this.errorActions[HttpStatusCodes.OldPasswordErrors] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHANGE_PASSWORD_ERRORS)}`);
    };

    /*Job exception*/
    this.errorActions[HttpStatusCodes.JobAddException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOB_ADD_EXCEPTION)}`);
    };

    this.errorActions[HttpStatusCodes.NullJobAddException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NULL_JOB_ADD_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.JobUpdateException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOB_UPDATE_EXCEPTION)}`);
    };

    /*Recruitment process errors*/
    this.errorActions[HttpStatusCodes.RequiredEmployeeUserViolation] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(REQUIRED_EMPLOYEE_USER_VIOLATION)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    this.errorActions[HttpStatusCodes.CandidacyUnPreselectedViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANDIDACY_UNPRESELECTED_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.PreselectionToNextStepViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(PRE_SELECTION_TO_NEXT_STEP_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.InterviewToNextStepViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INTERVIEW_TO_NEXT_STEP_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.DoneRecruitmentViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DONE_RECRUITMENT_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.UpdateClosedRecruitmentViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATE_CLOSED_RECRUITMENT_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.CandidacyAddExistingCandidate] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANDIDACY_ADD_EXISTING_CANDIDATE)}`);
    };
    this.errorActions[HttpStatusCodes.AddExistingCandidate] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_CANDIDATE)}`);
    };
    this.errorActions[HttpStatusCodes.CandidacyEmptyList] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANDIDACY_EMPTY_LIST)}`);
    };
    this.errorActions[HttpStatusCodes.ObjectiveException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OBJECTIVE_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.CandidacyUnselectedViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANDIDACY_UNSELECTED_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.SelectionToNextStepViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(SELECTION_TO_NEXT_STEP_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.AddOfferViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_OFFER_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.UpdateOfferViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATE_OFFER_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.OfferToNextStepViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OFFER_TO_NEXT_STEP_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.OfferDelteViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OFFER_DELTE_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.OfferAcceptViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OFFER_ACCEPT_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.OfferRejectViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OFFER_REJECT_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.EmptyEvaluationListViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EMPTY_EVALUATION_LIST_VIOLATION)}`);
    };
    /*Recruitment process errors*/
    this.errorActions[HttpAccountErrorCodes.BILL_ALREADY_IMPORTED] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(BILL_ALREADY_IMPORTED, { code: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.BILL_SAVE_ERROR] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BILL_SAVE_ERROR)}`);
    };
    this.errorActions[HttpAccountErrorCodes.BILL_DATE_NOT_IN_FISCAL_YEAR] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BILL_DATE_NOT_IN_FISCAL_YEAR)}`);
    };

    this.errorActions[HttpAccountErrorCodes.NULL_BILL_ACCOUNT_ID] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NULL_BILL_ACCOUNT_ID)}`);
    };
    this.errorActions[HttpAccountErrorCodes.NULL_TIER_ACCOUNT_ID] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(NULL_TIER_ACCOUNT_ID, { tier: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.LETTERING_OPERATION_IN_CLOSED_PERIOD] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(LETTERING_OPERATION_IN_CLOSED_PERIOD, { code: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_LINE_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_LINE_NOT_FOUND, { id: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.NULL_VAT_ACCOUNT_ID] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(NULL_VAT_ACCOUNT_ID, { vatName: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.NULL_ARTICLE_ACCOUNT_ID] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(NULL_ARTICLE_ACCOUNT_ID, { itemName: params[0] })}`);
    };
    this.errorActions[HttpStatusCodes.ReviewEditException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REVIEW_EDITION_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.ReviewQuestionException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REVIEW_QUESTION_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.ReviewSkillsDeleteException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REVIEW_SKILLS_DELETE_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.DeleteReviewArrayException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DELETE_REVIEW_ARRAY_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.AddPeriodWithNoHoursException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_PERIOD_WITH_NO_HOURS_EXCEPTION)}`);
    };

    this.errorActions[HttpStatusCodes.NO_LINES_ARE_ADDED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_LINES_ARE_ADDED)}`);
    };
    this.errorActions[HttpStatusCodes.No_Lines_To_Be_ADDED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(No_Lines_To_Be_ADDED)}`);
    };
    this.errorActions[HttpStatusCodes.INVALID_SETTELMENT_DATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INVALID_SETTELMENT_DATE)}`);
    };
    this.errorActions[HttpStatusCodes.NO_PRINTER_INSTALLED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_PRINTER_INSTALLED)}`);
    };
    this.errorActions[HttpStatusCodes.ADD_EXISTING_CLAIM_DOCUMENT_MOVEMENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_PRINTER_INSTALLED)}`);
    };

    /**
     * When attempt to specify one holliday date who is not include in period date
     */
    this.errorActions[HttpStatusCodes.HOLIDAY_DATE_NOT_INCLUDE_IN_PERIOD_DATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(HOLIDAY_DATE_NOT_INCLUDE_IN_PERIOD_DATE)}`);
    };
    /**
     * When attempt to specify one holliday date who is not include in period date
     */
    this.errorActions[HttpStatusCodes.DOCUMENT_DELETED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_DELETED)}`);
    };
    /**
     * When attempt to add new period who overlap another one
     */
    this.errorActions[HttpStatusCodes.OVERLAPPING_PERIOD] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(OVERLAPPING_PERIOD)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * when hours in same intervall are not contiguous
     */
    this.errorActions[HttpStatusCodes.ContiguousHoursException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(CONTIGUOUS_HOURS_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * throw when the user add the duplicate dayOff
     */
    this.errorActions[HttpStatusCodes.DuplicateDayOffException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATE_DAYOFF_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    
    

    /**
     * when the startTime is greater than a endTime of hour
     */
    this.errorActions[HttpStatusCodes.HoursTimeException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(HOURS_TIME_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * When the current period is not contiguous with the previous
     */
    this.errorActions[HttpStatusCodes.PeriodNotContiguousException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(PERIOD_NOT_CONTIGUOUS_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * When attemp to add one period with end date is greater than start date
     */
    this.errorActions[HttpStatusCodes.STARTDATE_EXCEED_ENDDATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(STARTDATE_EXCEED_ENDDATE)}`);
    };
    this.errorActions[HttpStatusCodes.ANY_PERIOD_DEFINED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ANY_PERIOD_DEFINED)}`);
    };
    /**
     * When attemp to specify an end time lower than the start time
     */
    this.errorActions[HttpStatusCodes.STARTTIME_EXCEED_ENDTIME] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(STARTTIME_EXCEED_ENDTIME)}`);
    };

    // Unicity of user email
    this.errorActions[HttpStatusCodes.UserEmailUnicity] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(USER_EMAIL_UNICITY)}`);
    };
    /**
     * When a period have least than one period or have more than one period
     */
    this.errorActions[HttpStatusCodes.DATE_MUST_HAVE_ONE_UNIQUE_PERIOD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DATE_MUST_HAVE_ONE_UNIQUE_PERIOD)}`);
    };
    /**
     * When attempt to add new inventory but there is an existing inventory with the same date and status
     */
    this.errorActions[HttpStatusCodes.ITEM_NOT_FILED] = (params?: any) => {
      let errorMEssagee = `${this.translate.instant(ITEM_NOT_FILED)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssagee = errorMEssagee.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssagee, null, null);
    };


    /**
     * When attempt to add new inventory but there is an existing inventory with the same date and status
     */
    this.errorActions[HttpStatusCodes.ExistPendingInventoryDocument] = (params?: any) => {
      let errorMEssagee = `${this.translate.instant(EXIST_PENDING_INVENTORY_DOCUMENT)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssagee = errorMEssagee.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssagee, null, null);
    };

    /**
     * When adding an existing inventory document
     */
    this.errorActions[HttpStatusCodes.ADD_EXISTING_INVENTORY] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_INVENTORY)}`);
    };


    /**
     * When updating a not existing inventory document
     */
    this.errorActions[HttpStatusCodes.ADD_NOT_EXISTING_INVENTORY] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_NOT_EXISTING_INVENTORY)}`);
    };

    /**
     * When updating a not existing inventory document
     */
    this.errorActions[HttpStatusCodes.ADD_NOT_EXISTING_INVENTORY_LINE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_INVENTORY_LINE)}`);
    };


    /**
     * When updating a not existing inventory document
     */
    this.errorActions[HttpStatusCodes.ADD_EXISTING_INVENTORY_LINE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_NOT_EXISTING_INVENTORY_LINE)}`);
    };

    this.errorActions[HttpStatusCodes.ItemUnicity] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ITEM_UNICITY)}`);
    };
    this.errorActions[HttpStatusCodes.AuthorizedAmountExceeded] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(AUTHORIZED_AMOUNT_EXCEEDED)}`);
    };
    /**
     * When a period have least than one period or have more than one period
     */
    this.errorActions[HttpStatusCodes.TIMESHEET_UPDATE_VIOLATION] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TIMESHEET_UPDATE_VIOLATION)}`);
    };
    /**
     * When user have not permission for validate or refused timesheet
     */
    this.errorActions[HttpStatusCodes.HAVENOT_PERMISSION_FORVLIDATE_OR_REFUSE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(HAVENOT_PERMISSION_FORVLIDATE_OR_REFUSE)}`);
    };


    /**
     * This exception will be handled when there is identical lines in documentLine
     */
    this.errorActions[HttpStatusCodes.ITEM_ALREADY_EXIST_IN_DOCUMENTLINE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ITEM_ALREADY_EXIST_IN_DOCUMENTLINE)}`);
    };
    /**
     * When working hours of the same day are overlapping
     */
    this.errorActions[HttpStatusCodes.TIMESHEET_LINE_OVERLAP] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(TIMESHEET_LINE_OVERLAP)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    // when invalid delete entity
    this.errorActions[HttpStatusCodes.CodeUnicity] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(CODE_UNICITY)}`;
      errorMEssage = errorMEssage.replace('{CODE}',
        this.translate.instant(listErrorParams['CODE']));
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_CODE_UNICITY));
    };
    /**
     * This exception will be handled when there is replacement loop in replacement item relation
     */
    this.errorActions[HttpStatusCodes.ItemReplacementLoop] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ITEM_REPLACEMENT_LOOP)}`);
    };
    this.errorActions[HttpStatusCodes.CANT_ADD_NEXT_MONTH_TIMESHEET] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANT_ADD_NEXT_MONTH_TIMESHEET)}`);
    };
    /**
     * When attempt to validate timesheet if any waiting leave currently exists
     */
    this.errorActions[HttpStatusCodes.CANT_VALIDATE_TIMESHEET_BECAUSE_WAITING_LEAVE_EXIST] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANT_VALIDATE_TIMESHEET_BECAUSE_WAITING_LEAVE_EXIST)}`);
    };

    this.errorActions[HttpStatusCodes.TaxRequiredError] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TAX_REQUIRED_ERROR)}`);
    };

    this.errorActions[HttpStatusCodes.AddExistingClaim] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_CLAIM)}`);
    };

    this.errorActions[HttpStatusCodes.AddNotExistingClaim] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_NOT_EXISTING_CLAIM)}`);
    };

    this.errorActions[HttpStatusCodes.UpdateNotExistingClaim] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATE_NOT_EXISTING_CLAIM)}`);
    };

    this.errorActions[HttpStatusCodes.AddExistingClaimTiersAsset] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_CLAIM_TIERS_ASSET)}`);
    };
    this.errorActions[HttpStatusCodes.AddExistingClaimTiersMovementIn] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_CLAIM_MOVEMENT_IN)}`);
    };
    this.errorActions[HttpStatusCodes.AddExistingClaimTiersMovementOut] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_CLAIM_MOVEMENT_OUT)}`);
    };

    this.errorActions[HttpStatusCodes.AddNotExistingClaimTiersAsset] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_NOT_EXISTING_CLAIM_TIERS_ASSET)}`);
    };

    this.errorActions[HttpStatusCodes.AddExistingClaimStockMovement] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_CLAIM_STOCK_MOVEMENT)}`);
    };

    this.errorActions[HttpStatusCodes.AddNotExistingClaimStockMovement] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_NOT_EXISTING_CLAIM_STOCK_MOVEMENT)}`);
    };

    this.errorActions[HttpStatusCodes.UpdateNotExistingStockMovement] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATE_NOT_EXISTING_STOCK_MOVEMENT)}`);
    };
    this.errorActions[HttpStatusCodes.AlreadyValidatedDocument] = (params?: Array<string>) => {
      let errorMEssage = `${this.translate.instant(ALREADY_VALIDATED_DOCUMENT)}`;
      errorMEssage = errorMEssage.replace('{Document}',
        this.translate.instant(params['Document']));
      this.growlService.ErrorNotification(errorMEssage);
    };

    this.errorActions[HttpStatusCodes.ExistingSalesInvoiceFromValidatedDocument] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXISTING_SALES_INVOICE_FROM_VALIDATED_DOCUMENT)}`);
    };

    this.errorActions[HttpStatusCodes.AddExistingRoleCode] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_ROLE_CODE)}`);
    };

    this.errorActions[HttpStatusCodes.UpdateNotExistingRoleCode] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATE_NOT_EXISTING_ROLE_CODE)}`);
    };

    this.errorActions[HttpStatusCodes.NotAvailableClaimStockMovementQuantity] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOT_AVAILABLE_CLAIM_STOCKMOVEMENT_QUANTITY)}`);
    };

    this.errorActions[HttpStatusCodes.NotSameClaimQuantity] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOT_SAME_CLAIM_QUANTITY)}`);
    };


    // when invalid send mail (tiers without contact email)
    this.errorActions[HttpStatusCodes.SendMailErrorTiersWithoutContactEmail] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(SEND_MAIL_ERROR_TIERS_WITHOUT_CONTACT_EMAIL)}`;
      for (const paramName in listErrorParams) {
        for (const tiersName of listErrorParams[paramName]) {
          errorMEssage = errorMEssage.concat(' \n - ').concat(tiersName);
        }
      }
      errorMEssage = errorMEssage.concat(' \n ');
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_SEND_MAIL_ERROR));
    };

    this.errorActions[HttpStatusCodes.LiberationQteException] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(LIBERATION_QUANTITY_BECAUSE_PANIER)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    this.errorActions[HttpStatusCodes.SendMailErrorDocumentWithoutContact] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(SEND_MAIL_ERROR_DOCUMENT_WITHOUT_CONTACT)}`);
    };

    // Invalid Quantity
    this.errorActions[HttpStatusCodes.InvalidQuantity] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(ERROR_QUANTITY_WITH_PARAM)}`;
      errorMEssage = errorMEssage.replace('{QUANTITY}',
        listErrorParams['QUANTITY']);
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(ERROR_QUANTITY_TITLE));
    };
    // Bl invoiced
    this.errorActions[HttpStatusCodes.DocumentAlReadyInvoiced] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BL_INVOICED)}`);
    };
    this.errorActions[HttpStatusCodes.CantDeleteReservedDocument] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANT_DELETE_RESERVED_DOCUMENT)}`);
    };
    this.errorActions[HttpStatusCodes.UPDATED_QTY_DOCUMENT_LINE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATED_QTY_DOCUMENT_LINE)}`);
    };
    this.errorActions[HttpStatusCodes.DELETED_DOCUMENT_LINE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DELETED_DOCUMENT_LINE)}`);
    };
    this.errorActions[HttpStatusCodes.NEGOTIATION_ALREADY_ADDED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NEGOTIATION_ALREADY_ADDED)}`);
    };

    /**
     * throw when the user delete reserved document line without appropriate permissions
     */
    this.errorActions[HttpStatusCodes.NO_RIGHTS_TO_DELETE_RESERVED_LINE] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(NO_RIGHTS_TO_DELETE_RESERVED_LINE_EXCEPTION)}`;
      // for (const param in params) {
      //   if (params.hasOwnProperty(param)) {
      //     errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
      //       this.translate.instant(params[param].toUpperCase()));
      //   }
      // }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

  }
  /**
   * buid error message for unath error
   * @param errorParams
   * @returns error message
   */
  private buildUnathErrorMessage(errorParams: any): string {
    // error param contains missing role name
    const missingRole = errorParams.param1 as string;
    let message;
    if (missingRole.includes(DELETE)) {
      message = `${this.translate.instant(UNAUTHRIZED_DELETE_ERROR_MSG)}`;
    } else if (missingRole.includes(ADD)) {
      message = `${this.translate.instant(UNAUTHRIZED_ADD_ERROR_MSG)}`;
    } else if (missingRole.includes(UPDATE)) {
      message = `${this.translate.instant(UNAUTHRIZED_UPDATE_ERROR_MSG)}`;
    } else if (missingRole.includes(LIST)) {
      message = `${this.translate.instant(UNAUTHRIZED_LIST_ERROR_MSG)}`;
    } else if (missingRole.includes(SAVE)) {
      message = `${this.translate.instant(UNAUTHRIZED_SAVE_ERROR_MSG)}`;
    } else if (missingRole.includes(VALIDATE)) {
      message = `${this.translate.instant(UNAUTHRIZED_VALIDATE_ERROR_MSG)}`;
    } else if (missingRole.includes(IMPORT)) {
      message = `${this.translate.instant(UNAUTHRIZED_IMPORT_ERROR_MSG)}`;
    } else if (missingRole.includes(PRINT)) {
      message = `${this.translate.instant(UNAUTHRIZED_PRINT_ERROR_MSG)}`;
    } else if (missingRole.includes(SHOW)) {
      message = `${this.translate.instant(UNAUTHRIZED_PRINT_ERROR_MSG)}`;
    } else {
      message = `${this.translate.instant(UNAUTHRIZED_ERROR_MSG)}`;
    }
    return message;
  }
}

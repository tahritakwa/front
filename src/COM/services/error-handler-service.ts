import { HttpErrorResponse } from '@angular/common/http';
import { ErrorHandler, Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { HttpAccountErrorCodes } from '../../app/accounting/http-error-account-codes';
import { GrowlService } from '../Growl/growl.service';
import { HttpStatusCodes } from './http-status-codes';
import { DatePipe } from '@angular/common';
import { TimePipe } from '../../app/shared/components/time-pipe/time-pipe.component';
import { SharedConstant } from '../../app/constant/shared/shared.constant';
import { DocumentAccountConstant } from '../../app/constant/accounting/document-account.constant';
import { HttpCrmErrorCodes } from '../../app/crm/http-error-crm-codes';
import { NumberConstant } from '../../app/constant/utility/number.constant';
import { HttpErrorManufacturingCode } from '../../app/manufacturing/http-error-manufacturing-code';
import { GenericAccountingService } from '../../app/accounting/services/generic-accounting.service';
import { HttpAuthErrorCodes } from '../../app/login/Authentification/http-error-auth-codes';
import {AuthService} from '../../app/login/Authentification/services/auth.service';
import {LocalStorageService} from '../../app/login/Authentification/services/local-storage-service';

const pipe = new DatePipe('en-US');
const timePipe = new TimePipe();

const FUNCTION = 'function';
const EN = 'en';
const DELETE = 'DELETE';
const ADD = 'ADD';
const UPDATE = 'UPDATE';
const SAVE = 'SAVE';
const LIST = 'LIST';
const PRINT = 'PRINT';
const SHOW = 'SHOW';
const VALIDATE = 'VALIDATE';
const IMPORT = 'IMPORT';
const LOGIN_PAGE = 'login';
const UNAUTHRIZED_ERROR_MSG = 'UNAUTHRIZED_ERROR_MSG';
const FORBIDDEN_ERROR_MSG = 'FORBIDDEN_ERROR_MSG';
const BADREQUEST_ERROR_MSG = 'BADREQUEST_ERROR_MSG';
const BADGATEWAY_ERROR_MSG = 'BADGATEWAY_ERROR_MSG';
const GATEWAY_TIME_OUT_MSG = 'GATEWAY_TIME_OUT_MSG';
const ECOMMERCE_BADGATEWAY_ERROR_MSG = 'ECOMMERCE_BADGATEWAY_ERROR_MSG';
const ECOMMERCE_IN_PROGRESS_EXCEPTION = 'ECOMMERCE_IN_PROGRESS_EXCEPTION';
const NOTFOUND_ERROR_MSG = 'NOTFOUND_ERROR_MSG';
const SMS_SERVER_ERROR = 'SMS_SERVER_ERROR';
const UNSUPPORTED_MEDIA_TYPE_ERROR_MSG = 'UNSUPPORTED_MEDIA_TYPE_ERROR_MSG';
const CONFLICT_ERROR_MSG = 'CONFLICT_ERROR_MSG';
const REQUEST_TIMEOUT_ERROR_MSG = 'REQUEST_TIMEOUT_ERROR_MSG';
const REQUEST_URI_TOO_LONG = 'REQUEST_URI_TOO_LONG';
const INTERNAL_SERVER_ERROR_MSG = 'INTERNAL_SERVER_ERROR_MSG';
const NO_INVOICE_ASSOCIATE_TO_THE_FINANCIAL_COMMITMENT = 'NO_INVOICE_ASSOCIATE_TO_THE_FINANCIAL_COMMITMENT';
const NO_TIERS_CONTACT_FOUND_TO_SEND_REVIVIAL_MAIL = 'NO_TIERS_CONTACT_FOUND_TO_SEND_REVIVIAL_MAIL';
const UNKNOWN_ERROR_MSG = 'UNKNOWN_ERROR_MSG';
const SESSION_EXPIRED = 'SESSION_EXPIRED';
const VALIDATE_SUBSEQUENT_INVOICES = 'INTERNAL_SERVER_ERROR_MSG';
const VALIDATE_PREVIOUS_INVOICES = 'VALIDATE_PREVIOUS_INVOICES';
const VALIDATE_PREVIOUS_BL = 'VALIDATE_PREVIOUS_BL';
const ADD_SUPERIOR_TO_COLLABORATOR_TEAM_EXCEPTION = 'ADD_SUPERIOR_TO_COLLABORATOR_TEAM_EXCEPTION';
const ALREADY_AFFECTED_ELEMENT = 'ALREADY_AFFECTED_ELEMENT';
const ClientRquiredError = 'ClientRquiredError';
const SupplierRquiredError = 'SupplierRquiredError';
const TaxItemValueError = 'TaxItemValueError';
const ClientCurrencyError = 'ClientCurrencyError';
const SupplierCurrencyError = 'SupplierCurrencyError';
const INVALID_EXCEL_FORMAT = 'INVALID_EXCEL_FORMAT';
const INVALID_EXCEL_DATA = 'INVALID_EXCEL_DATA';
const ITEM_IS_ALREADY_INVOICED = 'ITEM_IS_ALREADY_INVOICED';
const DELETE_ERROR = 'DELETE_ERROR';
const TITLE_DELETE_ERROR = 'TITLE_DELETE_ERROR';
const UNAUTHRIZED_DELETE_ERROR_MSG = 'UNAUTHRIZED_DELETE_ERROR_MSG';
const UNAUTHRIZED_ADD_ERROR_MSG = 'UNAUTHRIZED_ADD_ERROR_MSG';
const UNAUTHRIZED_UPDATE_ERROR_MSG = 'UNAUTHRIZED_UPDATE_ERROR_MSG';
const UNAUTHRIZED_LIST_ERROR_MSG = 'UNAUTHRIZED_LIST_ERROR_MSG';
const UNAUTHRIZED_SAVE_ERROR_MSG = 'UNAUTHRIZED_SAVE_ERROR_MSG';
const UNAUTHRIZED_VALIDATE_ERROR_MSG = 'UNAUTHRIZED_VALIDATE_ERROR_MSG';
const UNAUTHRIZED_IMPORT_ERROR_MSG = 'UNAUTHRIZED_IMPORT_ERROR_MSG';
const UNAUTHRIZED_PRINT_ERROR_MSG = 'UNAUTHRIZED_PRINT_ERROR_MSG';
const WAREHOUSE_REQUIRED = 'WAREHOUSE_REQUIRED';
const INSUFFICIENT_QUANTITY = 'INSUFFICIENT_QUANTITY';
const FISCAL_YEAR_NOT_OPENED_OPERATION_NOT_ALLOWED = 'FISCAL_YEAR_NOT_OPENED_OPERATION_NOT_ALLOWED';
const FISCAL_YEAR_CLOSING_DATE_BEFORE_END_DATE = 'FISCAL_YEAR_CLOSING_DATE_BEFORE_END_DATE';
const JOURNAL_A_NEW_TO_REMOVE_CONTAINS_LETTERED_LINES = 'JOURNAL_A_NEW_TO_REMOVE_CONTAINS_LETTERED_LINES';
const INSUFFICIENT_QUANTITY_FOR_ITEM = 'INSUFFICIENT_QUANTITY_FOR_ITEM';
const JOURNAL_NOT_FOUND = 'JOURNAL_NOT_FOUND';
const HOURS_NOT_FOUND_IN_PERIOD_EXCEPTION = 'HOURS_NOT_FOUND_IN_PERIOD_EXCEPTION';
const SET_SUPPLIER_TO_ITEMS = 'SET_SUPPLIER_TO_ITEMS';
const OPERATION_EXPECTED_DURATION_FAILED = 'OPERATION_EXPECTED_DURATION_FAILED';
const INCORRECT_PRODUCT_TYPE = 'INCORRECT_PRODUCT_TYPE';
const UPDATE_CANDIDACY_WITH_INTERVIEWS_ERROR = 'UPDATE_CANDIDACY_WITH_INTERVIEWS_ERROR';
const UPDATE_EVALUATION_WITH_SENDED_OFFERS_ERROR = 'UPDATE_EVALUATION_WITH_SENDED_OFFERS_ERROR';
const UPDATE_CANDIDACY_WITH_SENDED_OFFERS_ERROR = 'UPDATE_CANDIDACY_WITH_SENDED_OFFERS_ERROR';
const UPDATE_INTERVIEW_WITH_SENDED_OFFERS_ERROR = 'UPDATE_INTERVIEW_WITH_SENDED_OFFERS_ERROR';
const POSITIVE_QUANTITY_VIOLATION_ERROR = 'POSITIVE_QUANTITY_VIOLATION_ERROR';
const ADD_TRAINING_REQUEST_EXCEPTION = 'ADD_TRAINING_REQUEST_EXCEPTION';
const UPDATE_TRAINING_REQUEST_EXCEPTION = 'UPDATE_TRAINING_REQUEST_EXCEPTION';
const OVERLAP_TARIF_ERROR = 'OVERLAP_TARIF_ERROR';
const OVERLAP_PRICE_DETAIL_ERROR = 'OVERLAP_PRICE_DETAIL_ERROR';
const THE_CUSTOMER = 'THE_CUSTOMER';
const THE_ITEM = 'THE_ITEM';
const THE_COUPLE_CUSOMER_ITEM = 'THE_COUPLE_CUSOMER_ITEM';
const VALUE_DISCOUNTE_PRICES = 'VALUE_DISCOUNTE_PRICES';
const SETTLEMENT_AMOUNT_IS_ZERO = 'SETTLEMENT_AMOUNT_IS_ZERO';
const SETTLEMENT_AMOUNT_IS_GREATER_THAN_COMMITMENT = 'SETTLEMENT_AMOUNT_IS_GREATER_THAN_COMMITMENT';
const FINANCIAL_COMMITMENT_ALLOCATED_AMOUNT_IS_GREATER_THAN_REMAINING = 'FINANCIAL_COMMITMENT_ALLOCATED_AMOUNT_IS_GREATER_THAN_REMAINING';
const WAREHOUSE_UNICITY = 'WAREHOUSE_UNICITY';
const EXCEL_REQUIRED_COLUMN = 'EXCEL_REQUIRED_COLUMN';
const EXCEL_UNIQUE_COLUMN_IN_DB = 'EXCEL_UNIQUE_COLUMN_IN_DB';
const EXCEL_UNIQUE_COLUMN_IN_FILE = 'EXCEL_UNIQUE_COLUMN_IN_FILE';
const EXCEL_INVALID_EMAIL_COLUMN = 'EXCEL_INVALID_EMAIL_COLUMN';
const LEAVE_MAXIMUM_NUMBER_OF_DAYS_VIOLATION = 'LEAVE_MAXIMUM_NUMBER_OF_DAYS_VIOLATION';
const DATES_DEPENDENCY = 'DATES_DEPENDENCY';
const ATTENDANCE_VALUE_EXCEED = 'ATTENDANCE_VALUE_EXCEED';
const DUPLICATED_BONUS_VALIDITY_EXCEPTION = 'DUPLICATED_BONUS_VALIDITY_EXCEPTION';
const DUPLICATE_SKILLS_EXCEPTION = 'DUPLICATE_SKILLS_EXCEPTION';
const DUPLICATED_OPERATION = 'DUPLICATED_OPERATION';
const POST_HAS_NO_NAME = 'POST_HAS_NO_NAME';
const WORKER_GRADE_CONNOT_BE_MODIFIED = 'WORKER_GRADE_CONNOT_BE_MODIFIED';
const INTERVENTION_IN_PROGRESS = 'INTERVENTION_IN_PROGRESS';
const INTERVENTION_COMPLETED = 'INTERVENTION_COMPLETED';
const DUPLICATE_PRINCIPALE_CASH_REGISTER_NAME = 'DUPLICATE_PRINCIPALE_CASH_REGISTER_NAME';
const DUPLICATE_RECEIPE_OR_EXPENSE_CASH_REGISTER_NAME = 'DUPLICATE_RECEIPE_OR_EXPENSE_CASH_REGISTER_NAME';
const INVALID_SEND_SMS_DATE_HOUR = 'INVALID_SEND_SMS_DATE_HOUR';
const FILE_EXTENSION_NOT_SUPPORTED = 'FILE_EXTENSION_NOT_SUPPORTED';
const CUSTOMER_VEHICLE_UPDATE = 'CUSTOMER_VEHICLE_UPDATE';
const ITEM_NOT_AVAILABLE_IN_GARAGE_WAREHOUSE = 'ITEM_NOT_AVAILABLE_IN_GARAGE_WAREHOUSE';
const DUPLICATED_ITEM = 'DUPLICATED_ITEM';
const DUPLICATE_FORMATION_EXCEPTION = 'DUPLICATE_FORMATION_EXCEPTION';
const SESSION_NUMBER_UNIQUE = 'SESSION_NUMBER_UNIQUE';
const EMPLOYEE_RECURSIVITY_VIOLATION = 'EMPLOYEE_RECURSIVITY_VIOLATION';
const TIERS_PRICE_REQUEST_UNICITY = 'SUPPLIER_MUST_BE_UNIQUE';
const WAREHOUSE_QUANTITY_MIN_MAX = 'WAREHOUSE_QUANTITY_MIN_MAX';
const CHOSEN_PERIOD_OVERLAPS_WITH_ANOTHER = 'CHOSEN_PERIOD_OVERLAPS_WITH_ANOTHER';
const INVALID_LICENSE = 'INVALID_LICENSE';
const INVALID_LICENSE_WITH_EXPIRATION_DATE_PARAM = 'INVALID_LICENSE_WITH_EXPIRATION_DATE_PARAM';
const LICENSE_MAXIMUM_NUMBER_VIOLATION = 'LICENSE_MAXIMUM_NUMBER_VIOLATION';
const EXPENSE_REPORT_UPDATE_VIOLATION = 'EXPENSE_REPORT_UPDATE_VIOLATION';
const DOCUMENT_REQUEST_UPDATE_VIOLATION = 'DOCUMENT_REQUEST_UPDATE_VIOLATION';
const CONTRACT_BY_TRANSFER_ORDER_UNICITY = 'CONTRACT_BY_TRANSFER_ORDER_UNICITY';
const INCOMPATIBLE_EQUIVALENCE_GROUPE = 'INCOMPATIBLE_EQUIVALENCE_GROUPE';
const CONTACT_REQUIRED = 'CONTACT_REQUIRED';
const SEND_MAIL_ERROR = 'SEND_MAIL_ERROR';
const TITLE_SEND_MAIL_ERROR = 'TITLE_SEND_MAIL_ERROR';
const GENERATE_PRICE_REQUEST_ERROR = 'GENERATE_PRICE_REQUEST_ERROR';
const NO_LANGUAGE_IS_SPECIFIED = 'NO_LANGUAGE_IS_SPECIFIED';
const NO_USER_IS_SPECIFIED = 'NO_USER_IS_SPECIFIED';
const TITLE_GENERATE_PRICE_REQUEST_ERROR = 'TITLE_GENERATE_PRICE_REQUEST_ERROR';
const VALIDATION_OF_DOCUMENT_WITH_STOCK_RESERVATION_ERROR_MSG = 'VALIDATION_OF_DOCUMENT_WITH_STOCK_RESERVATION_ERROR_MSG';
const PAYSLIP_PREVIEW_NOT_GENERATED = 'PAYSLIP_PREVIEW_NOT_GENERATED';
const CHART_ACCOUNT_CODE_EXISTS = 'CHART_ACCOUNT_CODE_EXISTS';
const EXCEL_OLD_FORMAT_NOT_SUPPORTED = 'EXCEL_OLD_FORMAT_NOT_SUPPORTED';
const EXCEL_OOXML_FORMAT_NOT_SUPPORTED = 'EXCEL_OOXML_FORMAT_NOT_SUPPORTED';
const LAST_CODE_REACHED = 'LAST_CODE_REACHED';
const REPORT_TYPE_INVALID = 'REPORT_TYPE_INVALID';
const REPORT_LINE_INDEX_LINE_ORDER_INVALID = 'REPORT_LINE_INDEX_LINE_ORDER_INVALID';
const GARAGE_WARHOUSE_CONNOT_BE_MODIFIED = 'GARAGE_WARHOUSE_CONNOT_BE_MODIFIED';
const REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION = 'REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION';
const REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION_WITH_INDEX_FOR_THIS_REPORT_TYPE =
  'REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION_WITH_INDEX_FOR_THIS_REPORT_TYPE';
const REPORT_LINE_ANNEX_ALREADY_EXISTS = 'REPORT_LINE_ANNEX_ALREADY_EXISTS';
const REPORT_LINE_INEXISTANT_REPORT_LINE = 'REPORT_LINE_INEXISTANT_REPORT_LINE';
const BILL_DATE_AFTER_CURRENT_DATE = 'BILL_DATE_AFTER_CURRENT_DATE';
const DOCUMENT_ACCOUNT_NON_EXISTENT = 'DOCUMENT_ACCOUNT_NON_EXISTENT';
const DOCUMENT_ACCOUNT_LINE_ACCOUNT_DOES_NOT_EXIST = 'DOCUMENT_ACCOUNT_LINE_ACCOUNT_DOES_NOT_EXIST';
const REPORT_LINE_INVALID_FORMULA = 'REPORT_LINE_INVALID_FORMULA';
const REPORT_LINE_INDEX_LINE_NOT_FOUND = 'REPORT_LINE_INDEX_LINE_NOT_FOUND';
const REPORT_LINE_FORMULA_CONTAINS_REPETITION = 'REPORT_LINE_FORMULA_CONTAINS_REPETITION';
const CHART_ACCOUNT_INEXISTANT = 'CHART_ACCOUNT_INEXISTANT';
const ACCOUNT_MISSING_PARAMETERS = 'ACCOUNT_MISSING_PARAMETERS';
const ACCOUNT_CREDIT_DEBIT_IS_DIFFERENT = 'ACCOUNT_CREDIT_DEBIT_IS_DIFFERENT';
const ACCOUNT_CODE_DIFFERENT_THAN_PARENT = 'ACCOUNT_CODE_DIFFERENT_THAN_PARENT';
const ACCOUNT_COULD_NOT_BE_CREATED = 'ACCOUNT_COULD_NOT_BE_CREATED';
const ACCOUNT_IS_USED = 'ACCOUNT_IS_USED';
const JOURNAL_CODE_EXISTS = 'JOURNAL_CODE_EXISTS';
const JOURNAL_CODE_LENGTH = 'JOURNAL_CODE_LENGTH';
const JOURNAL_LABEL_EXISTS = 'JOURNAL_LABEL_EXISTS';
const JOURNAL_CONTAINS_CLOSED_LINES = 'JOURNAL_CONTAINS_CLOSED_LINES';
const NO_OPENING_BALANCE_SHEET_ACCOUNT = 'NO_OPENING_BALANCE_SHEET_ACCOUNT';
const NO_CLOSING_BALANCE_SHEET_ACCOUNT = 'NO_CLOSING_BALANCE_SHEET_ACCOUNT';
const ACCOUNT_RELATION_TYPE_INVALID = 'ACCOUNT_RELATION_TYPE_INVALID';
const ACCOUNT_RELATION_TYPE_DUPLICATES = 'ACCOUNT_RELATION_TYPE_DUPLICATES';
const ACCOUNT_RELATION_IMPLEMENTATION_NONEXISTENT = 'ACCOUNT_RELATION_IMPLEMENTATION_NONEXISTENT';
const ACCOUNT_DOES_NOT_EXIST_ALLOCATION_NOT_POSSIBLE = 'ACCOUNT_DOES_NOT_EXIST_ALLOCATION_NOT_POSSIBLE';
const JOURNAL_MISSING_PARAMETERS = 'JOURNAL_MISSING_PARAMETERS';
const JOURNAL_NO_JOURNAL_A_NEW = 'JOURNAL_NO_JOURNAL_A_NEW';
const REPORT_LINE_CANNOT_UPDATE_WHEN_FISCAL_YEAR_NOT_OPENED = 'REPORT_LINE_CANNOT_UPDATE_WHEN_FISCAL_YEAR_NOT_OPENED';
const NO_ANNEX_REPORT_SUPPORTED_FOR_THIS_REPORT_TYPE = 'NO_ANNEX_REPORT_SUPPORTED_FOR_THIS_REPORT_TYPE';
const ACCOUNT_NEGATIVE_CREDIT_OR_DEBIT = 'ACCOUNT_NEGATIVE_CREDIT_OR_DEBIT';
const CHART_ACCOUNT_PARENT_CHART_ACCOUNT_DONT_EXIST = 'CHART_ACCOUNT_PARENT_CHART_ACCOUNT_DONT_EXIST';
const CHART_ACCOUNT_LABEL_EXISTS = 'CHART_ACCOUNT_LABEL_EXISTS';
const TARGET_FISCAL_YEAR_NOT_AFTER_SELECTED_FISCAL_YEAR = 'TARGET_FISCAL_YEAR_NOT_AFTER_SELECTED_FISCAL_YEAR';
const DOCUMENT_ACCOUNT_LINE_WITH_BOTH_DEBIT_AND_CREDIT = 'DOCUMENT_ACCOUNT_LINE_WITH_BOTH_DEBIT_AND_CREDIT';
const CHART_ACCOUNT_CODE_AND_LABEL_EXIST = 'CHART_ACCOUNT_CODE_AND_LABEL_EXIST';
const USER_NOT_FOUND = 'USER_NOT_FOUND';
const USER_HAS_A_JOURNAL = 'USER_HAS_A_JOURNAL';
const CHART_ACCOUNT_MISSING_PARAMETERS = 'CHART_ACCOUNT_MISSING_PARAMETERS';
const DOCUMENT_ACCOUNT_AMOUNT_NOT_VALID = 'DOCUMENT_ACCOUNT_AMOUNT_NOT_VALID';
const EXCEL_NO_ACCOUNTS_TO_BE_SAVED = 'EXCEL_NO_ACCOUNTS_TO_BE_SAVED';
const EXCEL_NO_JOURNALS_TO_BE_SAVED = 'EXCEL_NO_JOURNALS_TO_BE_SAVED';
const EXCEL_NO_ACCOUNTING_TEMPLATES_TO_BE_SAVED = 'EXCEL_NO_ACCOUNTING_TEMPLATES_TO_BE_SAVED';
const CHART_ACCOUNT_ALREADY_USED_CANT_CHANGE_CODE = 'CHART_ACCOUNT_ALREADY_USED_CANT_CHANGE_CODE';
const START_DATE_IS_AFTER_END_DATE = 'START_DATE_IS_AFTER_END_DATE';
const CURRENT_FISCAL_YEAR_IS_NOT_CLOSED = 'CURRENT_FISCAL_YEAR_IS_NOT_CLOSED';
const START_DATE_INVALID = 'START_DATE_INVALID';
const DOCUMENT_ACCOUNT_CANT_UPDATE_DOCUMENT_IN_CLOSED_PERIOD = 'DOCUMENT_ACCOUNT_CANT_UPDATE_DOCUMENT_IN_CLOSED_PERIOD';
const UPDATING_FISCAL_YEAR_THAT_IS_NOT_OPENED = 'UPDATING_FISCAL_YEAR_THAT_IS_NOT_OPENED';
const UPDATING_FISCAL_YEAR_THAT_IS_CONCLUDED = 'UPDATING_FISCAL_YEAR_THAT_IS_CONCLUDED';
const UPDATING_FISCAL_YEAR_THAT_IS_NOT_LAST = 'UPDATING_FISCAL_YEAR_THAT_IS_NOT_LAST';
const YOU_MUST_CHOOSE_FOR_THE_THE_SAME_LETTER_SINGLE_ACCOUNT = 'YOU_MUST_CHOOSE_FOR_THE_THE_SAME_LETTER_SINGLE_ACCOUNT';
const TOTAL_DEBIT_SHOULD_BE_EQUAL_TO_TOTAL_CREDIT_FOR_ACCOUNT_AND_LETTER =
  'TOTAL_DEBIT_SHOULD_BE_EQUAL_TO_TOTAL_CREDIT_FOR_ACCOUNT_AND_LETTER';
const DOCUMENT_ACCOUNT_CANT_DELETE_DOCUMENT_IN_CLOSED_PERIOD = 'DOCUMENT_ACCOUNT_CANT_DELETE_DOCUMENT_IN_CLOSED_PERIOD';
const CHOSEN_LETTERING_CODE_ALREADY_EXISTS = 'CHOSEN_LETTERING_CODE_ALREADY_EXISTS';
const BEGIN_ACCOUNT_CODE_IS_GREATER_THAN_END_ACCOUNT = 'BEGIN_ACCOUNT_CODE_IS_GREATER_THAN_END_ACCOUNT';
const ACCOUNT_CODE_LENGTH_INVALID = 'ACCOUNT_CODE_LENGTH_INVALID';
const ACCOUNTING_CONFIGURATION_MISSING_PARAMETERS = 'ACCOUNTING_CONFIGURATION_MISSING_PARAMETERS';
const ACCOUNTING_CONFIGURATION_CATEGORY_NOT_FOUND = 'ACCOUNTING_CONFIGURATION_CATEGORY_NOT_FOUND';
const DOCUMENT_ACCOUNT_NOT_IN_FISCAL_YEAR = 'DOCUMENT_ACCOUNT_NOT_IN_FISCAL_YEAR';
const ACCOUNTING_CONFIGURATION_DEPRECITION_PERIOD_UNAFFECTED = 'ACCOUNTING_CONFIGURATION_DEPRECITION_PERIOD_UNAFFECTED';
const TEMPLATE_ACCOUNTING_MISSING_PARAMETERS = 'TEMPLATE_ACCOUNTING_MISSING_PARAMETERS';
const REPORT_LINE_STATE_OF_INCOME_FIELDS_MISMATCH = 'REPORT_LINE_STATE_OF_INCOME_FIELDS_MISMATCH';
const LABEL_MIN_LENGTH = 'LABEL_MIN_LENGTH';
const DOCUMENT_ACCOUNT_MISSING_PARAMETERS = 'DOCUMENT_ACCOUNT_MISSING_PARAMETERS';
const DOCUMENT_ACCOUNT_NO_FISCAL_YEAR = 'DOCUMENT_ACCOUNT_NO_FISCAL_YEAR';
const DOCUMENT_ACCOUNT_DATE_INVALID = 'DOCUMENT_ACCOUNT_DATE_INVALID';
const TEMPLATE_ACCOUNTING_WITHOUT_LINES_CODE = 'TEMPLATE_ACCOUNTING_WITHOUT_LINES_CODE';
const DELETE_INTERVIEW_VIOLATION = 'DELETE_INTERVIEW_VIOLATION';
const TEMPLATE_ACCOUNTING_LABEL_EXISTS = 'TEMPLATE_ACCOUNTING_LABEL_EXISTS';

const FISCAL_YEAR_INEXISTANT_FISCAL_YEAR = 'FISCAL_YEAR_INEXISTANT_FISCAL_YEAR';
const TARGET_FISCAL_YEAR_IS_CLOSED = 'TARGET_FISCAL_YEAR_IS_CLOSED';
const FISCAL_YEAR_MISSING_PARAMETERS = 'FISCAL_YEAR_MISSING_PARAMETERS';
const FISCAL_YEAR_DATES_OVERLAP_ERROR = 'FISCAL_YEAR_DATES_OVERLAP_ERROR';
const FISCAL_YEAR_DATES_ORDER_INVALID = 'FISCAL_YEAR_DATES_ORDER_INVALID';
const ENTITY_NOT_FOUND = 'ENTITY_NOT_FOUND';
const DOCUMENT_ACCOUNT_ENTITY_NOT_FOUND = 'DOCUMENT_ACCOUNT_ENTITY_NOT_FOUND';
const FISCAL_YEAR_NAME_EXISTS = 'FISCAL_YEAR_NAME_EXISTS';
const FISCAL_YEAR_CLOSED = 'FISCAL_YEAR_CLOSED';
const DOCUMENT_ACCOUNT_CODE_EXISTS = 'DOCUMENT_ACCOUNT_CODE_EXISTS';
const DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_DELETED =
  'DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_DELETED';
const DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_MANUALLY_UPDATED =
  'DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_MANUALLY_UPDATED';
const DOCUMENT_ACCOUNT_COMING_FROM_BILL_CANNOT_BE_DELETED = 'DOCUMENT_ACCOUNT_COMING_FROM_BILL_CANNOT_BE_DELETED';
const DOCUMENT_ACCOUNT_CONTAINS_RECONCILABLE_LINES_CANNOT_BE_DELETED = 'DOCUMENT_ACCOUNT_CONTAINS_RECONCILABLE_LINES_CANNOT_BE_DELETED';
const DOCUMENT_ACCOUNT_CONTAINS_LETTERED_LINES_CANNOT_BE_DELETED = 'DOCUMENT_ACCOUNT_CONTAINS_LETTERED_LINES_CANNOT_BE_DELETED';
const DOCUMENT_ACCOUNT_COMING_FROM_A_BILL_CANNOT_BE_MANUALLY_UPDATED = 'DOCUMENT_ACCOUNT_COMING_FROM_A_BILL_CANNOT_BE_MANUALLY_UPDATED';
const DOCUMENT_ACCOUNT_FROM_BILL_AMOUNT_TTC_EQUAL_ZERO_CANNOT_BE_GENERATED = 'DOCUMENT_ACCOUNT_FROM_BILL_AMOUNT_TTC_EQUAL_ZERO_CANNOT_BE_GENERATED'
const FISCAL_YEAR_NOT_ALL_DOCUMENTS_IN_NEW_PERIOD = 'FISCAL_YEAR_NOT_ALL_DOCUMENTS_IN_NEW_PERIOD';
const EXPORT_COULD_NOT_CREATE_DIRECTORY_FOR_FILES = 'EXPORT_COULD_NOT_CREATE_DIRECTORY_FOR_FILES';
const EXCEL_ERROR_WHILE_READING_FILE = 'EXCEL_ERROR_WHILE_READING_FILE';
const EXCEL_ERROR_DOWNLOADING_THE_FILE = 'EXCEL_ERROR_DOWNLOADING_THE_FILE';
const EXCEL_INVALID_HEADERS = 'EXCEL_INVALID_HEADERS';
const EXCEL_EMPTY_FILE = 'EXCEL_EMPTY_FILE';
const EXCEL_INVALID_CONTENT_FORMAT = 'EXCEL_INVALID_CONTENT_FORMAT';
const EXCEL_INVALID_ROW = 'EXCEL_INVALID_ROW';
const EXCEL_FIRST_ROW_SHOULD_CONTAIN_DOCUMENT_INFORMATION = 'EXCEL_FIRST_ROW_SHOULD_CONTAIN_DOCUMENT_INFORMATION';
const EXCEL_HEADER_SHOULD_BE_IN_FIRST_ROW = 'EXCEL_HEADER_SHOULD_BE_IN_FIRST_ROW';
const EXCEL_HEADER_SHOULD_START_IN_FIRST_CELL = 'EXCEL_HEADER_SHOULD_START_IN_FIRST_CELL';
const EXCEL_NO_FOLDER_FOR_GENERATED_REPORTS = 'EXCEL_NO_FOLDER_FOR_GENERATED_REPORTS';
const DOCUMENT_ACCOUNT_DATE_IN_CLOSED_PERIOD = 'DOCUMENT_ACCOUNT_DATE_IN_CLOSED_PERIOD';
const FISCAL_YEAR_CLOSING_INTERVAL_OVERLAP_WITH_ALREADY_CLOSED_ONE = 'FISCAL_YEAR_CLOSING_INTERVAL_OVERLAP_WITH_ALREADY_CLOSED_ONE';
const DOCUMENT_ACCOUNT_CANT_HAVE_MULTIPLE_JOURNAL_ANEW_DOCUMENTS = 'DOCUMENT_ACCOUNT_CANT_HAVE_MULTIPLE_JOURNAL_ANEW_DOCUMENTS';
const FISCAL_YEAR_CLOSED_PERIOD_INEXISTANT = 'FISCAL_YEAR_CLOSED_PERIOD_INEXISTANT';
const DOCUMENT_ACCOUNT_WITHOUT_FISCAL_YEAR = 'DOCUMENT_ACCOUNT_WITHOUT_FISCAL_YEAR';
const FISCAL_YEAR_PREVIOUS_FISCAL_YEAR_HAS_NO_NON_LETTERED_DOCUMENT_ACCOUNT_LINES =
  'FISCAL_YEAR_PREVIOUS_FISCAL_YEAR_HAS_NO_NON_LETTERED_DOCUMENT_ACCOUNT_LINES';
const FISCAL_YEAR_CLOSING_DATE_NULL = 'FISCAL_YEAR_CLOSING_DATE_NULL';
const CNSS_DECLARATION_ERROR = 'CNSS_DECLARATION_ERROR';
const ADD_TRAINING_SEANCE_DATE_LAPS_EXCEPTION = 'ADD_TRAINING_SEANCE_DATE_LAPS_EXCEPTION';
const ADD_TRAINING_SESSION_PERIOD_EXCEPTION = 'ADD_TRAINING_SESSION_PERIOD_EXCEPTION';
const END_AMOUNT_LESS_THAN_BEGIN_AMOUNT = 'END_AMOUNT_LESS_THAN_BEGIN_AMOUNT';
const BEGIN_AMOUNT_OR_END_AMOUNT_FORMAT_INCORRECT = 'BEGIN_AMOUNT_OR_END_AMOUNT_FORMAT_INCORRECT';
const ASSETS_OUT_OF_SERVICE = 'ASSETS_OUT_OF_SERVICE';
const DATE_CESSION_AFTER_DATE_COMMISSIONING = 'DATE_CESSION_AFTER_DATE_COMMISSIONING';
const DEPRECIATION_ASSETS_NOT_ACCOUNTED = 'DEPRECIATION_ASSETS_NOT_ACCOUNTED';
const AMORTIZATION_OF_ASSETS_NOT_FOUND = 'AMORTIZATION_OF_ASSETS_NOT_FOUND';
const NO_ASSET_IS_DEPRECIABLE_IN_THE_FISCAL_YEAR = 'NO_ASSET_IS_DEPRECIABLE_IN_THE_FISCAL_YEAR'
const DEPRECIATION_ASSETS_FIELD_EMPTY = 'DEPRECIATION_ASSETS_FIELD_EMPTY';
const EXCEL_FILE_LOCKED_BY_PASSWORD = 'EXCEL_FILE_LOCKED_BY_PASSWORD';
const EXCEL_FILE_NOT_FOUND = 'EXCEL_FILE_NOT_FOUND';
const ENTITY_ACCOUNTING_FIELD_NOT_VALID = 'ENTITY_ACCOUNTING_FIELD_NOT_VALID';
const INVALID_FORMAT_EXCEPTION = 'INVALID_FORMAT_EXCEPTION';
const HTTP_MESSAGE_NOT_READABLE_EXCEPTION = 'HTTP_MESSAGE_NOT_READABLE_EXCEPTION';
const ACCOUNT_NOT_BALANCED = 'ACCOUNT_NOT_BALANCED';
const CHART_ACCOUNT_MAX_CODE_EXCEEDED = 'CHART_ACCOUNT_MAX_CODE_EXCEEDED';
const EXCEL_NO_CHART_ACCOUNTS_TO_BE_SAVED = 'EXCEL_NO_CHART_ACCOUNTS_TO_BE_SAVED';
const EXCEL_NO_DOCUMENT_ACCOUNTS_TO_BE_SAVED = 'EXCEL_NO_DOCUMENT_ACCOUNTS_TO_BE_SAVED';
const TARGET_FISCAL_YEAR_NON_EXISTENT = 'TARGET_FISCAL_YEAR_NON_EXISTENT';
const CURRENT_FISCAL_YEAR_NON_EXISTENT = 'CURRENT_FISCAL_YEAR_NON_EXISTENT';
const EXCEL_ERROR_PARSING_LOCAL_DATE_OBJECT = 'EXCEL_ERROR_PARSING_LOCAL_DATE_OBJECT';
const RESULT_ACCOUNT_NON_EXISTENT = 'RESULT_ACCOUNT_NON_EXISTENT';
const EXCEL_REPORT_TEMPLATES_NOT_FOUND = 'EXCEL_REPORT_TEMPLATES_NOT_FOUND';
const DATE_CESSION_NULL = 'DATE_CESSION_NULL';
const RESOURCE_NOT_FOUND = 'RESOURCE_NOT_FOUND';
const DATE_CESSION_OUT_OF_SERVICE = 'DATE_CESSION_OUT_OF_SERVICE';
const PREVIOUS_FISCAL_YEARS_NOT_ALL_CONCLUDED = 'PREVIOUS_FISCAL_YEARS_NOT_ALL_CONCLUDED';
const LEAVE_REQUEST_VIOLATION = 'LEAVE_REQUEST_VIOLATION';
const LEAVE_DATE_VIOLATION = 'LEAVE_DATE_VIOLATION';
const LEAVE_UPDATE_VIOLATION = 'LEAVE_UPDATE_VIOLATION';
const LEAVE_DELETE_VIOLATION = 'LEAVE_DELETE_VIOLATION';
const LEAVE_DATE_INTERVAL_VIOLATION = 'LEAVE_DATE_INTERVAL_VIOLATION';
const EMPLOYEE_HAVENOT_PAYSLIP = 'EMPLOYEE_HAVENOT_PAYSLIP';
const CANNOT_ADD_EMPLOYEE_TEAM_WITHOUT_ASSIGNEMENT_DATE = 'CANNOT_ADD_EMPLOYEE_TEAM_WITHOUT_ASSIGNEMENT_DATE';

const ACCOUNTING_CONFIGURATION_NO_CONFIGURATION_FOUND = 'ACCOUNTING_CONFIGURATION_NO_CONFIGURATION_FOUND';
const ACCOUNTING_CONFIGURATION_ACCOUNTS_NOT_FOUND = 'ACCOUNTING_CONFIGURATION_ACCOUNTS_NOT_FOUND';
const ACCOUNTING_CONFIGURATION_FISCAL_YEAR_NOT_FOUND = 'ACCOUNTING_CONFIGURATION_FISCAL_YEAR_NOT_FOUND';
const DOCUMENT_ACCOUNT_WITHOUT_LINES_CODE = 'DOCUMENT_ACCOUNT_WITHOUT_LINES_CODE';
const REPORT_LINE_ASSETS_NOT_FOUND = 'REPORT_LINE_ASSETS_NOT_FOUND';
const ERROR_JASPER_FILE_GENERATION = 'ERROR_JASPER_FILE_GENERATION';
const NO_ACCOUNT_WITH_CODE = 'NO_ACCOUNT_WITH_CODE';

const CANDIDACY_UNPRESELECTED_VIOLATION = 'CANDIDACY_UNPRESELECTED_VIOLATION';
const CANDIDACY_ADD_EXISTING_CANDIDATE = 'CANDIDACY_ADD_EXISTING_CANDIDATE';
const ADD_EXISTING_CANDIDATE = 'ADD_EXISTING_CANDIDATE';
const CANDIDACY_EMPTY_LIST = 'CANDIDACY_EMPTY_LIST';
const CHANGE_PASSWORD_ERRORS = 'CHANGE_PASSWORD_ERRORS';
const JOB_ADD_EXCEPTION = 'JOB_ADD_EXCEPTION';
const NULL_JOB_ADD_EXCEPTION = 'NULL_JOB_ADD_EXCEPTION';
const JOB_UPDATE_EXCEPTION = 'JOB_UPDATE_EXCEPTION';
const ADD_TRAINING_SEANCE_HOURS_EXCEPTION = 'ADD_TRAINING_SEANCE_HOURS_EXCEPTION';
const ADD_TRAINING_SEANCE_HOURS_LAPS_EXCEPTION = 'ADD_TRAINING_SEANCE_HOURS_LAPS_EXCEPTION';
const ADD_TRAINING_SEANCE_HOURS_WEEKLY_EXCEPTION = 'ADD_TRAINING_SEANCE_HOURS_WEEKLY_EXCEPTION';
const ADD_TRAINING_SEANCE_HOURS_WEEKLY_LAPS_EXCEPTION = 'ADD_TRAINING_SEANCE_HOURS_WEEKLY_LAPS_EXCEPTION';
const SESSION_WITH_END_DATE_AND_WITHOUT_START_DATE = 'SESSION_WITH_END_DATE_AND_WITHOUT_START_DATE';
const ADD_TRAINING_SEANCE_DATE_LAPS_WITHOUT_END_DATE_OF_SESSION_EXCEPTION =
  'ADD_TRAINING_SEANCE_DATE_LAPS_WITHOUT_END_DATE_OF_SESSION_EXCEPTION';
const ADD_TRAINING_SEANCE_DATE_LAPS_WITHOUT_START_DATE_OF_SESSION_EXCEPTION =
  'ADD_TRAINING_SEANCE_DATE_LAPS_WITHOUT_START_DATE_OF_SESSION_EXCEPTION';
const INTERVIEW_TO_NEXT_STEP_VIOLATION = 'INTERVIEW_TO_NEXT_STEP_VIOLATION';
const DONE_RECRUITMENT_VIOLATION = 'DONE_RECRUITMENT_VIOLATION';
const UPDATE_CLOSED_RECRUITMENT_VIOLATION = 'UPDATE_CLOSED_RECRUITMENT_VIOLATION';
const EMPTY_EVALUATION_LIST_VIOLATION = 'EMPTY_EVALUATION_LIST_VIOLATION';
const OBJECTIVE_EXCEPTION = 'OBJECTIVE_EXCEPTION';
const EXCEL_FILE_CREATION_FAIL = 'EXCEL_FILE_CREATION_FAIL';
const CNSS_TELE_DECLARATION_ERROR = 'CNSS_TELE_DECLARATION_ERROR';
const COMPANY_CNSS_AFFILIATION_INCORRECT = 'COMPANY_CNSS_AFFILIATION_INCORRECT';
const CNSS_EXPLOITATION_CODE_INCORRECT = 'CNSS_EXPLOITATION_CODE_INCORRECT';
const EMPLOYEE_CNSS_NUMBER_INCORRECT = 'EMPLOYEE_CNSS_NUMBER_INCORRECT';
const EMPLOYEE_IDENTITY_PIECE_INCORRECT = 'EMPLOYEE_IDENTITY_PIECE_INCORRECT';
const PARAMETER_LENGTH_EXCEED = 'PARAMETER_LENGTH_EXCEED';
const GARAGE_WAREOUSE_NOT_EXIST = 'GARAGE_WAREOUSE_NOT_EXIST';
const NO_ITEM_AND_OPERATION_NOT_EXIST_TO_GENERATE_INVOICE = 'NO_ITEM_AND_OPERATION_NOT_EXIST_TO_GENERATE_INVOICE';
const THERE_ARE_OPERATION_WHICH_ARE_NOT_COMPLETED = 'THERE_ARE_OPERATION_WHICH_ARE_NOT_COMPLETED';
const UNITY_CANNOT_BE_MODIFIED = 'UNITY_CANNOT_BE_MODIFIED';
const OPERATION_TYPE_CANNOT_BE_MODIFIED = 'OPERATION_TYPE_CANNOT_BE_MODIFIED';
const OPERATION_CANNOT_BE_MODIFIED = 'OPERATION_CANNOT_BE_MODIFIED';
const LEAVE_WITH_JUSTIFICATION_VIOLATION = 'LEAVE_WITH_JUSTIFICATION_VIOLATION';
const VERIFICATION_IMPORT_FILE = 'VERIFICATION_IMPORT_FILE';
const PRE_SELECTION_TO_NEXT_STEP_VIOLATION = 'PRE_SELECTION_TO_NEXT_STEP_VIOLATION';
const CANDIDACY_UNSELECTED_VIOLATION = 'CANDIDACY_UNSELECTED_VIOLATION';
const BILL_ALREADY_IMPORTED = 'BILL_ALREADY_IMPORTED';
const BILL_SAVE_ERROR = 'BILL_SAVE_ERROR';
const BILL_DATE_NOT_IN_FISCAL_YEAR = 'BILL_DATE_NOT_IN_FISCAL_YEAR';
const NULL_BILL_ACCOUNT_ID = 'NULL_BILL_ACCOUNT_ID';
const NULL_VAT_ACCOUNT_ID = 'NULL_VAT_ACCOUNT_ID';
const NULL_TIER_ACCOUNT_ID = 'NULL_TIER_ACCOUNT_ID';
const NULL_ARTICLE_ACCOUNT_ID = 'NULL_ARTICLE_ACCOUNT_ID';
const DUPLICATE_ENTRY = 'DUPLICATE_ENTRY';
const INVALID_DATE_EXCEPTION = 'INVALID_DATE_EXCEPTION';
const INTERVENTION_OR_DELIVERY_DATE_REQUIRED = 'INTERVENTION_OR_DELIVERY_DATE_REQUIRED';
const DOCUMENT_ACCOUNT_LINE_NOT_FOUND = 'DOCUMENT_ACCOUNT_LINE_NOT_FOUND';
const LETTERING_OPERATION_IN_CLOSED_PERIOD = 'LETTERING_OPERATION_IN_CLOSED_PERIOD';
const ADD_PERIOD_WITH_NO_HOURS_EXCEPTION = 'ADD_PERIOD_WITH_NO_HOURS_EXCEPTION';
const ADD_INTERVIEW_TYPE_EXCEPTION = 'ADD_INTERVIEW_TYPE_EXCEPTION';
const REVIEW_SKILLS_DELETE_EXCEPTION = 'REVIEW_SKILLS_DELETE_EXCEPTION';
const REVIEW_EDITION_EXCEPTION = 'REVIEW_EDITION_EXCEPTION';
const REVIEW_QUESTION_EXCEPTION = 'REVIEW_QUESTION_EXCEPTION';
const DELETE_REVIEW_ARRAY_EXCEPTION = 'DELETE_REVIEW_ARRAY_EXCEPTION';
const SELECTION_TO_NEXT_STEP_VIOLATION = 'SELECTION_TO_NEXT_STEP_VIOLATION';
const ADD_OFFER_VIOLATION = 'ADD_OFFER_VIOLATION';
const UPDATE_OFFER_VIOLATION = 'UPDATE_OFFER_VIOLATION';
const OFFER_TO_NEXT_STEP_VIOLATION = 'OFFER_TO_NEXT_STEP_VIOLATION';
const HOLIDAY_DATE_NOT_INCLUDE_IN_PERIOD_DATE = 'HOLIDAY_DATE_NOT_INCLUDE_IN_PERIOD_DATE';
const OVERLAPPING_PERIOD = 'OVERLAPPING_PERIOD';
const REFLEXIVE_TEAM_MANAGER_EXCEPTION = 'REFLEXIVE_TEAM_MANAGER_EXCEPTION';
const PERIOD_UPDATE_START_DATE_CONTIGUOUS_EXCEPTION = 'PERIOD_UPDATE_START_DATE_CONTIGUOUS_EXCEPTION';
const PERIOD_UPDATE_END_DATE_CONTIGUOUS_EXCEPTION = 'PERIOD_UPDATE_END_DATE_CONTIGUOUS_EXCEPTION';
const PERIOD_NOT_FOUND_EXCEPTION = 'PERIOD_NOT_FOUND_EXCEPTION';
const CONTIGUOUS_HOURS_EXCEPTION = 'CONTIGUOUS_HOURS_EXCEPTION';
const DUPLICATE_DAYOFF_EXCEPTION = 'DUPLICATE_DAYOFF_EXCEPTION';
const HOURS_TIME_EXCEPTION = 'HOURS_TIME_EXCEPTION';
const PERIOD_NOT_CONTIGUOUS_EXCEPTION = 'PERIOD_NOT_CONTIGUOUS_EXCEPTION';
const ITEM_NOT_FILED = 'ITEM_NOT_FILED';
const ADD_CONTRACT_EXCEPTION = 'ADD_CONTRACT_EXCEPTION';
const ADD_BASE_SALARY_EXCEPTION = 'ADD_BASE_SALARY_EXCEPTION';
const EXIST_PENDING_INVENTORY_DOCUMENT = 'EXIST_PENDING_INVENTORY_DOCUMENT';
const ADD_NOT_EXISTING_INVENTORY = 'ADD_NOT_EXISTING_INVENTORY';
const ADD_NOT_EXISTING_INVENTORY_LINE = 'ADD_NOT_EXISTING_INVENTORY_LINE';
const ADD_CONTRACT_BONUS_EXCEPTION = 'ADD_CONTRACT_BONUS_EXCEPTION';
const ADD_EXISTING_INVENTORY_LINE = 'ADD_EXISTING_INVENTORY_LINE';
const ADD_EXISTING_INVENTORY = 'ADD_EXISTING_INVENTORY';
const CANDIDATE_EMAIL_IS_AN_EMPLOYEE_EMAIL = 'CANDIDATE_EMAIL_IS_AN_EMPLOYEE_EMAIL';
const DUPLICATED_CANDIDATE_EMAIL_EXCEPTION = 'DUPLICATED_CANDIDATE_EMAIL_EXCEPTION';
const STARTDATE_EXCEED_ENDDATE = 'STARTDATE_EXCEED_ENDDATE';
const EXPENSE_REPORT_FILE_NOT_FOUND_EXCEPTION = 'EXPENSE_REPORT_FILE_NOT_FOUND_EXCEPTION';
const OFFER_DELTE_VIOLATION = 'OFFER_DELTE_VIOLATION';
const OFFER_ACCEPT_VIOLATION = 'OFFER_ACCEPT_VIOLATION';
const OFFER_REJECT_VIOLATION = 'OFFER_REJECT_VIOLATION';
const USER_EMAIL_UNICITY = 'USER_EMAIL_UNICITY';
const ANY_PERIOD_DEFINED = 'ANY_PERIOD_DEFINED';
const STARTTIME_EXCEED_ENDTIME = 'STARTTIME_EXCEED_ENDTIME';
const DATE_MUST_HAVE_ONE_UNIQUE_PERIOD = 'DATE_MUST_HAVE_ONE_UNIQUE_PERIOD';
const ITEM_UNICITY = 'ITEM_UNICITY';
const AUTHORIZED_AMOUNT_EXCEEDED = 'AUTHORIZED_AMOUNT_EXCEEDED';
const TECDOC_UNAVAILABLE = 'TECDOC_UNAVAILABLE';
const TIMESHEET_UPDATE_VIOLATION = 'TIMESHEET_UPDATE_VIOLATION';
const HAVENOT_PERMISSION_FORVLIDATE_OR_REFUSE = 'HAVENOT_PERMISSION_FORVLIDATE_OR_REFUSE';
const ITEM_ALREADY_EXIST_IN_DOCUMENTLINE = 'ITEM_ALREADY_EXIST_IN_DOCUMENTLINE';
const TIMESHEET_LINE_OVERLAP = 'TIMESHEET_LINE_OVERLAP';
const CODE_UNICITY = 'CODE_UNICITY';
const TITLE_CODE_UNICITY = 'TITLE_CODE_UNICITY';
const LABEL_UNICITY = 'LABEL_UNICITY';
const TITLE_LABEL_UNICITY = 'TITLE_LABEL_UNICITY';
const INVALID_ACQUISITION_DATE = 'INVALID_ACQUISITION_DATE';
const UPDATE_CATEGORY_WITH_ACTIVES = 'UPDATE_CATEGORY_WITH_ACTIVES';
const REQUIRED_EMPLOYEE_USER_VIOLATION = 'REQUIRED_EMPLOYEE_USER_VIOLATION';
const CANT_ADD_NEXT_MONTH_TIMESHEET = 'CANT_ADD_NEXT_MONTH_TIMESHEET';
const ITEM_REPLACEMENT_LOOP = 'ITEM_REPLACEMENT_LOOP';
const TAX_REQUIRED_ERROR = 'TAX_REQUIRED_ERROR';
const CANT_VALIDATE_TIMESHEET_BECAUSE_WAITING_LEAVE_EXIST = 'CANT_VALIDATE_TIMESHEET_BECAUSE_WAITING_LEAVE_EXIST';
const LIBERATION_QUANTITY_BECAUSE_PANIER = 'LIBERATION_QUANTITY_BECAUSE_PANIER';
const NO_LINES_ARE_ADDED = 'NO_LINES_ARE_ADDED';
const SEND_MAIL_ERROR_TIERS_WITHOUT_CONTACT_EMAIL = 'SEND_MAIL_ERROR_TIERS_WITHOUT_CONTACT_EMAIL';
const SEND_MAIL_ERROR_DOCUMENT_WITHOUT_CONTACT = 'SEND_MAIL_ERROR_DOCUMENT_WITHOUT_CONTACT';
const NO_ACCOUNT_PREFIXED_BY_CODE = 'NO_ACCOUNT_PREFIXED_BY_CODE';
const ENTITY_REFERENCED = 'ENTITY_REFERENCED';
const ACCOUNT_SUPPLIER_DOES_NOT_EXIST = 'ACCOUNT_SUPPLIER_DOES_NOT_EXIST';
const ACCOUNT_CUSTOMER_DOES_NOT_EXIST = 'ACCOUNT_CUSTOMER_DOES_NOT_EXIST';
const ACCOUNT_WITHHOLDING_TAX_DOES_NOT_EXIST = 'ACCOUNT_WITHHOLDING_TAX_DOES_NOT_EXIST';
const ACCOUNT_TAXE_DOES_NOT_EXIST = 'ACCOUNT_TAXE_DOES_NOT_EXIST';
const INVALID_SATATUS_DOCUMENT = 'INVALID_SATATUS_DOCUMENT';
const ADD_EXISTING_CLAIM = 'ADD_EXISTING_CLAIM';
const ADD_NOT_EXISTING_CLAIM = 'ADD_NOT_EXISTING_CLAIM';
const UPDATE_NOT_EXISTING_CLAIM = 'UPDATE_NOT_EXISTING_CLAIM';
const ADD_EXISTING_CLAIM_TIERS_ASSET = 'ADD_EXISTING_CLAIM_TIERS_ASSET';
const ADD_EXISTING_CLAIM_MOVEMENT_IN = 'ADD_EXISTING_CLAIM_MOVEMENT_IN';
const ADD_EXISTING_CLAIM_MOVEMENT_OUT = 'ADD_EXISTING_CLAIM_MOVEMENT_OUT';
const ADD_NOT_EXISTING_CLAIM_TIERS_ASSET = 'ADD_NOT_EXISTING_CLAIM_TIERS_ASSET';
const ADD_EXISTING_CLAIM_STOCK_MOVEMENT = 'ADD_EXISTING_CLAIM_STOCK_MOVEMENT';
const ADD_NOT_EXISTING_CLAIM_STOCK_MOVEMENT = 'ADD_NOT_EXISTING_CLAIM_STOCK_MOVEMENT';
const UPDATE_NOT_EXISTING_STOCK_MOVEMENT = 'UPDATE_NOT_EXISTING_STOCK_MOVEMENT';
const No_Lines_To_Be_ADDED = 'No_Lines_To_Be_ADDED';
const ALREADY_VALIDATED_DOCUMENT = 'ALREADY_VALIDATED_DOCUMENT';
const EXISTING_SALES_INVOICE_FROM_VALIDATED_DOCUMENT = 'EXISTING_SALES_INVOICE_FROM_VALIDATED_DOCUMENT';
const NOT_AVAILABLE_CLAIM_STOCKMOVEMENT_QUANTITY = 'NOT_AVAILABLE_CLAIM_STOCKMOVEMENT_QUANTITY';
const NOT_SAME_CLAIM_QUANTITY = 'NOT_SAMECLAIM_QUANTITY';
const INVALID_SETTELMENT_DATE = 'INVALID_SETTELMENT_DATE';
const DELETED_OR_UNREACHABLE_ENTITY = 'DELETED_OR_UNREACHABLE_ENTITY';
const ERROR_QUANTITY_WITH_PARAM = 'ERROR_QUANTITY_WITH_PARAM';
const ERROR_QUANTITY_TITLE = 'ERROR_QUANTITY_TITLE';
const BL_INVOICED = 'BL_INVOICED';
const UPDATE_NOT_EXISTING_ROLE_CODE = 'UPDATE_NOT_EXISTING_ROLE_CODE';
const ADD_EXISTING_ROLE_CODE = 'ADD_EXISTING_ROLE_CODE';
const TRYING_TO_SORT_USING_NON_EXISTENT_FIELD = 'TRYING_TO_SORT_USING_NON_EXISTENT_FIELD';
const CHART_ACCOUNT_ALREADY_USED_CANT_DELETE = 'CHART_ACCOUNT_ALREADY_USED_CANT_DELETE';
const EMPTY_LIST = 'EMPTY_LIST';
const NO_PRINTER_INSTALLED = 'NO_PRINTER_INSTALLED';
const CANT_DELETE_RESERVED_DOCUMENT = 'CANT_DELETE_RESERVED_DOCUMENT';
const VALID_ASSOCIATED_INVOICE = 'VALID_ASSOCIATED_INVOICE';
const ITEM_NOT_EXIST_IN_WARHOUSE = 'ITEM_NOT_EXIST_IN_WARHOUSE';
const DOCUMENT_IS_IMPORTED = 'DOCUMENT_IS_IMPORTED';
const DELETED_DOCUMENT_LINE = 'DELETED_DOCUMENT_LINE';
const DELETED_DOCUMENTS_LINE = 'DELETED_DOCUMENTS_LINE';
const UPDATED_QTY_DOCUMENT_LINE = 'UPDATED_QTY_DOCUMENT_LINE';
const UPDATE_PURCHASE_DELIVERY_QUANTITY = 'UPDATE_PURCHASE_DELIVERY_QUANTITY';
const NEGOTIATION_ALREADY_ADDED = 'NEGOTIATION_ALREADY_ADDED';
const NO_RIGHTS_TO_DELETE_RESERVED_LINE_EXCEPTION = 'NO_RIGHTS_TO_DELETE_RESERVED_LINE_EXCEPTION';
const NO_RIGHTS_TO_DELETE_LINE_EXCEPTION = 'NO_RIGHTS_TO_DELETE_LINE_EXCEPTION';
const LINE_ALREAD_DELETED = 'LINE_ALREAD_DELETED';
const CENTRAL_CANNOT_BE_DELETED = 'CENTRAL_CANNOT_BE_DELETED';

const CANNOT_IMPORT_BS_BL = 'CANNOT_IMPORT_BS_BL';
const IMPORTED_DOCUMENT = 'IMPORTED_DOCUMENT';
const CANNOT_DELETE_WAREHOUSE = 'CANNOT_DELETE_WAREHOUSE';
const WAREHOUSE_NAME_MUST_BE_UNIQUE = 'WAREHOUSE_NAME_MUST_BE_UNIQUE';
const WAREHOUSE_MUST_HAVE_PARENT = 'WAREHOUSE_MUST_HAVE_PARENT';
const DOCUMENT_ACCOUNT_FROM_AMORTIZATION_NOT_GENERATED_YET = 'DOCUMENT_ACCOUNT_FROM_AMORTIZATION_NOT_GENERATED_YET';

/*CRM  Custom Exceptions Messages*/
const STATUS_ALREADY_USED_IN_CATEGORY = 'STATUS_ALREADY_USED_IN_CATEGORY';
const NULL_ORGANISATION_FOUND = 'NULL_ORGANISATION_FOUND';
const ORGANISATION_EMAIL_ALREADY_USED = 'ORGANISATION_EMAIL_ALREADY_USED';
const ORGANISATION_NAME_ALREADY_USED = 'ORGANISATION_NAME_ALREADY_USED';

const NULL_CONTACT_CRM_FOUND = 'NULL_CONTACT_CRM_FOUND';
const CATEGORY_ALREADY_USED = 'CATEGORY_ALREADY_USED';
const NULL_OPPORTUNITY_FOUND = 'NULL_OPPORTUNITY_FOUND';
const INVALID_COMPANY_SPECIFIED_CANT_CONNECT_TO_DATA_SOURCE = 'INVALID_COMPANY_SPECIFIED_CANT_CONNECT_TO_DATA_SOURCE';
const NO_COMPANY_SPECIFIED_CANT_CONNECT_TO_DATA_SOURCE = 'NO_COMPANY_SPECIFIED_CANT_CONNECT_TO_DATA_SOURCE';
const EMPTY_COMPANIES_LIST_IN_APPLICATION_PROPERTIES = 'EMPTY_COMPANIES_LIST_IN_APPLICATION_PROPERTIES';
const FILE_CRM_NOT_FOUND = 'FILE_CRM_NOT_FOUND';
const DELETE_FILE_CRM_FAILED = 'DELETE_FILE_CRM_FAILED';
const INVALID_FUTUR_OBJECTIF_DATE = 'INVALID_FUTUR_OBJECTIF_DATE';
const INVALID_FUTUR_FORMATION_DATE = 'INVALID_FUTUR_FORMATION_DATE';
const STATUS_COLOR_ALREADY_USED = 'STATUS_COLOR_ALREADY_USED';
const STATUS_TITLE_ALREADY_USED = 'STATUS_TITLE_ALREADY_USED';
const IMPOSSIBLE_TO_DELETE_CONTACT_RELATED_TO_OPP = 'IMPOSSIBLE_TO_DELETE_CONTACT_RELATED_TO_OPP';
const IMPOSSIBLE_TO_DELETE_CONTACT_RELATED_TO_CLAIM = 'IMPOSSIBLE_TO_DELETE_CONTACT_RELATED_TO_CLAIM';
const IMPOSSIBLE_TO_DELETE_CONTACT_RELATED_TO_OPP_CLAIM = 'IMPOSSIBLE_TO_DELETE_CONTACT_RELATED_TO_OPP_CLAIM';
const SUPPRESSION_IMPOSSIBLE_RELATED_TO_CONTACT = 'SUPPRESSION_IMPOSSIBLE_RELATED_TO_CONTACT';
const SUPPRESSION_IMPOSSIBLE_RELATED_TO_OPPORTUNITY = 'SUPPRESSION_IMPOSSIBLE_RELATED_TO_OPPORTUNITY';
const ACTIONS_IN_SAME_RANGE_ALREADY_EXISTS = 'ACTIONS_IN_SAME_RANGE_ALREADY_EXISTS';
const EMAIL_IS_ALREADY_USED = 'EMAIL_IS_ALREADY_USED'
//////////////////////////////////////////////////////// after merge /////////////////////////////////////////////////////////////

/*Mailing Exceptions Messages*/

const OVERTAKING_OF_LEAVE_IS_NOT_AUTHORIZED = 'OVERTAKING_OF_LEAVE_IS_NOT_AUTHORIZED';
const DOCUMENT_ACCOUNT_AMOUNT_CODE = 'DOCUMENT_ACCOUNT_AMOUNT_CODE';
const TRAINING_CENTER_OPENING_TIME_LESS_THAN_CLOSING_TIME_EXCEPTION = 'TRAINING_CENTER_OPENING_TIME_LESS_THAN_CLOSING_TIME_EXCEPTION';
const DUPLICATED_TRAINING_CENTER_NAMES = 'DUPLICATED_TRAINING_CENTER_NAMES';
const MISSING_EXTERNAL_TRAINER_EXCEPTION = 'MISSING_EXTERNAL_TRAINER_EXCEPTION';
const CONTRACT_BENEFIT_IN_KIND_START_DATE_EXCEPTION = 'CONTRACT_BENEFIT_IN_KIND_START_DATE_EXCEPTION';
const CONTRACT_BENEFIT_IN_KIND_EXPIRATION_DATE_EXCEPTION = 'CONTRACT_BENEFIT_IN_KIND_EXPIRATION_DATE_EXCEPTION';
const CONTRACT_BENEFIT_IN_KIND_START_DATE_GREATER_THAN_EXPIRATION_DATE_EXCEPTION =
  'CONTRACT_BENEFIT_IN_KIND_START_DATE_GREATER_THAN_EXPIRATION_DATE_EXCEPTION';
const BASESALARY_STARTDATE_MUST_BE_UNIQUE = 'BASESALARY_STARTDATE_MUST_BE_UNIQUE';
const CONTRACTBONUS_STARTDATE_MUST_BE_UNIQUE = 'CONTRACTBONUS_STARTDATE_MUST_BE_UNIQUE';
const SETTLEMENT_CANNOT_BE_MODIFIED = 'SETTLEMENT_CANNOT_BE_MODIFIED';
const ASSIGNMENT_STARDATE_MUST_BE_BETWEEN_PROJECT_STARTDATE_AND_ENDDATE =
  'ASSIGNMENT_STARDATE_MUST_BE_BETWEEN_PROJECT_STARTDATE_AND_ENDDATE';
const ASSIGNMENT_DATE_MUST_BE_BEFOR_TEAM_CREATION_DATE = 'ASSIGNMENT_DATE_MUST_BE_BEFOR_TEAM_CREATION_DATE';
const CANNOT_HAVE_MORE_THAN_ONE_ASIGNEMENT_WITH_SAME_DATE = 'CANNOT_HAVE_MORE_THAN_ONE_ASIGNEMENT_WITH_SAME_DATE';
const ASSIGNMENTDATE_MUST_BE_LOWER_THAN_UNASSIGNMENTDATE = 'ASSIGNMENTDATE_MUST_BE_LOWER_THAN_UNASSIGNMENTDATE';
const SAME_CIN_NUMBER = 'SAME_CIN_NUMBER';
const SAME_CNSS_NUMBER = 'SAME_CNSS_NUMBER';
const TIMESHEETDAYDOESNTCOVERHOURS = 'TIMESHEETDAYDOESNTCOVERHOURS';
const CANT_UPDATE_ASSIGNMENT_BECAUSE_USED_BY_TIMESHEETLINE = 'CANT_UPDATE_ASSIGNMENT_BECAUSE_USED_BY_TIMESHEETLINE';
const EMPLOYEE_IDENDITY_PAPERS_VIOLATION = 'EMPLOYEE_IDENDITY_PAPERS_VIOLATION';
const SAME_CANDIDATE_CIN_NUMBER = 'SAME_CANDIDATE_CIN_NUMBER';
const DUPLICATED_EMPLOYEE_RIB_EXCEPTION = 'DUPLICATED_EMPLOYEE_RIB_EXCEPTION';
const CANT_DELETE_PERIOD = 'CANT_DELETE_PERIOD';
const CANT_UPDATE_PERIOD_ENDDATE = 'CANT_UPDATE_PERIOD_ENDDATE';
const CANT_UPDATE_PERIOD_STARTDATE = 'CANT_UPDATE_PERIOD_STARTDATE';
const MOBILITY_REQUEST_SAME_OFFICE_VIOLATION = 'MOBILITY_REQUEST_SAME_OFFICE_VIOLATION';
const CANNOT_MAKE_FIX_REQUEST = 'CANNOT_MAKE_FIX_REQUEST';
const CANNOT_SUBMIT_LEAVE_BECAUSE_TIMESHEET_HAS_INOICE = 'CANNOT_SUBMIT_LEAVE_BECAUSE_TIMESHEET_HAS_INOICE';
const CANT_DELETE_PROJECT_BECAUSE_USED_IN_TIMESHEET = 'CANT_DELETE_PROJECT_BECAUSE_USED_IN_TIMESHEET';
const EMPLOYEE_PROJECT_VALIDITY_ASSIGNMENT_DATE = 'EMPLOYEE_PROJECT_VALIDITY_ASSIGNMENT_DATE';
const CANT_DELETE_TEAM_BECAUSE_USED_IN_EMPLOYEES = 'CANT_DELETE_TEAM_BECAUSE_USED_IN_EMPLOYEES';
const PERCENTAGE_MUST_BE_BETWEEN_ZERO_AND_HENDRED = 'PERCENTAGE_MUST_BE_BETWEEN_ZERO_AND_HENDRED';
const VALIDATION_OF_PERCENTAGE_ASSIGNMENT_WITH_EMPLOYEE = 'VALIDATION_OF_PERCENTAGE_ASSIGNMENT_WITH_EMPLOYEE';
const CONTROL_OF_PERCENTAGE_ASSIGNMENT_IS_NOT_NULL = 'CONTROL_OF_PERCENTAGE_ASSIGNMENT_IS_NOT_NULL';
const EMPLOYEE_DID_NOT_HAVE_A_ROLE = 'EMPLOYEE_DID_NOT_HAVE_A_ROLE';
const LEAVE_HAS_EXPIRED_FOR_THE_MONTH = 'LEAVE_HAS_EXPIRED_FOR_THE_MONTH';
const INVALID_START_AND_END_DATE = 'INVALID_START_AND_END_DATE';
const INVALID_DATA_INPUT_FROM_EXCEL_FILE = 'INVALID_DATA_INPUT_FROM_EXCEL_FILE';
const EXCEL_INVALID_DATA_COLUMN = 'EXCEL_INVALID_DATA_COLUMN';
const EXCEL_INVALID_SSN_COLUMN = "EXCEL_INVALID_SSN_COLUMN";
const EXCEL_INVALID_RIB_COLUMN = "EXCEL_INVALID_RIB_COLUMN";
const EOMPLYEE_DID_NOT_HAVE_A_CONTRACT_FROM_EXCEL = "EOMPLYEE_DID_NOT_HAVE_A_CONTRACT_FROM_EXCEL";
const NUMBERS_NOT_FOUND_FROM_DB = "NUMBERS_NOT_FOUND_FROM_DB";
const MANAGER_CANNOT_BE_IN_HIS_MANAGING_TEAM = 'MANAGER_CANNOT_BE_IN_HIS_MANAGING_TEAM';
const CANNOT_SUBMIT_TIMESHEETLINE_TOTAL_TIME_EQUAL_ZERO = 'CANNOT_SUBMIT_TIMESHEETLINE_TOTAL_TIME_EQUAL_ZERO';
const USER_EMPLOYEE_RELATION_UNICITY = 'USER_EMPLOYEE_RELATION_UNICITY';
const DOCUMENTREQUESTDELETEVIOLATION = 'DOCUMENTREQUESTDELETEVIOLATION';
const EXPENSEREPORTDELETEVIOLATION = 'EXPENSEREPORTDELETEVIOLATION';
const CANNOT_CANCEL_LEAVE_BECAUSE_TIMESHEET_HAS_INOICE = 'CANNOT_CANCEL_LEAVE_BECAUSE_TIMESHEET_HAS_INOICE';
const CANNOT_UPDATE_BECAUSE_INVOICED_TIMEHSEET_EXIST = 'CANNOT_UPDATE_BECAUSE_INVOICED_TIMEHSEET_EXIST';
const PREVENT_MOBILITY_REQUEST_ADD_MODIFICATION_TO_NOT_ALLOWED_USERS = 'PREVENT_MOBILITY_REQUEST_ADD_MODIFICATION_TO_NOT_ALLOWED_USERS';
const ONLY_OFFICE_MANAGER_ACCEPTE_OR_REFUSE_THE_MOBILITY_REQUEST = 'ONLY_OFFICE_MANAGER_ACCEPTE_OR_REFUSE_THE_MOBILITY_REQUEST';
const BASE_SALARY_LACK = 'BASE_SALARY_LACK';
const CONTRACT_OVERLAP = 'CONTRACT_OVERLAP';
const CONTRACT_OVERLAP_WITH_PARAMS = 'CONTRACT_OVERLAP_WITH_PARAMS';
const MORE_THAN_ONE_CONTRACT_WITHOUT_ENDDATE = 'MORE_THAN_ONE_CONTRACT_WITHOUT_ENDDATE';
const MORE_THAN_ONE_CONTRACT_WITHOUT_ENDDATE_WITH_PARAMS = "MORE_THAN_ONE_CONTRACT_WITHOUT_ENDDATE_WITH_PARAMS";
const USER_EXITS_IN_MASTER_BASE = 'USER_EXITS_IN_MASTER_BASE';
const USER_ALREADY_DELETED_FROM_SLAVE_BASE = 'USER_ALREADY_DELETED_FROM_SLAVE_BASE';
const PASSWORD_CONFIRMITY_ERROR = 'passwordsMatch';
const SAME_OLD_PASSWORD = 'SAME_OLD_PASSWORD';
const FAILURE_OPERATION = 'FAILURE_OPERATION';
const REGISTRATION_NUMBER_MAXIMAL_ACHIEVED = 'REGISTRATION_NUMBER_MAXIMAL_ACHIEVED';
const UNDEFINED_ROLE = 'UNDEFINED_ROLE';
const PERIOD_MUST_HAVE_TWO_WORKING_HOURS_FOR_TIMESHEET_PER_HALF_DAY = 'PERIOD_MUST_HAVE_TWO_WORKING_HOURS_FOR_TIMESHEET_PER_HALF_DAY';
const USER_EMAIL_MODIFICATION_PROHIBITED = 'USER_EMAIL_MODIFICATION_PROHIBITED';
const FAILED_TO_DELETE = 'FAILED_TO_DELETE';
const FAILED_TO_DELETE_EXIT_EMPLOYEE = 'FAILED_TO_DELETE_EXIT_EMPLOYEE';
const PRIVILEGE_SAME_LEVEL = 'PRIVILEGE_SAME_LEVEL';
const PRIVILEGE_SUPERIOR_LEVEL = 'PRIVILEGE_SUPERIOR_LEVEL';
const BAD_REFERENCE = 'BAD_REFERENCE';
const FORMALISM_VALUE = 'FORMALISM_VALUE';
const SYNTACTIC_ERROR = 'SYNTACTIC_ERROR';
const EXECUTION_ERROR = 'EXECUTION_ERROR';
const LEXICAL_ERROR = 'LEXICAL_ERROR';
const EXIT_EMPLOYEE_UPDATE_VIOLATION = 'EXIT_EMPLOYEE_UPDATE_VIOLATION';
const RECRUITMENT_UPDATE_VIOLATION = 'RECRUITMENT_UPDATE_VIOLATION';
const CANNOT_DELETE_CLOSED_SESSION = 'CANNOT_DELETE_CLOSED_SESSION';
const EMPLOYEE_WITH_NO_PAYSLIP_EXCEPTION = 'EMPLOYEE_WITH_NO_PAYSLIP_EXCEPTION';
const OFFER_BENEFIT_IN_KIND_START_DATE_EXCEPTION = 'OFFER_BENEFIT_IN_KIND_START_DATE_EXCEPTION';
const OFFER_BENEFIT_IN_KIND_EXPIRATION_DATE_EXCEPTION = 'OFFER_BENEFIT_IN_KIND_EXPIRATION_DATE_EXCEPTION';
const OFFER_BENEFIT_IN_KIND_START_DATE_GREATER_THAN_EXPIRATION_DATE_EXCEPTION =
  'OFFER_BENEFIT_IN_KIND_START_DATE_GREATER_THAN_EXPIRATION_DATE_EXCEPTION';
const JOB_HIERARCHY_LEVEL_VIOLATION = 'JOB_HIERARCHY_LEVEL_VIOLATION';
const EMPLOYEE_EQUAL_TO_UPPER_EMPLOYEE_EXCEPTION = 'EMPLOYEE_EQUAL_TO_UPPER_EMPLOYEE_EXCEPTION';
const ANY_SOURCE_DEDUCTION = 'ANY_SOURCE_DEDUCTION';
const CNSS_DECLARATION_DETAILS_EXCEPTION = 'CNSS_DECLARATION_DETAILS_EXCEPTION';
const EMPLOYEE_TO_INTERVIEW_MUST_NOT_BE_INTERVIEWER = 'EMPLOYEE_TO_INTERVIEW_MUST_NOT_BE_INTERVIEWER';
const CONTRACT_UPDATE_CHECK = 'CONTRACT_UPDATE_CHECK';
const ATTENDANCE_MAX_DAYS_ALLOWED = 'ATTENDANCE_MAX_DAYS_ALLOWED';
const NEGATIVE_BONUS_SESSION = 'NEGATIVE_BONUS_SESSION';
const UNPAID_WITHHOLDING_TAX = 'UNPAID_WITHHOLDING_TAX';
const DELETED_FINANCIAL_COMMITMENT = 'DELETED_FINANCIAL_COMMITMENT';
const DELETED_FINANCIAL_COMMITMENTS = 'DELETED_FINANCIAL_COMMITMENTS';
const SELECTED_FINANCIAL_COMMITMENTS_HAS_BEEN_CHANGED = 'SELECTED_FINANCIAL_COMMITMENTS_HAS_BEEN_CHANGED';
const DELETE_PAYMENT_SLIP_NOT_PROVISIONAL = 'DELETE_PAYMENT_SLIP_NOT_PROVISIONAL';
const INCORRECT_EMPLOYER_RATE = 'INCORRECT_EMPLOYER_RATE';
const INCORRECT_SALARY_RATE = 'INCORRECT_SALARY_RATE';
const INCORRECT_WORK_ACCIDENT_RATE = 'INCORRECT_WORK_ACCIDENT_RATE';
const EXISTING_OPERATING_CODE = 'EXISTING_OPERATING_CODE';
const NO_DOCUMENT_SELECTED_FOR_MASS_VALIDATION = 'NO_DOCUMENT_SELECTED_FOR_MASS_VALIDATION';
const REQUIRED_BASESALARY_STARTDATE = 'REQUIRED_BASESALARY_STARTDATE';
const MIN_LESS_THAN_MAX = 'MIN_LESS_THAN_MAX';
const CONTRACT_WITH_UNDEFINED_ENDDATE_EXISTS = 'CONTRACT_WITH_UNDEFINED_ENDDATE_EXISTS';
const BASE_SALARY_VALUE = 'BASE_SALARY_VALUE';
const ORDER_AND_APPLICABILITY_LIMITS = 'ORDER_AND_APPLICABILITY_LIMITS';
const INTERVIEWER_OCCUPIED = 'INTERVIEWER_OCCUPIED';
const EMPLOYEE_OCCUPIED = 'EMPLOYEE_OCCUPIED';
const CONTRACTS_DATES_DEPENDENCY = 'CONTRACTS_DATES_DEPENDENCY';
const DELETION_FAILED = 'DELETION_FAILED';
const DELETION_USED_USER_FAILED = 'DELETION_USED_USER_FAILED';
const MATRICULE_MUST_BE_A_NUMBER = 'MATRICULE_MUST_BE_A_NUMBER';
const SUPERVISOR_NOT_IN_REQUIRED_INTERVIEWERS = 'SUPERVISOR_NOT_IN_REQUIRED_INTERVIEWERS';
const CANNOT_CHANGE_PASSWORD = 'CANNOT_CHANGE_PASSWORD';
const EMPLOYEE_HAS_ANY_CONTRACT = 'EMPLOYEE_HAS_ANY_CONTRACT';
const CANDIDATE_ALREADY_ACCEPTED_IN_OTHER_OFFER = 'CANDIDATE_ALREADY_ACCEPTED_IN_OTHER_OFFER';

const EXISTING_EMPLOYEE_EXIT_RELEASE_DATE = 'EXISTING_EMPLOYEE_EXIT_RELEASE_DATE';
/**
 * Manufacturing custom Exception code
 */
const NOMENCALTURE_REFERENCE_EXIST = 'NOMENCLATURE_REFERENCE_EXIST';
const NOMENCALTURE_PRODUCT_EXIST = 'NOMENCALTURE_PRODUCT_EXIST';
const NOMENCLATURE_NOT_EXIST = 'NOMENCLATURE_NOT_EXIST';
const NOMECLATRUE_CHECK_PRODUCT_EXIST_IN_SUB_PRODUCT = 'NOMECLATRUE_CHECK_PRODUCT_EXIST_IN_SUB_PRODUCT';
const NOMENCLATURE_IN_PROGRESS_FARBRICATION_ARRANGEMENT = 'NOMENCLATURE_IN_PROGRESS_FARBRICATION_ARRANGEMENT';
const MACHINE_DESCRIPTION_EXIST = 'MACHINE_DESCRIPTION_EXIST';
const GAMME_EXIST = 'GAMME_EXIST';
const AREA_NOT_EMPTY = 'AREA_NOT_EMPTY';
const SECTION_USED_IN_OPERATION = 'SECTION_USED_IN_OPERATION';
const MACHINE_USED_IN_OPERATION = 'MACHINE_USED_IN_OPERATION';
const NOMENCLATURE_USED_IN_FABRICATION_ARRANGEMENT = 'NOMENCLATURE_USED_IN_FABRICATION_ARRANGEMENT';
const GAMME_USED_IN_FABRICATION_ARRANGEMENT = 'GAMME_USED_IN_FABRICATION_ARRANGEMENT';
const ITEM_WITHOUT_GAMME = 'ITEM_WITHOUT_GAMME';
const CANNOT_DELETE_GAMME = 'CANNOT_DELETE_GAMME';
const NOMENCLATURE_USED_IN_OTHER_NOMENCLATURE = 'NOMENCLATURE_USED_IN_OTHER_NOMENCLATURE';
const UNIT_OF_MESURE_CODE_ALREADY_EXISTS = 'UNIT_OF_MESURE_CODE_ALREADY_EXISTS' ;
const TASK_IS_ASSIGNED = 'TASK_IS_ASSIGNED_CANNOT_DELETE';
const MACHINE_NOT_AVAILABLE_IN_THAT_TIME_FRAME = 'MACHINE_NOT_AVAILABLE_IN_THAT_TIME_FRAME';
const MACHINE_IS_USED_IN_THIS_FAB_IN_THE_SAME_TIME_FRAME = 'MACHINE_IS_USED_IN_THIS_FAB_IN_THE_SAME_TIME_FRAME';
const VARIABLE_START_DATE_VALIDITY = 'VARIABLE_START_DATE_VALIDITY';
const EMPLOYEE_WITHOUT_CONTRACT = 'EMPLOYEE_WITHOUT_CONTRACT';
const NUMBER_OF_WORKED_DAYS_EXCEEDED = 'NUMBER_OF_WORKED_DAYS_EXCEEDED';
const NUMBER_OF_WORKED_DAYS_NOT_REACHED = 'NUMBER_OF_WORKED_DAYS_NOT_REACHED';
const LOAN_EXCEEDS_LIMIT = 'LOAN_EXCEEDS_LIMIT';
const LOAN_EXISTENCE_IN_SAME_MONTH = 'LOAN_EXISTENCE_IN_SAME_MONTH';
const LEAVE_TYPE_MAXIMUM_NUMBER_OF_DAYS_LIMIT_EXCEPTION = 'LEAVE_TYPE_MAXIMUM_NUMBER_OF_DAYS_LIMIT_EXCEPTION';
const LEAVE_TYPE_EXPIRATION_DATE_VIOLATION = 'LEAVE_TYPE_EXPIRATION_DATE_VIOLATION';
const CONTRACT_TYPE_CODE_VIOLATION = 'CONTRACT_TYPE_CODE_VIOLATION';
const PERIODICITY_STARTDATE_MUST_BE_UNIQUE = 'PERIODICITY_STARTDATE_MUST_BE_UNIQUE';
const CAN_NOT_CLOSE_SESSION_WITHOUT_PAYSLIP = 'CAN_NOT_CLOSE_SESSION_WITHOUT_PAYSLIP';
const CAN_NOT_CLOSE_SESSION_WITH_WRONG_OR_NOT_CALCULATED_PAYSLIP = 'CAN_NOT_CLOSE_SESSION_WITH_WRONG_OR_NOT_CALCULATED_PAYSLIP';
const AVERAGE_DAILY_RATE_EXCEPTION = 'AVERAGE_DAILY_RATE_EXCEPTION';
const EMPLOYEE_AVERAGE_DAILY_RATE_EXCPTION = 'EMPLOYEE_AVERAGE_DAILY_RATE_EXCPTION';
const DUPLICATED_ANNUAL_REVIEW_MANAGER_PRIORITY = 'DUPLICATED_ANNUAL_REVIEW_MANAGER_PRIORITY';
const TRANSFER_ORDER_WITH_NO_TRANSFER_ORDER_DETAIL = 'TRANSFER_ORDER_WITH_NO_TRANSFER_ORDER_DETAIL';
const EXPENSE_REPORT_DETAIL_LIMIT = 'EXPENSE_REPORT_DETAIL_LIMIT';
const CURRENCY_CODE_NOT_VERIFIED = 'CURRENCY_CODE_NOT_VERIFIED';
const CHECK_OLD_PASSWORD = 'CHECK_OLD_PASSWORD';
const USERS_NOT_SYNCHRONIZED = 'USERS_NOT_SYNCHRONIZED';
const EMPLOYEE_HAS_ANY_PAYSLIP = 'EMPLOYEE_HAS_ANY_PAYSLIP';
const VARIABLE_REFERENCE_VIOLATION = 'VARIABLE_REFERENCE_VIOLATION';
const EXPENSE_REPORT_FILE_EXTENSION_VIOLATION = 'EXPENSE_REPORT_FILE_EXTENSION_VIOLATION';
const CHANGING_WITHHOLDING_TAX_COMPANY_SETTINGS = 'CHANGING_WITHHOLDING_TAX_COMPANY_SETTINGS';
const Chosen_Item_Exist_In_Provisional_Inventory = 'Chosen_Item_Exist_In_Provisional_Inventory';
const Document_Have_Item_Exist_In_Provisional_Inventory = 'Document_Have_Item_Exist_In_Provisional_Inventory';
const Selected_Lines_Contains_Item_Exist_In_Provisional_Inventory = 'Selected_Lines_Contains_Item_Exist_In_Provisional_Inventory';
const Some_Items_Exist_In_Provisional_Inventory = 'Some_Items_Exist_In_Provisional_Inventory';
const CHANGING_WITHHOLDING_TAX_COMPANY_SETTINGS_IN_INVOICE = 'CHANGING_WITHHOLDING_TAX_COMPANY_SETTINGS_IN_INVOICE';
const NO_SETTLEMENTS_FOUND_IN_PAYMENT_SLIP = 'NO_SETTLEMENTS_FOUND_IN_PAYMENT_SLIP';
const DUPLICATED_LANGUAGE_RECRUITMENT_OFFER = 'DUPLICATED_LANGUAGE_RECRUITMENT_OFFER';
const CANT_UPDATE_ENTITY_BECAUSE_ANY_PAYSLIP_IS_USED_IN_CLOSED_SESION =
  'CANT_UPDATE_ENTITY_BECAUSE_ANY_PAYSLIP_IS_USED_IN_CLOSED_SESION';
const FAILED_DRUPAL_CONNECTION = 'FAILED_DRUPAL_CONNECTION';
const NO_VALIDITY_PERIOD_IS_CONFIGURED_FOR_THIS_PERIOD = 'NO_VALIDITY_PERIOD_IS_CONFIGURED_FOR_THIS_PERIOD';
const REGISTRATION_NUMBER_MINIMAL_ACHIEVED = 'REGISTRATION_NUMBER_MINIMAL_ACHIEVED';
const INVALID_REGISTRATION_NUMBER = 'INVALID_REGISTRATION_NUMBER';
const Items_Exist_In_Provisonal_StockMovement = 'Items_Exist_In_Provisonal_StockMovement';
const No_Row_For_This_Inventory = 'No_Row_For_This_Inventory';
const This_Inventory_Is_Deleted = 'This_Inventory_Is_Deleted';
const This_Inventory_Is_Validated = 'This_Inventory_Is_Validated';
const Check_Items_Qty = 'Check_Items_Qty';
const DUPLICATED_EXPENSE_CODE = 'DUPLICATED_EXPENSE_CODE';
const INVALID_CIN_NUMBER = 'INVALID_CIN_NUMBER';
const Item_Without_Measure_Unit = 'Item_Without_Measure_Unit';
const INTERVIEW_START_TIME_EXCEEDS_END_TIME = 'INTERVIEW_START_TIME_EXCEEDS_END_TIME';
const WRONG_PATERN = 'WRONG_PATERN';
const FORBID_LOAN_INSTALLMENT_DELETION = 'FORBID_LOAN_INSTALLMENT_DELETION';
const LOAN_AMOUNT_EXCEEDED = 'LOAN_AMOUNT_EXCEEDED';
const TIERS_PHONE_NOT_FOUND = 'TIERS_PHONE_NOT_FOUND';
const SMS_RECEIVERS_NOT_FOUND = 'SMS_RECEIVERS_NOT_FOUND';
const NEGATIVE_LOAN_INSTALLMENT = 'NEGATIVE_LOAN_INSTALLMENT';
const NEGATIVE_LOAN_AMOUNT = 'NEGATIVE_LOAN_AMOUNT';
const MULTIPLE_CONTRACT_OR_OFFER_BONUSES_WITHOUT_END_DATE = 'MULTIPLE_CONTRACT_OR_OFFER_BONUSES_WITHOUT_END_DATE';
const OVERLAP_OF_SAME_BONUS_IN_CONTRACT_OR_OFFER = 'OVERLAP_OF_SAME_BONUS_IN_CONTRACT_OR_OFFER';
const CODE_ALREADY_EXIST = 'CODE_ALREADY_EXIST';
const TITLE_CODE_ALREADY_EXIST = 'TITLE_CODE_ALREADY_EXIST';
const SALARY_STRUCTURE_MUST_HAVE_RULE_OR_PARENT = 'SALARY_STRUCTURE_MUST_HAVE_RULE_OR_PARENT';
const CIRCULAR_RELATIONSHIP_BETWEEN_SALARY_SRTRUCTURES = 'CIRCULAR_RELATIONSHIP_BETWEEN_SALARY_SRTRUCTURES';
const Cant_Delete_Valid_Inventory = 'Cant_Delete_Valid_Inventory';
const Cant_Update_Deleted_Inventory = 'Cant_Update_Deleted_Inventory';
const Cant_Update_Valid_Inventory = 'Cant_Update_Valid_Inventory';
const NUMBER_OF_CANDIDATE_EXCEEDED = 'NUMBER_OF_CANDIDATE_EXCEEDED';
const NEGATIVE_SALARY = 'NEGATIVE_SALARY';
const There_Are_Items_Without_Measure_Unit = 'ITEMS_WITHOUT_UNIT_MEASURE';
const Cant_Update_Used_Price = 'Cant_Update_Used_Price';
const EXITDEPOSITDATE_BEFORE_HIRINGDATE = 'EXITDEPOSITDATE_BEFORE_HIRINGDATE';
const RELEASEDATE_BEFORE_HIRINGDATE = 'RELEASEDATE_BEFORE_HIRINGDATE';
const EXITDEPOSITDATE_AFTER_RELEASEDATE = 'EXITDEPOSITDATE_AFTER_RELEASEDATE';
const INTERVIEWDATE_BEFORE_HIRINGDATE = 'INTERVIEWDATE_BEFORE_HIRINGDATE';
const EXITDEPOSITDATE_AFTER_INTERVIEWDATE = 'EXITDEPOSITDATE_AFTER_INTERVIEWDATE';
const UNREACHABLE_JASPER_SERVER = 'UNREACHABLE_JASPER_SERVER';
const REQUIRED_CURRENCY = 'REQUIRED_CURRENCY';
const MONTH_NUMBER_OVERRUN = 'MONTH_NUMBER_OVERRUN';
const ACTION_NOT_ALLOWED_ON_RESIGNED_EMPLOYEE = 'ACTION_NOT_ALLOWED_ON_RESIGNED_EMPLOYEE';
const VALIDATE_RESIGNED_EMPLOYEE = 'VALIDATE_RESIGNED_EMPLOYEE';
const EMPLOYEE_EXIT_HAS_NO_EXIT_PHYSICAL_DATE = 'EMPLOYEE_EXIT_HAS_NO_EXIT_PHYSICAL_DATE';
const EMPLOYEE_HAS_SOME_CONTRACT_AFTER_EXIT_PHYSICAL_DATE = 'EMPLOYEE_HAS_SOME_CONTRACT_AFTER_EXIT_PHYSICAL_DATE';

const INTERVIEWDATE_BEFORE_RECRUITMENTCREATIONDATE = 'INTERVIEWDATE_BEFORE_RECRUITMENTCREATIONDATE';
const EMPLOYER_SALARY_RATE_EXCEEDS_LIMIT = 'EMPLOYER_SALARY_RATE_EXCEEDS_LIMIT';
const REQUIRED_CONTRACT_END_DATE = 'REQUIRED_CONTRACT_END_DATE';
const FORBID_LOAN_INSTALLMENT_UPDATE = 'FORBID_LOAN_INSTALLMENT_UPDATE';
const UPDATE_USED_PRODUCT_TYPE = 'UPDATE_USED_PRODUCT_TYPE';
const ARTICLE_ALREADY_EXIST_IN_DOCUMENT = 'ARTICLE_ALREADY_EXIST_IN_DOCUMENT';
const ALL_DELIVERY_INVOICED = 'ALL_DELIVERY_INVOICED';
const MISSING_EXPENSE_REPORT_TYPE = 'MISSING_EXPENSE_REPORT_TYPE';
const CANNOT_CLOSE_SOURCE_DEDUCTION_SESSION_WITHOUT_CLOSED_PAYSLIP_SESSION =
  'CANNOT_CLOSE_SOURCE_DEDUCTION_SESSION_WITHOUT_CLOSED_PAYSLIP_SESSION';
const CANNOT_CLOSE_SOURCE_DEDUCTION_SESSION_WITH_WRONG_OR_NOT_CALCULATED_SOURCE_DEDUCTION =
  'CANNOT_CLOSE_SOURCE_DEDUCTION_SESSION_WITH_WRONG_OR_NOT_CALCULATED_SOURCE_DEDUCTION';
const CANNOT_CLOSE_TRANSFER_ORDER_WITHOUT_CLOSED_PAYSLIP_SESSION =
  'CANNOT_CLOSE_TRANSFER_ORDER_WITHOUT_CLOSED_PAYSLIP_SESSION';
const DELETE_EMPLOYEE_ERROR = 'DELETE_EMPLOYEE_ERROR';
const INVALID_IDCITIZENSHIP = 'INVALID_IDCITIZENSHIP';
const MISSING_DATA = 'MISSING_DATA';
const CMD_INVALID = "CMD_INVALID";
const DUPLICATED_BONUS_FOR_SAME_CONTRACT = 'DUPLICATED_BONUS_FOR_SAME_CONTRACT';
const CAN_NOT_CLOSE_SESSION_IN_FUTURE = 'CAN_NOT_CLOSE_SESSION_IN_FUTURE';
const CANNOT_BROADCAST_PAYSLIP = 'CANNOT_BROADCAST_PAYSLIP';
const CANNOT_CLOSE_NOT_CLOSED_TRANSFER_ORDER = 'CANNOT_CLOSE_NOT_CLOSED_TRANSFER_ORDER';
const CANNOT_ADD_OR_UPDATE_ITEM_WITH_FODEC_TAX_ONLY = 'CANNOT_ADD_OR_UPDATE_ITEM_WITH_FODEC_TAX_ONLY'
const SPECIFIED_PATH_IS_INCORRECT = 'SPECIFIED_PATH_IS_INCORRECT';
const CANNOT_BROADCAST_FILE = 'CANNOT_BROADCAST_FILE';
const CANNOT_ADD_SALARY_STRUCTURE_WITH_PARENT_AND_WITHOUT_NEW_SALARY_RULE
  = 'CANNOT_ADD_SALARY_STRUCTURE_WITH_PARENT_AND_WITHOUT_NEW_SALARY_RULE';
const INTERVIEW_DUPLICATION = 'INTERVIEW_DUPLICATION';
const EMPLOYEE_EXIT_PHYSICAL_DATE_BEFORE_LEAVE_DATE = 'EMPLOYEE_EXIT_PHYSICAL_DATE_BEFORE_LEAVE_DATE';
const BONUS_EXISTANCE_IN_SESSION = 'BONUS_EXISTANCE_IN_SESSION';
const CANNOT_CLOSE_BILLING_SESSION = 'CANNOT_CLOSE_BILLING_SESSION';
const CANNOT_CLOSE_DELETED_SESSION = 'CANNOT_CLOSE_DELETED_SESSION';
const ALREADY_DELETED_ENTITY = 'ALREADY_DELETED_ENTITY';
const CANNOT_GENERATE_LEAVE_BALANCE = 'CANNOT_GENERATE_LEAVE_BALANCE';
const CONNECTED_USER_CANNOT_VALIDATE_HIS_REQUEST = 'CONNECTED_USER_CANNOT_VALIDATE_HIS_REQUEST';
const CANNOT_ADD_SHARED_DOCUMENT_ENTITY_WITHOUT_DOCUMENT = 'CANNOT_ADD_SHARED_DOCUMENT_ENTITY_WITHOUT_DOCUMENT';
const BONUS_VALUE_EQUAL_TO_ZERO = 'BONUS_VALUE_EQUAL_TO_ZERO';
const CANNOT_ADD_OR_UPDATE_ITEM_WITH_MANY_TAX_AMOUNT = 'CANNOT_ADD_OR_UPDATE_ITEM_WITH_MANY_TAX_AMOUNT';
const Item_Already_Exist = 'ITEM_UNICITY';
const SHELF_AND_STORAGE_ALREADY_EXISTS = 'SHELF_AND_STORAGE_ALREADY_EXISTS';
const INVALID_IDCURRENCY_EXCEL_COLUMN = 'INVALID_IDCURRENCY_EXCEL_COLUMN';
const INVALID_IDTAXEGROUPTIERS_EXCEL_COLUMN = 'INVALID_IDTAXEGROUPTIERS_EXCEL_COLUMN';
const ERROR_GROUP_TAX = 'ERROR_GROUP_TAX';
const CANNOT_CHANGE_STOCK_MANAGED_FROM_PRODUCT_TYPE = 'CANNOT_CHANGE_STOCK_MANAGED_FROM_PRODUCT_TYPE';
const COLLECTION_BRAND_MODEL_SUBMODEL_EXIST = 'COLLECTION_BRAND_MODEL_SUBMODEL_EXIST';
const VALIDATE_PREVIOUS_INVOICE_FOR_TERM_INVOICING = 'VALIDATE_PREVIOUS_INVOICE_FOR_TERM_INVOICING';
const WAREHOUSE_MUST_BE_UNIQUE_BY_WAREHOUSE_PARENT = 'WAREHOUSE_MUST_BE_UNIQUE_BY_WAREHOUSE_PARENT';
const ITEM_ALREADY_EXISTS_IN_WAREHOUSE = 'ITEM_ALREADY_EXISTS_IN_WAREHOUSE';

const IS_NOT_STARK_USER = 'IS_NOT_STARK_USER';
const IS_NOT_B2B_USER = 'IS_NOT_B2B_USER';
const USER_WITH_EMAIL_NOT_ACTIVE = 'USER_WITH_EMAIL_NOT_ACTIVE';
const UNAUTHRIZED_ERROR_MSG_PARAMS = 'UNAUTHRIZED_ERROR_MSG_PARAMS';
const USER_ALREADY_LOGGED_IN = 'USER_ALREADY_LOGGED_IN';
const CURRENT_USER_DO_NOT_HAVE_ANY_PERMISSIONS = 'CURRENT_USER_DO_NOT_HAVE_ANY_PERMISSIONS';
const USER_DONT_HAVE_PERMISSION_IN_BASE = 'USER_DONT_HAVE_PERMISSION_IN_BASE';

const ITEM_WITHOUT_TAX_ERROR = 'ITEM_WITHOUT_TAX_ERROR';
const DUPLICATE_TAXE = 'DUPLICATE_TAXE';

const USER_WITH_EMAIL_NOT_FOUND = 'USER_WITH_EMAIL_NOT_FOUND';
const NO_COMPANIES_FOR_USER = 'NO_COMPANIES_FOR_USER';
const INVALID_TOKEN = 'INVALID_TOKEN';
const CURRENT_ROLE_IN_USE = 'CURRENT_ROLE_IN_USE';
const NO_DATA_TO_RETURN = 'NO_DATA_TO_RETURN';
const COMPANY_WITH_ID_NOT_FOUND = 'COMPANY_WITH_ID_NOT_FOUND';
const COMPANY_WITH_CODE_NOT_FOUND = 'COMPANY_WITH_CODE_NOT_FOUND';
const SUB_MODULE_WITH_ID_NOT_FOUND = 'SUB_MODULE_WITH_ID_NOT_FOUND';
const ERROR_DELETE = 'ERROR_DELETE';

const EXISTING_OEM_ITEM_PER_BRAND = 'EXISTING_OEM_ITEM_PER_BRAND';
const USER_ALREADY_HAS_CASH_SESSION = 'USER_ALREADY_HAS_CASH_SESSION';
const CASH_REGISTER_OPENED = 'CASH_REGISTER_OPENED';
const NOTE_TITLE_EXIST = 'NOTE_TITLE_EXIST';
const MACHINE_EMPTY = 'MACHINE_EMPTY';
const RESPONSABLE_EMPTY = 'RESPONSABLE_EMPTY';
const CANNOT_DELETE_OF = 'CANNOT_DELETE_OF';
const CANNOT_VALIDATE_DOCUMENT_REQUEST_ENTITY_WITHOUT_DOCUMENT = 'CANNOT_VALIDATE_DOCUMENT_REQUEST_ENTITY_WITHOUT_DOCUMENT';
const USER_ALREADY_HAS_CASH_REGISTER = 'USER_ALREADY_HAS_CASH_REGISTER';
const BTOB_SERVER_IS_UNREACHABLE = 'BTOB_SERVER_IS_UNREACHABLE';
const ADD_DOCUMENT_LINE_TO_NOT_EXISTING_DOCUMENT = 'ADD_DOCUMENT_LINE_TO_NOT_EXISTING_DOCUMENT';
const DELETED_SETTLEMENT_MODE = 'DELETED_SETTLEMENT_MODE'

const DEPOSIT_INVOICE_IS_PAYED = 'DEPOSIT_INVOICE_IS_PAYED';
const UPDATE_AMOUNT_OF_RESERVED_DELEVERY ='UPDATE_AMOUNT_OF_RESERVED_DELEVERY';
const SOME_LINES_ARE_ZERO ='SOME_LINES_ARE_ZERO';
const ORDER_CONTAIN_SALES_DELIVERY ='ORDER_CONTAIN_SALES_DELIVERY';
const ORDER_AMOUNT_LESS_THAN_ADVANCE ="ORDER_AMOUNT_LESS_THAN_ADVANCE";

/**
 *
 * handle http response errors
 * */
@Injectable()
export class ErrorHandlerService implements ErrorHandler {

  // errors diactionary
  private errorActions: Array<Function>;

  /**
   * create new service instance
   * @param router
   * @param growlService
   * @param translate
   */
  constructor(private router: Router, private growlService: GrowlService, private translate: TranslateService, private datePipe: DatePipe,
    private authService: AuthService, private localStorageService : LocalStorageService) {
    this.initErrorActions();
  }

  /**
   * handel error and show error message
   * @param error
   * @param listErrorParams
   */
  public handleError(error: HttpErrorResponse, listErrorParams?: any): void {
    const httpErrorCode = error.status;
    if (!this.translate.getDefaultLang()) {
      this.translate.setDefaultLang(EN);
    }
    if (typeof this.errorActions[httpErrorCode] === FUNCTION) {
      if (listErrorParams) {
        this.errorActions[httpErrorCode](listErrorParams);
      } else if (httpErrorCode === 800) {
        this.growlService.ErrorNotification(this.translate.instant(SESSION_EXPIRED));
        setTimeout(() => {
          this.router.navigateByUrl(LOGIN_PAGE);
        }, 2000);
      } else {
        this.errorActions[httpErrorCode]();
      }
    } else {
      this.growlService.ErrorNotification(this.translate.instant(UNKNOWN_ERROR_MSG));
    }
  }

  public getErrorNotification(httpErrorCode: number, listErrorParams?: any) {
    if (listErrorParams) {
      this.errorActions[httpErrorCode](listErrorParams);
    } else {
      this.errorActions[httpErrorCode]();
    }
  }
  /**
   * init errors diactionary
   * */
  private initErrorActions() {
    // create error dictionary
    this.errorActions = new Array();
    this.errorActions[HttpStatusCodes.Unauthorized] = () => {
        this.growlService.ErrorNotification(this.translate.instant(UNAUTHRIZED_ERROR_MSG));
    };

    this.errorActions[HttpStatusCodes.MISSING_PERMISSION] = (listErrorParams?: any) => {
      if (listErrorParams) {
        let errorMEssage = `${this.translate.instant(UNAUTHRIZED_ERROR_MSG_PARAMS)}`;
        for (const param in listErrorParams) {
          if (listErrorParams.hasOwnProperty(param)) {
            errorMEssage = errorMEssage.replace('{'.concat("ACTION").concat('}'),
              this.translate.instant(listErrorParams[param].toUpperCase()));
          }
        }
        this.growlService.ErrorNotification(errorMEssage, null, null);
      }
    };
    this.errorActions[HttpStatusCodes.EMPTY_LIST] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EMPTY_LIST)}`);
    };
    // when Forbidden error action
    this.errorActions[HttpStatusCodes.Forbidden] = () => {
      this.authService.logout();
      this.growlService.ErrorNotification(this.translate.instant(FORBIDDEN_ERROR_MSG));
    };

    // when Forbidden error action
    this.errorActions[HttpStatusCodes.WarehouseQuantityMinMax] = () => {
      this.growlService.ErrorNotification(this.translate.instant(WAREHOUSE_QUANTITY_MIN_MAX));
    };
    // when ChosenPeriodOverlapsWithAnother
    this.errorActions[HttpStatusCodes.ChosenPeriodOverlapsWithAnother] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CHOSEN_PERIOD_OVERLAPS_WITH_ANOTHER));
    };

    // when License Maximum Nomber Violation
    this.errorActions[HttpStatusCodes.LicenseMaximumUsersNumberViolation] = () => {
      this.growlService.ErrorNotification(this.translate.instant(LICENSE_MAXIMUM_NUMBER_VIOLATION));
    };

    // changing WithholdingTax Company Settings
    this.errorActions[HttpStatusCodes.changingWithholdingTaxCompanySettings] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CHANGING_WITHHOLDING_TAX_COMPANY_SETTINGS));
    };

    // changing WithholdingTax Company Settings in invoice
    this.errorActions[HttpStatusCodes.paymentHasAlreadyBeenDone] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CHANGING_WITHHOLDING_TAX_COMPANY_SETTINGS_IN_INVOICE));
    };

    // When no settlement found in payment slip
    this.errorActions[HttpStatusCodes.NoSettlementFoundInPaymentSlip] = () => {
      this.growlService.ErrorNotification(this.translate.instant(NO_SETTLEMENTS_FOUND_IN_PAYMENT_SLIP));
    };

    // when Invalid License with expiration date param
    this.errorActions[HttpStatusCodes.InvalidLicense] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(INVALID_LICENSE)}`;
      if (listErrorParams && listErrorParams.EXPIRATION_DATE) {
        errorMEssage = `${this.translate.instant(INVALID_LICENSE_WITH_EXPIRATION_DATE_PARAM)}`;
        errorMEssage = errorMEssage.replace('{EXPIRATION_DATE}',
          pipe.transform(new Date(listErrorParams.EXPIRATION_DATE), 'dd/MM/yyyy'));
      }

      this.growlService.ErrorNotification(errorMEssage);
    };

    // when SessionExpired action
    this.errorActions[HttpStatusCodes.SessionExpired] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SESSION_EXPIRED));
      setTimeout(() => {
        window.location.href = LOGIN_PAGE;
      }, 2000);
    };

    // when BadRequest error action
    this.errorActions[HttpStatusCodes.BadRequest] = () => {
      this.growlService.ErrorNotification(this.translate.instant(BADREQUEST_ERROR_MSG));
    };

    // when Employee Recursivity Violation action
    this.errorActions[HttpStatusCodes.EmployeeRecursivityViolation] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EMPLOYEE_RECURSIVITY_VIOLATION));
    };

    // when BadGateway error action
    this.errorActions[HttpStatusCodes.BadGateway] = () => {
      this.growlService.ErrorNotification(this.translate.instant(BADGATEWAY_ERROR_MSG));
    };

    // when Ecommerce error action
    this.errorActions[HttpStatusCodes.EcommerceException] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ECOMMERCE_BADGATEWAY_ERROR_MSG));
    };
    // when Ecommerce in progress action
    this.errorActions[HttpStatusCodes.EcommerceInProgressException] = () => {
      this.growlService.warningNotification(this.translate.instant(ECOMMERCE_IN_PROGRESS_EXCEPTION));
    };

    // when NotFound error action
    this.errorActions[HttpStatusCodes.NotFound] = () => {
      this.growlService.ErrorNotification(this.translate.instant(NOTFOUND_ERROR_MSG));
    };
    // when sms server return error
    this.errorActions[HttpStatusCodes.SMSServerError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SMS_SERVER_ERROR));
    };

    // when UnsupportedMediaType error action
    this.errorActions[HttpStatusCodes.UnsupportedMediaType] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UNSUPPORTED_MEDIA_TYPE_ERROR_MSG));
    };
    // when Conflict error action
    this.errorActions[HttpStatusCodes.Conflict] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CONFLICT_ERROR_MSG));
    };

    // when RequestTimeout error action
    this.errorActions[HttpStatusCodes.RequestTimeout] = () => {
      this.growlService.ErrorNotification(this.translate.instant(REQUEST_TIMEOUT_ERROR_MSG));
    };

    // when RequestUriTooLong error action
    this.errorActions[HttpStatusCodes.RequestUriTooLong] = () => {
      this.growlService.ErrorNotification(this.translate.instant(REQUEST_URI_TOO_LONG));
    };

    // when InternalServerError error action
    this.errorActions[HttpStatusCodes.InternalServerError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(INTERNAL_SERVER_ERROR_MSG));
    };

    // this exception is throw when no invoice found to the selected financial commitment
    this.errorActions[HttpStatusCodes.NoInvoiceAssociateToTheFinancialCommitment] = () => {
      this.growlService.ErrorNotification(this.translate.instant(NO_INVOICE_ASSOCIATE_TO_THE_FINANCIAL_COMMITMENT));
    };

    // this exception is throw when no contact found for the tiers to who we want to send the revivial mail
    this.errorActions[HttpStatusCodes.NoTiersContactFoundToSendRevivialMail] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(NO_TIERS_CONTACT_FOUND_TO_SEND_REVIVIAL_MAIL)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };


    // when VALIDATE_SUBSEQUENT_INVOICES error action
    this.errorActions[HttpStatusCodes.VALIDATE_SUBSEQUENT_INVOICES] = () => {
      this.growlService.ErrorNotification(this.translate.instant(VALIDATE_SUBSEQUENT_INVOICES));
    };

    // when VALIDATE_PREVIOUS_INVOICES error action
    this.errorActions[HttpStatusCodes.VALIDATE_PREVIOUS_INVOICES] = () => {
      this.growlService.ErrorNotification(this.translate.instant(VALIDATE_PREVIOUS_INVOICES));
    };

    // when adding futur category with date inferior to today's date
    this.errorActions[HttpStatusCodes.InvalidObjectifExpectedDate] = () => {
      this.growlService.ErrorNotification(`${(this.translate.instant(INVALID_FUTUR_OBJECTIF_DATE))}`);
    };

    // when adding futur formation with date inferior to today's date
    this.errorActions[HttpStatusCodes.InvalidFormationExpectedDate] = () => {
      this.growlService.ErrorNotification(`${(this.translate.instant(INVALID_FUTUR_FORMATION_DATE))}`);
    };

    // when VALIDATE_PREVIOUS_BL error action
    this.errorActions[HttpStatusCodes.VALIDATE_PREVIOUS_BL] = () => {
      this.growlService.ErrorNotification(this.translate.instant(VALIDATE_PREVIOUS_BL));
    };

    // when ClientRquiredError error action
    this.errorActions[HttpStatusCodes.ClientRquiredError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ClientRquiredError));
    };

    // when SupplierRquiredError error action
    this.errorActions[HttpStatusCodes.SupplierRquiredError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SupplierRquiredError));
    };

    // when TaxItemValueError error action
    this.errorActions[HttpStatusCodes.TaxItemValueError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(TaxItemValueError));
    };

    // when ClientCurrencyError error action
    this.errorActions[HttpStatusCodes.ClientCurrencyError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ClientCurrencyError));
    };

    // when SupplierCurrencyError error action
    this.errorActions[HttpStatusCodes.SupplierCurrencyError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SupplierCurrencyError));
    };

    // when InvalidExcelFormat error action
    this.errorActions[HttpStatusCodes.InvalidExcelFormat] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INVALID_EXCEL_FORMAT)}`);
    };

    // when Warehouse is required
    this.errorActions[HttpStatusCodes.DepotObligatoire] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(WAREHOUSE_REQUIRED)}`);
    };

    // when Warehouse is required
    this.errorActions[HttpStatusCodes.ValidationOfDocumentWithStockReservation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(VALIDATION_OF_DOCUMENT_WITH_STOCK_RESERVATION_ERROR_MSG)}`);
    };

    // INSUFFICIENT_QUANTITY
    this.errorActions[HttpStatusCodes.InsufficientQuantity] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INSUFFICIENT_QUANTITY)}`);
    };

    // when Overlap Discount with other error action
    this.errorActions[HttpStatusCodes.OverlapTarif] = (listErrorParams?: any) => {

      let overlapLastPart = `${this.translate.instant(OVERLAP_TARIF_ERROR)}`;
      let overlapFirstPart = '';
      let isCouple = false;
      let customerValue = '';
      let itemValue = '';
      if (listErrorParams.hasOwnProperty(THE_CUSTOMER) && listErrorParams.hasOwnProperty(THE_ITEM)) {
        overlapFirstPart = `${this.translate.instant(THE_COUPLE_CUSOMER_ITEM)}`;
        itemValue = listErrorParams[THE_ITEM];
        customerValue = listErrorParams[THE_CUSTOMER];
        isCouple = true;
      } else if (listErrorParams.hasOwnProperty(THE_ITEM)) {
        itemValue = listErrorParams[THE_ITEM];
        overlapFirstPart = `${this.translate.instant(THE_ITEM)}`;
      } else if (listErrorParams.hasOwnProperty(THE_CUSTOMER)) {
        customerValue = listErrorParams[THE_CUSTOMER];
        overlapFirstPart = `${this.translate.instant(THE_CUSTOMER)}`;
      }

      let errorMEssage;
      if (isCouple) {
        errorMEssage = overlapFirstPart.concat(' ', itemValue, ' ',
          `${this.translate.instant(SharedConstant.LOGIC_AND.toUpperCase())}`, ' ', customerValue, ' ', overlapLastPart);
      } else {
        errorMEssage = overlapFirstPart.concat(' ', itemValue, customerValue, ' ', overlapLastPart);
      }
      this.growlService.ErrorNotification(errorMEssage);

    };
    // when Overlap PriceDetail error action
    this.errorActions[HttpStatusCodes.OverlapPriceDetail] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OVERLAP_PRICE_DETAIL_ERROR)}`);
    };

    // when Pricedetail Percentage not in range error action
    this.errorActions[HttpStatusCodes.ValueDiscountePrices] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(VALUE_DISCOUNTE_PRICES)}`);
    };
    this.errorActions[HttpStatusCodes.RequiredCurrency] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REQUIRED_CURRENCY)}`);
    };
    // when OverlapTarif error action
    this.errorActions[HttpStatusCodes.VALID_ASSOCIATED_INVOICE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(VALID_ASSOCIATED_INVOICE)}`);
    };

    this.errorActions[HttpStatusCodes.INVALID_SATATUS_DOCUMENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INVALID_SATATUS_DOCUMENT)}`);
    };

    this.errorActions[HttpStatusCodes.ITEM_NOT_EXIST_IN_WARHOUSE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ITEM_NOT_EXIST_IN_WARHOUSE)}`);
    };
    this.errorActions[HttpStatusCodes.DOCUMENT_IS_IMPORTED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_IS_IMPORTED)}`);
    };
    this.errorActions[HttpStatusCodes.UPDATE_PURCHASE_DELIVERY_QUANTITY] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(UPDATE_PURCHASE_DELIVERY_QUANTITY)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.warningNotification(errorMEssage);
    };

    this.errorActions[HttpStatusCodes.InsufficientQuantityForItem] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(INSUFFICIENT_QUANTITY_FOR_ITEM)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    // when Forbidden duplicated entry
    this.errorActions[HttpStatusCodes.duplicateEntry] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATE_ENTRY)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'),
          this.translate.instant(listErrorParams[paramName][0].toUpperCase()));
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    // when the date input is invalid
    this.errorActions[HttpStatusCodes.invalidDateValueException] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(INVALID_DATE_EXCEPTION)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'),
          this.translate.instant(listErrorParams[paramName][0].toUpperCase()));
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    // when intervention date and delivery date is null or invalid
    this.errorActions[HttpStatusCodes.InterventionOrDeliveryDateRequired] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(INTERVENTION_OR_DELIVERY_DATE_REQUIRED)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'),
          this.translate.instant(listErrorParams[paramName][0].toUpperCase()));
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    // when BSDeleteOrEditLineViolation error action
    this.errorActions[HttpStatusCodes.BSDeleteOrEditLineViolation] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(ITEM_IS_ALREADY_INVOICED)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // when InvalidExcelData error action
    this.errorActions[HttpStatusCodes.InvalidExcelData] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(INVALID_EXCEL_DATA)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // when Excel RequiredColumn is null or empty error action
    this.errorActions[HttpStatusCodes.ExcelRequiredColumn] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EXCEL_REQUIRED_COLUMN)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // when Excel UniqueColumnInDB is duplicated
    this.errorActions[HttpStatusCodes.ExcelUniqueColumnInDB] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EXCEL_UNIQUE_COLUMN_IN_DB)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // when Excel UniqueColumnInFile is duplicated
    this.errorActions[HttpStatusCodes.ExcelUniqueColumnInFile] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EXCEL_UNIQUE_COLUMN_IN_FILE)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // when Excel Invalid Email Column is duplicated
    this.errorActions[HttpStatusCodes.ExcelInvalidEmailColumn] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EXCEL_INVALID_EMAIL_COLUMN)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    // when dependency dates violated
    this.errorActions[HttpStatusCodes.ContractDatesDependency] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(CONTRACTS_DATES_DEPENDENCY)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'),
          this.translate.instant(listErrorParams[paramName].toUpperCase()));
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // when dependency dates violated
    this.errorActions[HttpStatusCodes.DatesDependency] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(DATES_DEPENDENCY)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'),
          this.translate.instant(listErrorParams[paramName].toUpperCase()));
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    // when invalid delete entity
    this.errorActions[HttpStatusCodes.DeleteError] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(DELETE_ERROR)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'),
          this.translate.instant(listErrorParams[paramName].toUpperCase()));
      }
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_DELETE_ERROR));
    };
    // when article without supplier
    this.errorActions[HttpStatusCodes.SetSupplierToItem] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SET_SUPPLIER_TO_ITEMS));
    };

    // article without supplier(.net back)
    this.errorActions[HttpStatusCodes.SetSupplierToItems] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SET_SUPPLIER_TO_ITEMS));
    };

    // When the calcul of expected duration failed
    this.errorActions[HttpStatusCodes.OperationExpectedDurationFailed] = () => {
      this.growlService.ErrorNotification(this.translate.instant(OPERATION_EXPECTED_DURATION_FAILED));
    };

    // when interview requested to candidate deleting
    this.errorActions[HttpStatusCodes.DeleteInterviewViolation] = () => {
      this.growlService.ErrorNotification(this.translate.instant(DELETE_INTERVIEW_VIOLATION));
    };

    // when article with type service in provisionning
    this.errorActions[HttpStatusCodes.ProductType] = () => {
      this.growlService.ErrorNotification(this.translate.instant(INCORRECT_PRODUCT_TYPE));
    };

    // when trying to update candidacy that have one or more interviews
    this.errorActions[HttpStatusCodes.UpdateCandidacyWithInterviews] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UPDATE_CANDIDACY_WITH_INTERVIEWS_ERROR));
    };

    // when trying to update evaluation that have one or more offers sende, accepted or rejected
    this.errorActions[HttpStatusCodes.UpdateEvaluationWithSendedOffers] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UPDATE_EVALUATION_WITH_SENDED_OFFERS_ERROR));
    };

    // when trying to update candidacy that have one or more offers sende, accepted or rejected
    this.errorActions[HttpStatusCodes.UpdateCandidacyWithSendedOffers] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UPDATE_CANDIDACY_WITH_SENDED_OFFERS_ERROR));
    };

    // when trying to update candidacy that have one or more offers sende, accepted or rejected
    this.errorActions[HttpStatusCodes.UpdateInterviewWithSendedOffers] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UPDATE_INTERVIEW_WITH_SENDED_OFFERS_ERROR));
    };

    // when trying to set a negative quantity
    this.errorActions[HttpStatusCodes.PositiveQuantityViolation] = () => {
      this.growlService.ErrorNotification(this.translate.instant(POSITIVE_QUANTITY_VIOLATION_ERROR));
    };

    // when already affected element
    this.errorActions[HttpStatusCodes.AlreadyAffectedElement] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ALREADY_AFFECTED_ELEMENT));
    };
    // when settlement amount is zero
    this.errorActions[HttpStatusCodes.SettlementAmountIsZero] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SETTLEMENT_AMOUNT_IS_ZERO));
    };
    // when settlement amount is Greater Than Selected Commitment
    this.errorActions[HttpStatusCodes.SettlementAmountIsGreaterThanSelectedCommitment] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SETTLEMENT_AMOUNT_IS_GREATER_THAN_COMMITMENT));
    };
    // when financial commitment allocated amount is Greater Than Remaining
    this.errorActions[HttpStatusCodes.FinancialCommitmentAllocatedAmountGreaterThanRemaining] = () => {
      this.growlService.ErrorNotification(this.translate.instant(FINANCIAL_COMMITMENT_ALLOCATED_AMOUNT_IS_GREATER_THAN_REMAINING));
    };
    // When the attendances of one employee exceed company number days of work
    this.errorActions[HttpStatusCodes.ATTENDANCE_VALUE_EXCEED] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(ATTENDANCE_VALUE_EXCEED)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // When add an duplicate skills
    this.errorActions[HttpStatusCodes.DuplicateSkillsException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATE_SKILLS_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // When add an duplicate item
    this.errorActions[HttpStatusCodes.DuplicatedItem] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATED_ITEM)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // When add an duplicate operation
    this.errorActions[HttpStatusCodes.DuplicatedOperation] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATED_OPERATION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // When item quantity is not available in garage warehouse
    this.errorActions[HttpStatusCodes.ItemNotAvailableInGarageWarehouse] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(ITEM_NOT_AVAILABLE_IN_GARAGE_WAREHOUSE)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    // throw error when the user try to change the warehouse associated to the garage while there is at least one intervention not closed
    this.errorActions[HttpStatusCodes.InterventionNotClosed] = () => {
      this.growlService.ErrorNotification(`${this.translate.
        instant(GARAGE_WARHOUSE_CONNOT_BE_MODIFIED)}`);
    };
    // When post has no name
    this.errorActions[HttpStatusCodes.PostHasNoName] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(POST_HAS_NO_NAME)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // When update a worker grade affected to garage
    this.errorActions[HttpStatusCodes.WorkerGradeCannotBeModified] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(WORKER_GRADE_CONNOT_BE_MODIFIED)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
      // When delete intervention in progress
      this.errorActions[HttpStatusCodes.InterventionInProgress] = (params?: any) => {
        let errorMEssage = `${this.translate.instant(INTERVENTION_IN_PROGRESS)}`;
        for (const param in params) {
          if (params.hasOwnProperty(param)) {
            errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
              this.translate.instant(params[param].toUpperCase()));
          }
        }
        this.growlService.ErrorNotification(errorMEssage, null, null);
      };
       // When delete intervention completed
       this.errorActions[HttpStatusCodes.InterventionCompleted] = (params?: any) => {
        let errorMEssage = `${this.translate.instant(INTERVENTION_COMPLETED)}`;
        for (const param in params) {
          if (params.hasOwnProperty(param)) {
            errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
              this.translate.instant(params[param].toUpperCase()));
          }
        }
        this.growlService.ErrorNotification(errorMEssage, null, null);
      };
     // When delete intervention in progress
     this.errorActions[HttpStatusCodes.InterventionInProgress] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(INTERVENTION_IN_PROGRESS)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
     // When delete intervention completed
     this.errorActions[HttpStatusCodes.InterventionCompleted] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(INTERVENTION_COMPLETED)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
     // When send sms
     this.errorActions[HttpStatusCodes.InvalidSendSmsDateHour] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(INVALID_SEND_SMS_DATE_HOUR)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // When the file extension is not supported
    this.errorActions[HttpStatusCodes.FileExtensionNotSupported] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FILE_EXTENSION_NOT_SUPPORTED)}`);
    };
    // When delete intervention completed
    this.errorActions[HttpStatusCodes.DuplicatePrincipaleCashRegisterName] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATE_PRINCIPALE_CASH_REGISTER_NAME)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
     // When delete intervention completed
     this.errorActions[HttpStatusCodes.DuplicateReceipeOrExpenseCashRegisterName] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATE_RECEIPE_OR_EXPENSE_CASH_REGISTER_NAME)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // When the file extension is not supported
    this.errorActions[HttpStatusCodes.CustomerVehicleUpdate] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CUSTOMER_VEHICLE_UPDATE)}`);
    };
    // When add an duplicate formation to the review-form
    this.errorActions[HttpStatusCodes.DuplicateFormationException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATE_FORMATION_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // When attempt to include an employee who havenot payslip for specific month
    this.errorActions[HttpStatusCodes.EMPLOYEE_HAVENOT_PAYSLIP] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(EMPLOYEE_HAVENOT_PAYSLIP)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /* When the CNSS Exploitation code length is different to required length */
    this.errorActions[HttpStatusCodes.CNSS_EXPLOITATION_CODE_INCORRECT] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(CNSS_EXPLOITATION_CODE_INCORRECT)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /* When the employee cnss number length is different to required length */
    this.errorActions[HttpStatusCodes.EMPLOYEE_CNSS_NUMBER_INCORRECT] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(EMPLOYEE_CNSS_NUMBER_INCORRECT)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /* Cnss teledeclaration file generation error */
    this.errorActions[HttpStatusCodes.CNSS_TELE_DECLARATION_ERROR] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CNSS_TELE_DECLARATION_ERROR)}`);
    };
    /* When the company Cnss Affiliation number length is different to required length */
    this.errorActions[HttpStatusCodes.COMPANY_CNSS_AFFILIATION_INCORRECT] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(COMPANY_CNSS_AFFILIATION_INCORRECT)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /* When the employee identity piece length is different to required length */
    this.errorActions[HttpStatusCodes.EMPLOYEE_IDENTITY_PIECE_INCORRECT] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(EMPLOYEE_IDENTITY_PIECE_INCORRECT)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // when Employee Recursivity Violation action
    this.errorActions[HttpStatusCodes.EmployeeRecursivityViolation] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EMPLOYEE_RECURSIVITY_VIOLATION)}`;
      // tslint:disable-next-line:forin
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    /** When any teledeclaration parameter exceed the required length */
    this.errorActions[HttpStatusCodes.PARAMETER_LENGTH_EXCEED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(PARAMETER_LENGTH_EXCEED)}`);
    };

    /** When there are no warehouse of the garage */
    this.errorActions[HttpStatusCodes.GarageWareouseNotExist] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(GARAGE_WAREOUSE_NOT_EXIST)}`);
    };
    /** When there are no warehouse of the garage */
    this.errorActions[HttpStatusCodes.NoItemAndOperationNotExistToGenerateInvoice] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_ITEM_AND_OPERATION_NOT_EXIST_TO_GENERATE_INVOICE)}`);
    };
    /** When there are  opeartion which state are not completede */
    this.errorActions[HttpStatusCodes.ThereAreOperationWhichAreNotCompleted] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(THERE_ARE_OPERATION_WHICH_ARE_NOT_COMPLETED)}`);
    };
    /** When there are related operationType to the unit */
    this.errorActions[HttpStatusCodes.UnityCannotBeModified] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UNITY_CANNOT_BE_MODIFIED)}`);
    };
    /** When there are related operation to the operationType */
    this.errorActions[HttpStatusCodes.OperationTypeCannotBeModified] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OPERATION_TYPE_CANNOT_BE_MODIFIED)}`);
    };
    /** When there are related Intervention to the Opeartion */
    this.errorActions[HttpStatusCodes.OperationCannotBeModified] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OPERATION_CANNOT_BE_MODIFIED)}`);
    };

    // when add same warehouse in item section
    this.errorActions[HttpStatusCodes.WarehouseUnicity] = () => {
      this.growlService.ErrorNotification(this.translate.instant(WAREHOUSE_UNICITY));
    };
    // When the session number is not unique per month
    this.errorActions[HttpStatusCodes.SESSION_NUMBER_NOT_UNIQUE] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SESSION_NUMBER_UNIQUE));
    };
    // When attempt to generate cnss declaration for one month of select trimester does not have a session
    this.errorActions[HttpStatusCodes.CNSS_DECLARATION_ERROR] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CNSS_DECLARATION_ERROR));
    };
    // when PriceRequest contains two tiersPriceRequest with the same Supplier Id
    this.errorActions[HttpStatusCodes.TiersPriceRequestUnicity] = () => {
      this.growlService.ErrorNotification(this.translate.instant(TIERS_PRICE_REQUEST_UNICITY));
    };
    // When attempt to include one contract in two different transfer order
    this.errorActions[HttpStatusCodes.CONTRACT_BY_TRANSFER_ORDER_UNICITY] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CONTRACT_BY_TRANSFER_ORDER_UNICITY));
    };
    // when List Equivalence has different guid from the current item
    this.errorActions[HttpStatusCodes.IncompatibleEquivalenceGroup] = () => {
      this.growlService.ErrorNotification(this.translate.instant(INCOMPATIBLE_EQUIVALENCE_GROUPE));
    };

    // when generating price request contact ters is required
    this.errorActions[HttpStatusCodes.ContactRequired] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CONTACT_REQUIRED));
    };

    // when invalid send mail
    this.errorActions[HttpStatusCodes.SendMailError] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(SEND_MAIL_ERROR)}`;
      for (const paramName in listErrorParams) {
        for (const tiers of listErrorParams[paramName]) {
          errorMEssage = errorMEssage.concat(' \n - ').concat(tiers.Name);
        }
      }
      errorMEssage = errorMEssage.concat(' \n ');
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_SEND_MAIL_ERROR));
    };

    // when invalid generate price request
    this.errorActions[HttpStatusCodes.GeneratePriceRequestError] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(GENERATE_PRICE_REQUEST_ERROR)}`;
      for (const paramName in listErrorParams) {
        for (const name of listErrorParams[paramName]) {
          errorMEssage = errorMEssage.concat(' \n - ').concat(name);
        }
      }
      errorMEssage = errorMEssage.concat(' \n ');
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_GENERATE_PRICE_REQUEST_ERROR));
    };

    // when  tiers phone numbers not found
    this.errorActions[HttpStatusCodes.TiersPhoneNotFound] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(TIERS_PHONE_NOT_FOUND)}`;
      // tslint:disable-next-line:forin
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    // when payslip preview error is generated
    this.errorActions[HttpStatusCodes.PAYSLIP_PREVIEW] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(PAYSLIP_PREVIEW_NOT_GENERATED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_CODE_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_CODE_EXISTS, { code: params[0] })}`);
    };


    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_AMOUNT_CODE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_AMOUNT_NOT_VALID)}`);
    };

    this.errorActions[HttpStatusCodes.SmsReceiversNotFound] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(SMS_RECEIVERS_NOT_FOUND)}`);
    };

    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_DELETED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_DELETED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_MANUALLY_UPDATED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant
        (DOCUMENT_ACCOUNT_COMING_FROM_CLOSING_FISCAL_YEAR_CANNOT_BE_MANUALLY_UPDATED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_COMING_FROM_BILL_CANNOT_BE_DELETED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_COMING_FROM_BILL_CANNOT_BE_DELETED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_CONTAINS_RECONCILABLE_LINES_CANNOT_BE_DELETED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_CONTAINS_RECONCILABLE_LINES_CANNOT_BE_DELETED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_CONTAINS_LETTERED_LINES_CANNOT_BE_DELETED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_CONTAINS_LETTERED_LINES_CANNOT_BE_DELETED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_COMING_FROM_A_BILL_CANNOT_BE_MANUALLY_UPDATED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_COMING_FROM_A_BILL_CANNOT_BE_MANUALLY_UPDATED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_MISSING_PARAMETERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_MISSING_PARAMETERS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_FILE_CREATION_FAIL] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_FILE_CREATION_FAIL)}`);
    };


    this.errorActions[HttpAccountErrorCodes.START_DATE_IS_AFTER_END_DATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(START_DATE_IS_AFTER_END_DATE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_OLD_FORMAT_NOT_SUPPORTED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_OLD_FORMAT_NOT_SUPPORTED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_OOXML_FORMAT_NOT_SUPPORTED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_OOXML_FORMAT_NOT_SUPPORTED)}`);
    };

    this.errorActions[HttpAccountErrorCodes.YOU_MUST_CHOOSE_FOR_THE_THE_SAME_LETTER_SINGLE_ACCOUNT] = (params?: any) => {
      this.growlService.ErrorNotification(`${this.translate.instant(YOU_MUST_CHOOSE_FOR_THE_THE_SAME_LETTER_SINGLE_ACCOUNT,
        { letter: params[0].letter })}`);
    };

    this.errorActions[HttpAccountErrorCodes.TOTAL_DEBIT_SHOULD_BE_EQUAL_TO_TOTAL_CREDIT_FOR_ACCOUNT_AND_LETTER] = (params?: any) => {
      this.growlService.ErrorNotification(`${this.translate.instant(TOTAL_DEBIT_SHOULD_BE_EQUAL_TO_TOTAL_CREDIT_FOR_ACCOUNT_AND_LETTER, {
        account: params[0].account,
        letter: params[0].letter
      })}`);
    };

    this.errorActions[HttpAccountErrorCodes.CHOSEN_LETTERING_CODE_ALREADY_EXISTS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHOSEN_LETTERING_CODE_ALREADY_EXISTS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_CANT_UPDATE_DOCUMENT_IN_CLOSED_PERIOD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_CANT_UPDATE_DOCUMENT_IN_CLOSED_PERIOD)}`);
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    };

    this.errorActions[HttpAccountErrorCodes.TARGET_FISCAL_YEAR_NON_EXISTENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TARGET_FISCAL_YEAR_NON_EXISTENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.CURRENT_FISCAL_YEAR_NON_EXISTENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CURRENT_FISCAL_YEAR_NON_EXISTENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_ERROR_PARSING_LOCAL_DATE_OBJECT] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_ERROR_PARSING_LOCAL_DATE_OBJECT, { fieldName: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.RESULT_ACCOUNT_NON_EXISTENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(RESULT_ACCOUNT_NON_EXISTENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_REPORT_TEMPLATES_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_REPORT_TEMPLATES_NOT_FOUND)}`);
    };

    this.errorActions[HttpAccountErrorCodes.BEGIN_ACCOUNT_CODE_IS_GREATER_THAN_END_ACCOUNT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BEGIN_ACCOUNT_CODE_IS_GREATER_THAN_END_ACCOUNT)}`);
    };

    this.errorActions[HttpAccountErrorCodes.ACCOUNT_CODE_LENGTH_INVALID] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_CODE_LENGTH_INVALID)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNTING_CONFIGURATION_MISSING_PARAMETERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNTING_CONFIGURATION_MISSING_PARAMETERS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNTING_CONFIGURATION_CATEGORY_NOT_FOUND] = () => {
        this.growlService.warningNotification(`${this.translate.instant(ACCOUNTING_CONFIGURATION_CATEGORY_NOT_FOUND)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_NOT_IN_FISCAL_YEAR] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(this.translate.instant(DOCUMENT_ACCOUNT_NOT_IN_FISCAL_YEAR, { currentFiscalYear: params[0] }));
      setTimeout(() => {
        this.router.navigateByUrl(DocumentAccountConstant.LIST_DOCUMENT_ACCOUNT_URL);
      }, 2000);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNTING_CONFIGURATION_DEPRECITION_PERIOD_UNAFFECTED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNTING_CONFIGURATION_DEPRECITION_PERIOD_UNAFFECTED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DATE_CESSION_NULL] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DATE_CESSION_NULL)}`);
    };
    this.errorActions[HttpAccountErrorCodes.RESOURCE_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(RESOURCE_NOT_FOUND)}`);
    };
    this.errorActions[HttpAccountErrorCodes.TRYING_TO_SORT_USING_NON_EXISTENT_FIELD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TRYING_TO_SORT_USING_NON_EXISTENT_FIELD)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DATE_CESSION_OUT_OF_SERVICE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DATE_CESSION_OUT_OF_SERVICE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.TEMPLATE_ACCOUNTING_MISSING_PARAMETERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TEMPLATE_ACCOUNTING_MISSING_PARAMETERS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.TEMPLATE_ACCOUNTING_LABEL_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(TEMPLATE_ACCOUNTING_LABEL_EXISTS, { label: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXPORT_COULD_NOT_CREATE_DIRECTORY_FOR_FILES] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXPORT_COULD_NOT_CREATE_DIRECTORY_FOR_FILES)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_ERROR_WHILE_READING_FILE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_ERROR_WHILE_READING_FILE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_NO_ACCOUNTS_TO_BE_SAVED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_NO_ACCOUNTS_TO_BE_SAVED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_NO_JOURNALS_TO_BE_SAVED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_NO_JOURNALS_TO_BE_SAVED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_NO_ACCOUNTING_TEMPLATES_TO_BE_SAVED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_NO_ACCOUNTING_TEMPLATES_TO_BE_SAVED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_ERROR_DOWNLOADING_THE_FILE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_ERROR_DOWNLOADING_THE_FILE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_INVALID_HEADERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_INVALID_HEADERS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_EMPTY_FILE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_EMPTY_FILE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_INVALID_CONTENT_FORMAT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_INVALID_CONTENT_FORMAT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_INVALID_ROW] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_INVALID_ROW, { sheetName: params[0], rowNumber: params[1] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_FIRST_ROW_SHOULD_CONTAIN_DOCUMENT_INFORMATION] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_FIRST_ROW_SHOULD_CONTAIN_DOCUMENT_INFORMATION,
        { sheetName: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_NOT_OPENED_OPERATION_NOT_ALLOWED] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_NOT_OPENED_OPERATION_NOT_ALLOWED,
        { fiscalYear: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.JOURNAL_A_NEW_TO_REMOVE_CONTAINS_LETTERED_LINES] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_A_NEW_TO_REMOVE_CONTAINS_LETTERED_LINES,
        { fiscalYear: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_HEADER_SHOULD_BE_IN_FIRST_ROW] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_HEADER_SHOULD_BE_IN_FIRST_ROW, { sheetName: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_HEADER_SHOULD_START_IN_FIRST_CELL] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_HEADER_SHOULD_START_IN_FIRST_CELL, { sheetName: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_NO_FOLDER_FOR_GENERATED_REPORTS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_NO_FOLDER_FOR_GENERATED_REPORTS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_FILE_LOCKED_BY_PASSWORD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_FILE_LOCKED_BY_PASSWORD)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_FILE_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_FILE_NOT_FOUND)}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_INVALID_FORMULA] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_INVALID_FORMULA, { formula: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_STATE_OF_INCOME_FIELDS_MISMATCH] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_STATE_OF_INCOME_FIELDS_MISMATCH)}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_INDEX_LINE_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_INDEX_LINE_NOT_FOUND, { index: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.ACCOUNT_CODE_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_CODE_EXISTS, { code: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_TYPE_INVALID] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_TYPE_INVALID, { reportType: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_INDEX_LINE_ORDER_INVALID] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_INDEX_LINE_ORDER_INVALID, { index: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION)}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION_WITH_INDEX_FOR_THIS_REPORT_TYPE] =
      (params?: Array<string>) => {
        this.growlService.ErrorNotification(`${this.translate.instant(
          REPORT_LINE_NO_DEFAULT_REPORT_CONFIGURATION_WITH_INDEX_FOR_THIS_REPORT_TYPE, { index: params[0] })}`);
      };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_CANNOT_UPDATE_WHEN_FISCAL_YEAR_NOT_OPENED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_CANNOT_UPDATE_WHEN_FISCAL_YEAR_NOT_OPENED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.NO_ANNEX_REPORT_SUPPORTED_FOR_THIS_REPORT_TYPE] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_ANNEX_REPORT_SUPPORTED_FOR_THIS_REPORT_TYPE, { reportTypeEnum: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_ANNEX_ALREADY_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_ANNEX_ALREADY_EXISTS, { annexCode: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_FORMULA_CONTAINS_REPETITION] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_FORMULA_CONTAINS_REPETITION, { formula: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.ACCOUNT_CREDIT_DEBIT_IS_DIFFERENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_CREDIT_DEBIT_IS_DIFFERENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_CLOSING_DATE_BEFORE_END_DATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_CLOSING_DATE_BEFORE_END_DATE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_NOT_ALL_DOCUMENTS_IN_NEW_PERIOD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_NOT_ALL_DOCUMENTS_IN_NEW_PERIOD)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_CODE_DIFFERENT_THAN_PARENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_CODE_DIFFERENT_THAN_PARENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_COULD_NOT_BE_CREATED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_COULD_NOT_BE_CREATED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_IS_USED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_IS_USED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.JOURNAL_CODE_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_CODE_EXISTS, { code: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.JOURNAL_LABEL_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_LABEL_EXISTS, { label: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.JOURNAL_CONTAINS_CLOSED_LINES] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_CONTAINS_CLOSED_LINES)}`);
    };
    this.errorActions[HttpAccountErrorCodes.JOURNAL_CODE_LENGTH] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_CODE_LENGTH, { code: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_LINE_ACCOUNT_DOES_NOT_EXIST] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_LINE_ACCOUNT_DOES_NOT_EXIST,
        { accountId: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_FROM_AMORTIZATION_NOT_GENERATED_YET] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_FROM_AMORTIZATION_NOT_GENERATED_YET)}`);
    };
    this.errorActions[HttpAccountErrorCodes.NO_OPENING_BALANCE_SHEET_ACCOUNT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_OPENING_BALANCE_SHEET_ACCOUNT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.NO_CLOSING_BALANCE_SHEET_ACCOUNT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_CLOSING_BALANCE_SHEET_ACCOUNT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_DOES_NOT_EXIST_ALLOCATION_NOT_POSSIBLE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_DOES_NOT_EXIST_ALLOCATION_NOT_POSSIBLE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_RELATION_TYPE_INVALID] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_RELATION_TYPE_INVALID)}`);
    };
    this.errorActions[HttpAccountErrorCodes.UPDATING_FISCAL_YEAR_THAT_IS_NOT_OPENED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATING_FISCAL_YEAR_THAT_IS_NOT_OPENED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.UPDATING_FISCAL_YEAR_THAT_IS_CONCLUDED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATING_FISCAL_YEAR_THAT_IS_CONCLUDED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.UPDATING_FISCAL_YEAR_THAT_IS_NOT_LAST] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATING_FISCAL_YEAR_THAT_IS_NOT_LAST)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_RELATION_TYPE_DUPLICATES] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_RELATION_TYPE_DUPLICATES)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_RELATION_IMPLEMENTATION_NONEXISTENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_RELATION_IMPLEMENTATION_NONEXISTENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.JOURNAL_MISSING_PARAMETERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_MISSING_PARAMETERS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.JOURNAL_NO_JOURNAL_A_NEW] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_NO_JOURNAL_A_NEW)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_NEGATIVE_CREDIT_OR_DEBIT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_NEGATIVE_CREDIT_OR_DEBIT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_PARENT_CHART_ACCOUNT_DONT_EXIST] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_PARENT_CHART_ACCOUNT_DONT_EXIST)}`);
    };
    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_CODE_AND_LABEL_EXIST] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_CODE_AND_LABEL_EXIST)}`);
    };

    this.errorActions[HttpAccountErrorCodes.USER_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.warningNotification(`${this.translate.instant(USER_NOT_FOUND, { id: params[0] })}`
        + this.localStorageService.getEmail());
    };
    this.errorActions[HttpAccountErrorCodes.USER_HAS_A_JOURNAL] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(USER_HAS_A_JOURNAL, { id: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_LABEL_EXISTS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_LABEL_EXISTS)}`);
    };

    this.errorActions[HttpAccountErrorCodes.NO_COMPANY_SPECIFIED_CANT_CONNECT_TO_DATA_SOURCE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_COMPANY_SPECIFIED_CANT_CONNECT_TO_DATA_SOURCE)}`);
      setTimeout(() => {
        this.router.navigateByUrl('/main/dashboard');
      }, 1000);
    };

    this.errorActions[HttpAccountErrorCodes.INVALID_COMPANY_SPECIFIED_CANT_CONNECT_TO_DATA_SOURCE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INVALID_COMPANY_SPECIFIED_CANT_CONNECT_TO_DATA_SOURCE)}`);
      setTimeout(() => {
        this.router.navigateByUrl('/main/dashboard');
      }, 1000);
    };
    this.errorActions[HttpAccountErrorCodes.NO_LANGUAGE_IS_SPECIFIED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_LANGUAGE_IS_SPECIFIED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.NO_USER_IS_SPECIFIED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_USER_IS_SPECIFIED)}`);
    };

    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_MISSING_PARAMETERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_MISSING_PARAMETERS)}`);
    };

    this.errorActions[HttpAccountErrorCodes.LABEL_MIN_LENGTH] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(LABEL_MIN_LENGTH, { length: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_WITHOUT_LINES_CODE] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_WITHOUT_LINES_CODE, { length: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_NON_EXISTENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_NON_EXISTENT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.TARGET_FISCAL_YEAR_NOT_AFTER_SELECTED_FISCAL_YEAR] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TARGET_FISCAL_YEAR_NOT_AFTER_SELECTED_FISCAL_YEAR)}`);
    };
    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_ASSETS_NOT_FOUND] = () => {
      if (GenericAccountingService.hasAccountingReadWritePermission()) {
        this.growlService.InfoNotification(`${this.translate.instant(REPORT_LINE_ASSETS_NOT_FOUND)}`);
      }
    };
    this.errorActions[HttpAccountErrorCodes.ERROR_JASPER_FILE_GENERATION] = () => {
      this.growlService.InfoNotification(`${this.translate.instant(ERROR_JASPER_FILE_GENERATION)}`);
    };
    this.errorActions[HttpAccountErrorCodes.BILL_DATE_AFTER_CURRENT_DATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BILL_DATE_AFTER_CURRENT_DATE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ASSETS_OUT_OF_SERVICE] = (params?: Array<string>) => {
      this.growlService.warningNotification(`${this.translate.instant(ASSETS_OUT_OF_SERVICE, { label: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DATE_CESSION_AFTER_DATE_COMMISSIONING] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DATE_CESSION_AFTER_DATE_COMMISSIONING)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_CANT_DELETE_DOCUMENT_IN_CLOSED_PERIOD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_CANT_DELETE_DOCUMENT_IN_CLOSED_PERIOD)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DEPRECIATION_ASSETS_NOT_ACCOUNTED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DEPRECIATION_ASSETS_NOT_ACCOUNTED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.AMORTIZATION_OF_ASSETS_NOT_FOUND] = () => {
      this.growlService.warningNotification(`${this.translate.instant(AMORTIZATION_OF_ASSETS_NOT_FOUND)}`);
    };
    this.errorActions[HttpAccountErrorCodes.NO_ASSET_IS_DEPRECIABLE_IN_THE_FISCAL_YEAR] = (params?: any) => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_ASSET_IS_DEPRECIABLE_IN_THE_FISCAL_YEAR, {
        fiscalYearName: params[0].name,
      })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_FROM_BILL_AMOUNT_TTC_EQUAL_ZERO_CANNOT_BE_GENERATED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_FROM_BILL_AMOUNT_TTC_EQUAL_ZERO_CANNOT_BE_GENERATED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_MAX_CODE_EXCEEDED] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_MAX_CODE_EXCEEDED, { max: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_NO_CHART_ACCOUNTS_TO_BE_SAVED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_NO_CHART_ACCOUNTS_TO_BE_SAVED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.EXCEL_NO_DOCUMENT_ACCOUNTS_TO_BE_SAVED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXCEL_NO_DOCUMENT_ACCOUNTS_TO_BE_SAVED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DEPRECIATION_ASSETS_FIELD_EMPTY] = (params?: any) => {
      if (GenericAccountingService.hasAccountingReadWritePermission()) {
        this.growlService.warningNotification(`${this.translate.instant(DEPRECIATION_ASSETS_FIELD_EMPTY, {
          field: this.translate.instant(params[0].field),
          label: params[0].label
        })}`);
      }
    };
    this.errorActions[HttpAccountErrorCodes.ENTITY_ACCOUNTING_FIELD_NOT_VALID] = (params?: any) => {
      this.growlService.ErrorNotification(`${this.translate.instant(ENTITY_ACCOUNTING_FIELD_NOT_VALID, {
        fieldName: this.translate.instant(params[0].fieldName),
        maxLength: params[0].maxLength,
        minLength: params[0].minLength
      })}`);
    };
    this.errorActions[HttpAccountErrorCodes.INVALID_FORMAT_EXCEPTION] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INVALID_FORMAT_EXCEPTION)}`);
    };
    this.errorActions[HttpAccountErrorCodes.HTTP_MESSAGE_NOT_READABLE_EXCEPTION] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(HTTP_MESSAGE_NOT_READABLE_EXCEPTION)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_LINE_WITH_BOTH_DEBIT_AND_CREDIT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_LINE_WITH_BOTH_DEBIT_AND_CREDIT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_DATE_INVALID] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_DATE_INVALID)}`);
    };

    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_MISSING_PARAMETERS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_MISSING_PARAMETERS, { length: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_ALREADY_USED_CANT_CHANGE_CODE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_ALREADY_USED_CANT_CHANGE_CODE)}`);
    };

    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_NO_FISCAL_YEAR] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_NO_FISCAL_YEAR, { length: params[0] })}`);
    };


    this.errorActions[HttpAccountErrorCodes.REPORT_LINE_INEXISTANT_REPORT_LINE] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(REPORT_LINE_INEXISTANT_REPORT_LINE, { id: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_INEXISTANT] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_INEXISTANT, { code: params[0] })}`);
    };

    this.errorActions[HttpAccountErrorCodes.LAST_CODE_REACHED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LAST_CODE_REACHED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.TEMPLATE_ACCOUNTING_WITHOUT_LINES_CODE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TEMPLATE_ACCOUNTING_WITHOUT_LINES_CODE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_NOT_BALANCED] = (params?: Array<string>) => {
      if (GenericAccountingService.hasAccountingReadWritePermission()) {
        this.growlService.ErrorNotification(`${this.translate.instant(ACCOUNT_NOT_BALANCED, { chartAccountCode: params[0] })}`);
      }
    };

    this.errorActions[HttpAccountErrorCodes.JOURNAL_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOURNAL_NOT_FOUND)}`);
    };

    /*FiscalYear errors*/
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_INEXISTANT_FISCAL_YEAR] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_INEXISTANT_FISCAL_YEAR)}`);
    };
    this.errorActions[HttpAccountErrorCodes.TARGET_FISCAL_YEAR_IS_CLOSED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TARGET_FISCAL_YEAR_IS_CLOSED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.PREVIOUS_FISCAL_YEARS_NOT_ALL_CONCLUDED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(PREVIOUS_FISCAL_YEARS_NOT_ALL_CONCLUDED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_MISSING_PARAMETERS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_MISSING_PARAMETERS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.CURRENT_FISCAL_YEAR_IS_NOT_CLOSED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CURRENT_FISCAL_YEAR_IS_NOT_CLOSED)}`);
    };
    this.errorActions[HttpAccountErrorCodes.START_DATE_INVALID] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(START_DATE_INVALID, { startDate: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_DATES_OVERLAP_ERROR] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_DATES_OVERLAP_ERROR,
        {
          date: this.datePipe.transform(params[NumberConstant.ZERO], this.translate.instant(SharedConstant.DATE_FORMAT)), fiscalYear: params[1]
        })}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_DATES_ORDER_INVALID] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_DATES_ORDER_INVALID)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ENTITY_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(ENTITY_NOT_FOUND, { id: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_ENTITY_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_ENTITY_NOT_FOUND, { codeDocument: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_NAME_EXISTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_NAME_EXISTS, { id: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_CLOSED] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_CLOSED, { name: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_CODE_EXISTS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_CODE_EXISTS)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_CLOSING_DATE_NULL] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_CLOSING_DATE_NULL)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_DATE_IN_CLOSED_PERIOD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_DATE_IN_CLOSED_PERIOD)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_CLOSING_INTERVAL_OVERLAP_WITH_ALREADY_CLOSED_ONE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_CLOSING_INTERVAL_OVERLAP_WITH_ALREADY_CLOSED_ONE)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_CLOSED_PERIOD_INEXISTANT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FISCAL_YEAR_CLOSED_PERIOD_INEXISTANT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_CANT_HAVE_MULTIPLE_JOURNAL_ANEW_DOCUMENTS] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(
        DOCUMENT_ACCOUNT_CANT_HAVE_MULTIPLE_JOURNAL_ANEW_DOCUMENTS, { code: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_WITHOUT_FISCAL_YEAR] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_WITHOUT_FISCAL_YEAR)}`);
    };
    this.errorActions[HttpAccountErrorCodes.FISCAL_YEAR_PREVIOUS_FISCAL_YEAR_HAS_NO_NON_LETTERED_DOCUMENT_ACCOUNT_LINES] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(
        FISCAL_YEAR_PREVIOUS_FISCAL_YEAR_HAS_NO_NON_LETTERED_DOCUMENT_ACCOUNT_LINES)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ENTITY_REFERENCED] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(ENTITY_REFERENCED, {
        className: this.translate.instant(params[0]),
        field: this.translate.instant(params[1]), message: this.translate.instant(params[2])
      })}`);
    };
    this.errorActions[HttpAccountErrorCodes.CHART_ACCOUNT_ALREADY_USED_CANT_DELETE] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHART_ACCOUNT_ALREADY_USED_CANT_DELETE, { code: params[0] })}`);
    };

    /*General ledger  errors*/
    this.errorActions[HttpAccountErrorCodes.END_AMOUNT_LESS_THAN_BEGIN_AMOUNT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(END_AMOUNT_LESS_THAN_BEGIN_AMOUNT)}`);
    };
    this.errorActions[HttpAccountErrorCodes.BEGIN_AMOUNT_OR_END_AMOUNT_FORMAT_INCORRECT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BEGIN_AMOUNT_OR_END_AMOUNT_FORMAT_INCORRECT)}`);
    };

    this.errorActions[HttpAccountErrorCodes.NO_ACCOUNT_WITH_CODE] = (params?: Array<string>) => {
      this.growlService.warningNotification(`${this.translate.instant(NO_ACCOUNT_WITH_CODE, { label: params[0] })}`);
    };
    /*Leave errors*/
    this.errorActions[HttpStatusCodes.LeaveRequestViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LEAVE_REQUEST_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.LeaveDateViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LEAVE_DATE_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.LeaveUpdateViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LEAVE_UPDATE_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.LeaveDeleteViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LEAVE_DELETE_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.LeaveDateIntervalViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LEAVE_DATE_INTERVAL_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.LeaveWithJustificationViolation] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(LEAVE_WITH_JUSTIFICATION_VIOLATION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param]));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    this.errorActions[HttpStatusCodes.ImportFile] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(VERIFICATION_IMPORT_FILE)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.NomenclatureReferenceUnique] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOMENCALTURE_REFERENCE_EXIST)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.NomenclatureProductUnique] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOMENCALTURE_PRODUCT_EXIST)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.NomenclatureProductNotExist] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOMENCLATURE_NOT_EXIST)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.NomenclatureUsedInAFabricationArrangementInProgress] = () => {
      this.growlService.warningNotification(`${this.translate.instant(NOMENCLATURE_IN_PROGRESS_FARBRICATION_ARRANGEMENT)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.NomenclatureCheckProductExistInSubProduct] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOMECLATRUE_CHECK_PRODUCT_EXIST_IN_SUB_PRODUCT)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.MachineDescriptionUnique] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(MACHINE_DESCRIPTION_EXIST)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.GammeUnique] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(GAMME_EXIST)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.AreaNotEmpty] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(AREA_NOT_EMPTY)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.SectionUsedInOperation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(SECTION_USED_IN_OPERATION)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.MachineUsedInOperation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(MACHINE_USED_IN_OPERATION)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.NomenclatureUsedInFabricationArrangement] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOMENCLATURE_USED_IN_FABRICATION_ARRANGEMENT)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.GammeUsedInFabricationArrangement] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(GAMME_USED_IN_FABRICATION_ARRANGEMENT)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.itemWithoutGamme] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ITEM_WITHOUT_GAMME)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.CANNOT_DELETE_GAMME] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_DELETE_GAMME)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.NomenclatureUsedInOtherNomenclature] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOMENCLATURE_USED_IN_OTHER_NOMENCLATURE)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.TaskIsAssigned] = () => {
      this.growlService.InfoNotification(`${this.translate.instant(TASK_IS_ASSIGNED)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.MachineNotAvailableInThatTimeFrame] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(MACHINE_NOT_AVAILABLE_IN_THAT_TIME_FRAME)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.MachineIsUsedInThisFabInTheSameTimeFrame] = () => {
      this.growlService.warningNotification(`${this.translate.instant(MACHINE_IS_USED_IN_THIS_FAB_IN_THE_SAME_TIME_FRAME)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.NoteTitleExist] = () => {
      this.growlService.warningNotification(`${this.translate.instant(NOTE_TITLE_EXIST)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.MachineEmpty] = () => {
      this.growlService.warningNotification(`${this.translate.instant(MACHINE_EMPTY)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.ResponsableEmpty] = () => {
      this.growlService.warningNotification(`${this.translate.instant(RESPONSABLE_EMPTY)}`);
    };
    this.errorActions[HttpErrorManufacturingCode.CannotDeleteOF] = () => {
      this.growlService.warningNotification(`${this.translate.instant(CANNOT_DELETE_OF)}`);
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNTING_CONFIGURATION_NO_CONFIGURATION_FOUND] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNTING_CONFIGURATION_NO_CONFIGURATION_FOUND));
    };

    this.errorActions[HttpAccountErrorCodes.ACCOUNTING_CONFIGURATION_ACCOUNTS_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNTING_CONFIGURATION_ACCOUNTS_NOT_FOUND));
    };

    this.errorActions[HttpAccountErrorCodes.ACCOUNTING_CONFIGURATION_FISCAL_YEAR_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNTING_CONFIGURATION_FISCAL_YEAR_NOT_FOUND));
    };

    this.errorActions[HttpAccountErrorCodes.ACCOUNT_SUPPLIER_DOES_NOT_EXIST] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNT_SUPPLIER_DOES_NOT_EXIST));
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_CUSTOMER_DOES_NOT_EXIST] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNT_CUSTOMER_DOES_NOT_EXIST));
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_WITHHOLDING_TAX_DOES_NOT_EXIST] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNT_WITHHOLDING_TAX_DOES_NOT_EXIST));
    };
    this.errorActions[HttpAccountErrorCodes.ACCOUNT_TAXE_DOES_NOT_EXIST] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ACCOUNT_TAXE_DOES_NOT_EXIST));
    };

    this.errorActions[HttpAccountErrorCodes.NO_ACCOUNT_PREFIXED_BY_CODE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_ACCOUNT_PREFIXED_BY_CODE)}`);
    };

    /*Change password errors*/
    this.errorActions[HttpStatusCodes.OldPasswordErrors] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CHANGE_PASSWORD_ERRORS)}`);
    };

    /*Job exception*/
    this.errorActions[HttpStatusCodes.JobAddException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOB_ADD_EXCEPTION)}`);
    };

    this.errorActions[HttpStatusCodes.NullJobAddException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NULL_JOB_ADD_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.JobUpdateException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(JOB_UPDATE_EXCEPTION)}`);
    };

    /*Recruitment process errors*/
    this.errorActions[HttpStatusCodes.RequiredEmployeeUserViolation] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(REQUIRED_EMPLOYEE_USER_VIOLATION)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    this.errorActions[HttpStatusCodes.CandidacyUnPreselectedViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANDIDACY_UNPRESELECTED_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.PreselectionToNextStepViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(PRE_SELECTION_TO_NEXT_STEP_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.InterviewToNextStepViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INTERVIEW_TO_NEXT_STEP_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.DoneRecruitmentViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DONE_RECRUITMENT_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.UpdateClosedRecruitmentViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATE_CLOSED_RECRUITMENT_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.CandidacyAddExistingCandidate] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANDIDACY_ADD_EXISTING_CANDIDATE)}`);
    };
    this.errorActions[HttpStatusCodes.AddExistingCandidate] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_CANDIDATE)}`);
    };
    this.errorActions[HttpStatusCodes.CandidacyEmptyList] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANDIDACY_EMPTY_LIST)}`);
    };
    this.errorActions[HttpStatusCodes.ObjectiveException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OBJECTIVE_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.CandidacyUnselectedViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANDIDACY_UNSELECTED_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.SelectionToNextStepViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(SELECTION_TO_NEXT_STEP_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.AddOfferViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_OFFER_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.UpdateOfferViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATE_OFFER_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.OfferToNextStepViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OFFER_TO_NEXT_STEP_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.OfferDelteViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OFFER_DELTE_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.OfferAcceptViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OFFER_ACCEPT_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.OfferRejectViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(OFFER_REJECT_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.EmptyEvaluationListViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EMPTY_EVALUATION_LIST_VIOLATION)}`);
    };
    /*Recruitment process errors*/
    this.errorActions[HttpAccountErrorCodes.BILL_ALREADY_IMPORTED] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(BILL_ALREADY_IMPORTED, { code: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.BILL_SAVE_ERROR] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BILL_SAVE_ERROR)}`);
    };
    this.errorActions[HttpAccountErrorCodes.BILL_DATE_NOT_IN_FISCAL_YEAR] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BILL_DATE_NOT_IN_FISCAL_YEAR)}`);
    };

    this.errorActions[HttpAccountErrorCodes.NULL_BILL_ACCOUNT_ID] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NULL_BILL_ACCOUNT_ID)}`);
    };
    this.errorActions[HttpAccountErrorCodes.NULL_TIER_ACCOUNT_ID] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(NULL_TIER_ACCOUNT_ID, { tier: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.LETTERING_OPERATION_IN_CLOSED_PERIOD] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(LETTERING_OPERATION_IN_CLOSED_PERIOD, { code: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_LINE_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_LINE_NOT_FOUND, { id: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.NULL_VAT_ACCOUNT_ID] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(NULL_VAT_ACCOUNT_ID, { vatName: params[0] })}`);
    };
    this.errorActions[HttpAccountErrorCodes.NULL_ARTICLE_ACCOUNT_ID] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(NULL_ARTICLE_ACCOUNT_ID, { itemName: params[0] })}`);
    };
    this.errorActions[HttpStatusCodes.ReviewEditException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REVIEW_EDITION_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.ReviewQuestionException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REVIEW_QUESTION_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.ReviewSkillsDeleteException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REVIEW_SKILLS_DELETE_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.DeleteReviewArrayException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DELETE_REVIEW_ARRAY_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.AddPeriodWithNoHoursException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_PERIOD_WITH_NO_HOURS_EXCEPTION)}`);
    };

    this.errorActions[HttpStatusCodes.NoLinesAreAdded] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_LINES_ARE_ADDED)}`);
    };
    this.errorActions[HttpStatusCodes.No_Lines_To_Be_ADDED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(No_Lines_To_Be_ADDED)}`);
    };
    this.errorActions[HttpStatusCodes.INVALID_SETTELMENT_DATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INVALID_SETTELMENT_DATE)}`);
    };
    this.errorActions[HttpStatusCodes.NO_PRINTER_INSTALLED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_PRINTER_INSTALLED)}`);
    };
    this.errorActions[HttpStatusCodes.AddExistingClaimDocumentMovement] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_PRINTER_INSTALLED)}`);
    };
    this.errorActions[HttpStatusCodes.CANNOT_IMPORT_BS_BL] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_IMPORT_BS_BL)}`);
    };
    this.errorActions[HttpStatusCodes.NoDocumentSelectedForMassValidation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_DOCUMENT_SELECTED_FOR_MASS_VALIDATION)}`);
    };
    this.errorActions[HttpStatusCodes.IMPORTED_DOCUMENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(IMPORTED_DOCUMENT)}`);
    };
    this.errorActions[HttpStatusCodes.CANNOT_DELETE_WAREHOUSE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_DELETE_WAREHOUSE)}`);
    };
    this.errorActions[HttpStatusCodes.WAREHOUSE_NAME_MUST_BE_UNIQUE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(WAREHOUSE_NAME_MUST_BE_UNIQUE)}`);
    };
    this.errorActions[HttpStatusCodes.WAREHOUSE_MUST_HAVE_PARENT] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(WAREHOUSE_MUST_HAVE_PARENT)}`);
    };

    /**
     * When attempt to specify one holliday date who is not include in period date
     */
    this.errorActions[HttpStatusCodes.HOLIDAY_DATE_NOT_INCLUDE_IN_PERIOD_DATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(HOLIDAY_DATE_NOT_INCLUDE_IN_PERIOD_DATE)}`);
    };
    /**
     * When Deleted Or Unreachable Entity
     */
    this.errorActions[HttpStatusCodes.DeletedOrUnreachableEntity] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DELETED_OR_UNREACHABLE_ENTITY)}`);
    };

    /**
     * This exception will be handled when we try to delete central warehouse from item modification
     */
    this.errorActions[HttpStatusCodes.CENTRAL_CANNOT_BE_DELETED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CENTRAL_CANNOT_BE_DELETED)}`);
    };

    /**
     * This exception will be handled when update or add provisioning with wrong cmd
     */
    this.errorActions[HttpStatusCodes.CmdInvalid] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CMD_INVALID)}`);
    };

    /**
     * When attempt to add new period who overlap another one
     */
    this.errorActions[HttpStatusCodes.OVERLAPPING_PERIOD] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(OVERLAPPING_PERIOD)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * when hours in same intervall are not contiguous
     */
    this.errorActions[HttpStatusCodes.ContiguousHoursException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(CONTIGUOUS_HOURS_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * throw when the user add the duplicate dayOff
     */
    this.errorActions[HttpStatusCodes.DuplicateDayOffException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATE_DAYOFF_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };


    /**
     * when the startTime is greater than a endTime of hour
     */
    this.errorActions[HttpStatusCodes.HoursTimeException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(HOURS_TIME_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * When the current period is not contiguous with the previous
     */
    this.errorActions[HttpStatusCodes.PeriodNotContiguousException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(PERIOD_NOT_CONTIGUOUS_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * When attemp to add one period with end date is greater than start date
     */
    this.errorActions[HttpStatusCodes.STARTDATE_EXCEED_ENDDATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(STARTDATE_EXCEED_ENDDATE)}`);
    };
    this.errorActions[HttpStatusCodes.ANY_PERIOD_DEFINED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ANY_PERIOD_DEFINED)}`);
    };
    /**
     * When attemp to specify an end time lower than the start time
     */
    this.errorActions[HttpStatusCodes.STARTTIME_EXCEED_ENDTIME] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(STARTTIME_EXCEED_ENDTIME)}`);
    };

    // Unicity of user email
    this.errorActions[HttpStatusCodes.UserEmailUnicity] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(USER_EMAIL_UNICITY)}`);
    };
    /**
     * When a period have least than one period or have more than one period
     */
    this.errorActions[HttpStatusCodes.DATE_MUST_HAVE_ONE_UNIQUE_PERIOD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DATE_MUST_HAVE_ONE_UNIQUE_PERIOD)}`);
    };
    /**
     * When attempt to add new inventory but there is an existing inventory with the same date and status
     */
    this.errorActions[HttpStatusCodes.ItemNotFiled] = (params?: any) => {
      let errorMEssagee = `${this.translate.instant(ITEM_NOT_FILED)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssagee = errorMEssagee.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssagee, null, null);
    };


    /**
     * When attempt to add new inventory but there is an existing inventory with the same date and status
     */
    this.errorActions[HttpStatusCodes.ExistPendingInventoryDocument] = (params?: any) => {
      let errorMEssagee = `${this.translate.instant(EXIST_PENDING_INVENTORY_DOCUMENT)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssagee = errorMEssagee.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssagee, null, null);
    };

    /**
     * When attempt when the startDate of the base salary is less than the startDate of the contract
     */
    this.errorActions[HttpStatusCodes.AddBaseSalaryException] = (params?: any) => {
      let errorMEssagee = `${this.translate.instant(ADD_BASE_SALARY_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssagee = errorMEssagee.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssagee, null, null);
    };

    /**
     * When attempt when the startDate of the base salary is less than the startDate of the contract
     */
    this.errorActions[HttpStatusCodes.AddContractBonusException] = (params?: any) => {
      let errorMEssagee = `${this.translate.instant(ADD_CONTRACT_BONUS_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssagee = errorMEssagee.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssagee, null, null);
    };

    /**
     * When adding an existing inventory document
     */
    this.errorActions[HttpStatusCodes.AddExistingInventory] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_INVENTORY)}`);
    };


    /**
     * When updating a not existing inventory document
     */
    this.errorActions[HttpStatusCodes.AddNotExistingInventory] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_NOT_EXISTING_INVENTORY)}`);
    };

    /**
     * When updating a not existing inventory document
     */
    this.errorActions[HttpStatusCodes.AddNotExistingInventoryLine] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_NOT_EXISTING_INVENTORY_LINE)}`);
    };


    /**
     * When updating a not existing inventory document
     */
    this.errorActions[HttpStatusCodes.AddExistingInventoryLine] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_INVENTORY_LINE)}`);
    };

    this.errorActions[HttpStatusCodes.ItemUnicity] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ITEM_UNICITY)}`);
    };
    this.errorActions[HttpStatusCodes.AuthorizedAmountExceeded] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(AUTHORIZED_AMOUNT_EXCEEDED)}`);
    };
    /**
     * when there is a TecDoc Connectivity issues
     */
    this.errorActions[HttpStatusCodes.TecDocConnectionError] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TECDOC_UNAVAILABLE)}`);
    };
    /**
     * When a period have least than one period or have more than one period
     */
    this.errorActions[HttpStatusCodes.TIMESHEET_UPDATE_VIOLATION] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TIMESHEET_UPDATE_VIOLATION)}`);
    };
    /**
     * When user have not permission for validate or refused timesheet
     */
    this.errorActions[HttpStatusCodes.HAVENOT_PERMISSION_FORVLIDATE_OR_REFUSE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(HAVENOT_PERMISSION_FORVLIDATE_OR_REFUSE)}`);
    };


    /**
     * This exception will be handled when there is identical lines in documentLine
     */
    this.errorActions[HttpStatusCodes.ItemAlreadyExistInDocument] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ITEM_ALREADY_EXIST_IN_DOCUMENTLINE)}`);
    };
    /**
     * When working hours of the same day are overlapping
     */
    this.errorActions[HttpStatusCodes.TIMESHEET_LINE_OVERLAP] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(TIMESHEET_LINE_OVERLAP)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          if (param === 'Date') {
            errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
              this.datePipe.transform(new Date(params.Date), this.translate.instant(SharedConstant.DATE_FORMAT)));
          } else {
            errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
              this.translate.instant(params[param].toUpperCase()));
          }
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    // when invalid delete entity
    this.errorActions[HttpStatusCodes.CodeUnicity] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(CODE_UNICITY)}`;
      errorMEssage = errorMEssage.replace('{CODE}',
        this.translate.instant(listErrorParams['CODE']));
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_CODE_UNICITY));
    };
     // when invalid delete entity
     this.errorActions[HttpStatusCodes.LabelUnicity] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(LABEL_UNICITY)}`;
      errorMEssage = errorMEssage.replace('{LABEL}',
        this.translate.instant(listErrorParams['LABEL']));
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_LABEL_UNICITY));
    };
      // This exception will be handled when acquisition date is invalid
      this.errorActions[HttpStatusCodes.AcquisitionDateIsInvalid] = (params?: any) => {
        let errorMEssage = `${this.translate.instant(INVALID_ACQUISITION_DATE)}`;
        for (const param in params) {
          if (params.hasOwnProperty(param)) {
            errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
              this.translate.instant(params[param].toUpperCase()));
          }
        }
        this.growlService.ErrorNotification(errorMEssage, null, null);
    };
     // This Exception when trying to update category that have one or more actives
     this.errorActions[HttpStatusCodes.UpdateCategoryWithActives] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(UPDATE_CATEGORY_WITH_ACTIVES)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
  };
    /**
     * This exception will be handled when there is replacement loop in replacement item relation
     */
    this.errorActions[HttpStatusCodes.ItemReplacementLoop] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ITEM_REPLACEMENT_LOOP)}`);
    };
    this.errorActions[HttpStatusCodes.CANT_ADD_NEXT_MONTH_TIMESHEET] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANT_ADD_NEXT_MONTH_TIMESHEET)}`);
    };
    /**
     * When attempt to validate timesheet if any waiting leave currently exists
     */
    this.errorActions[HttpStatusCodes.CANT_VALIDATE_TIMESHEET_BECAUSE_WAITING_LEAVE_EXIST] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANT_VALIDATE_TIMESHEET_BECAUSE_WAITING_LEAVE_EXIST)}`);
    };

    this.errorActions[HttpStatusCodes.TaxRequiredError] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TAX_REQUIRED_ERROR)}`);
    };

    this.errorActions[HttpStatusCodes.ItemWithoutTaxError] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ITEM_WITHOUT_TAX_ERROR)}`);
    };

    this.errorActions[HttpStatusCodes.duplicateTaxe] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DUPLICATE_TAXE)}`);
    };
    this.errorActions[HttpStatusCodes.AddExistingClaim] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_CLAIM)}`);
    };

    this.errorActions[HttpStatusCodes.AddNotExistingClaim] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_NOT_EXISTING_CLAIM)}`);
    };

    this.errorActions[HttpStatusCodes.UpdateNotExistingClaim] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATE_NOT_EXISTING_CLAIM)}`);
    };

    this.errorActions[HttpStatusCodes.AddExistingClaimTiersAsset] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_CLAIM_TIERS_ASSET)}`);
    };
    this.errorActions[HttpStatusCodes.AddExistingClaimTiersMovementIn] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_CLAIM_MOVEMENT_IN)}`);
    };
    this.errorActions[HttpStatusCodes.AddExistingClaimTiersMovementOut] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_CLAIM_MOVEMENT_OUT)}`);
    };

    this.errorActions[HttpStatusCodes.AddNotExistingClaimTiersAsset] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_NOT_EXISTING_CLAIM_TIERS_ASSET)}`);
    };

    this.errorActions[HttpStatusCodes.AddExistingClaimStockMovement] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_CLAIM_STOCK_MOVEMENT)}`);
    };

    this.errorActions[HttpStatusCodes.AddNotExistingClaimStockMovement] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_NOT_EXISTING_CLAIM_STOCK_MOVEMENT)}`);
    };

    this.errorActions[HttpStatusCodes.UpdateNotExistingStockMovement] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATE_NOT_EXISTING_STOCK_MOVEMENT)}`);
    };
    this.errorActions[HttpStatusCodes.AlreadyValidatedDocument] = (params?: Array<string>) => {
      let errorMEssage = `${this.translate.instant(ALREADY_VALIDATED_DOCUMENT)}`;
      errorMEssage = errorMEssage.replace('{Document}',
        this.translate.instant(params['Document']));
      this.growlService.ErrorNotification(errorMEssage);
    };

    this.errorActions[HttpStatusCodes.ExistingSalesInvoiceFromValidatedDocument] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXISTING_SALES_INVOICE_FROM_VALIDATED_DOCUMENT)}`);
    };

    this.errorActions[HttpStatusCodes.AddExistingRoleCode] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_EXISTING_ROLE_CODE)}`);
    };

    this.errorActions[HttpStatusCodes.UpdateNotExistingRoleCode] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATE_NOT_EXISTING_ROLE_CODE)}`);
    };

    this.errorActions[HttpStatusCodes.NotAvailableClaimStockMovementQuantity] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOT_AVAILABLE_CLAIM_STOCKMOVEMENT_QUANTITY)}`);
    };

    this.errorActions[HttpStatusCodes.NotSameClaimQuantity] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NOT_SAME_CLAIM_QUANTITY)}`);
    };

    this.errorActions[HttpStatusCodes.LINE_ALREAD_DELETED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LINE_ALREAD_DELETED)}`);
    };


    // when invalid send mail (tiers without contact email)
    this.errorActions[HttpStatusCodes.SendMailErrorTiersWithoutContactEmail] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(SEND_MAIL_ERROR_TIERS_WITHOUT_CONTACT_EMAIL)}`;
      for (const paramName in listErrorParams) {
        for (const tiersName of listErrorParams[paramName]) {
          errorMEssage = errorMEssage.concat(' \n - ').concat(tiersName);
        }
      }
      errorMEssage = errorMEssage.concat(' \n ');
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_SEND_MAIL_ERROR));
    };

    this.errorActions[HttpStatusCodes.LiberationQteException] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(LIBERATION_QUANTITY_BECAUSE_PANIER)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    this.errorActions[HttpStatusCodes.SendMailErrorDocumentWithoutContact] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(SEND_MAIL_ERROR_DOCUMENT_WITHOUT_CONTACT)}`);
    };

    // Invalid Quantity
    this.errorActions[HttpStatusCodes.InvalidQuantity] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(ERROR_QUANTITY_WITH_PARAM)}`;
      errorMEssage = errorMEssage.replace('{QUANTITY}',
        listErrorParams['QUANTITY']);
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(ERROR_QUANTITY_TITLE));
    };
    // Bl invoiced
    this.errorActions[HttpStatusCodes.DocumentAlReadyInvoiced] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BL_INVOICED)}`);
    };
    this.errorActions[HttpStatusCodes.CantDeleteReservedDocument] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANT_DELETE_RESERVED_DOCUMENT)}`);
    };
    this.errorActions[HttpStatusCodes.UPDATED_QTY_DOCUMENT_LINE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATED_QTY_DOCUMENT_LINE)}`);
    };
    this.errorActions[HttpStatusCodes.DELETED_DOCUMENT_LINE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DELETED_DOCUMENT_LINE)}`);
    };
    this.errorActions[HttpStatusCodes.DELETED_DOCUMENTS_LINE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DELETED_DOCUMENTS_LINE)}`);
    };
    this.errorActions[HttpStatusCodes.NEGOTIATION_ALREADY_ADDED] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NEGOTIATION_ALREADY_ADDED)}`);
    };

    /**
     * throw when the user delete reserved document line without appropriate permissions
     */
    this.errorActions[HttpStatusCodes.NO_RIGHTS_TO_DELETE_RESERVED_LINE] = (params?: any) => {
      const errorMEssage = `${this.translate.instant(NO_RIGHTS_TO_DELETE_RESERVED_LINE_EXCEPTION)}`;
      // for (const param in params) {
      //   if (params.hasOwnProperty(param)) {
      //     errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
      //       this.translate.instant(params[param].toUpperCase()));
      //   }
      // }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * throw when the user delete reserved document line without appropriate permissions
     */
    this.errorActions[HttpStatusCodes.NO_RIGHTS_TO_DELETE_LINE] = (params?: any) => {
      const errorMEssage = `${this.translate.instant(NO_RIGHTS_TO_DELETE_LINE_EXCEPTION)}`;
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    // When the status of opportunity is already used in category
    this.errorActions[HttpCrmErrorCodes.STATUS_ALREADY_USED_IN_CATEGORY] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${STATUS_ALREADY_USED_IN_CATEGORY}`));
    };
    // When Null organisation Found
    this.errorActions[HttpCrmErrorCodes.NULL_ORGANISATION_FOUND] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${NULL_ORGANISATION_FOUND}`));
    };
    // When Null contact Found
    this.errorActions[HttpCrmErrorCodes.NULL_CONTACT_CRM_FOUND] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${NULL_CONTACT_CRM_FOUND}`));
    };
    // When Null opportunity Found
    this.errorActions[HttpCrmErrorCodes.NULL_OPPORTUNITY_FOUND] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${NULL_OPPORTUNITY_FOUND}`));
    };
    // When Category is already used
    this.errorActions[HttpCrmErrorCodes.CATEGORY_ALREADY_USED] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${CATEGORY_ALREADY_USED}`));
    };
    // When invalid company specified can't connect to CRM dataSource
    this.errorActions[HttpCrmErrorCodes.INVALID_COMPANY_SPECIFIED_CANT_CONNECT_TO_DATA_SOURCE] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${INVALID_COMPANY_SPECIFIED_CANT_CONNECT_TO_DATA_SOURCE}`));
    };
    // When no company specified
    this.errorActions[HttpCrmErrorCodes.NO_COMPANY_SPECIFIED_CANT_CONNECT_TO_DATA_SOURCE] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${NO_COMPANY_SPECIFIED_CANT_CONNECT_TO_DATA_SOURCE}`));
    };
    // When companies list is empty
    this.errorActions[HttpCrmErrorCodes.EMPTY_COMPANIES_LIST_IN_APPLICATION_PROPERTIES] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${EMPTY_COMPANIES_LIST_IN_APPLICATION_PROPERTIES}`));
    };
    // When file crm not found
    this.errorActions[HttpCrmErrorCodes.FILE_CRM_NOT_FOUND] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${FILE_CRM_NOT_FOUND}`));
    };
    // When attached file not found
    this.errorActions[HttpCrmErrorCodes.DELETE_FILE_CRM_FAILED] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${DELETE_FILE_CRM_FAILED}`));
    };

    // when adding futur category with date inferior to today's date
    this.errorActions[HttpStatusCodes.InvalidObjectifExpectedDate] = () => {
      this.growlService.ErrorNotification(`${(this.translate.instant(INVALID_FUTUR_OBJECTIF_DATE))}`);
    };

    // when adding futur formation with date inferior to today's date
    this.errorActions[HttpStatusCodes.InvalidFormationExpectedDate] = () => {
      this.growlService.ErrorNotification(`${(this.translate.instant(INVALID_FUTUR_FORMATION_DATE))}`);
    };
    ///////////////////////////////////////////////////////// after merge /////////////////////////////////////////////////////////////////
    // when Operation is failed
    this.errorActions[HttpStatusCodes.FailureOperation] = () => {
      this.authService.logout();
      this.growlService.ErrorNotification(this.translate.instant(FAILURE_OPERATION));
    };
    // when changing password uncorrect confirmation
    this.errorActions[HttpStatusCodes.PasswordConfirmityError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${PASSWORD_CONFIRMITY_ERROR}`));
    };
    // when when the new password is the same as the old one
    this.errorActions[HttpStatusCodes.SameOldPassword] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${SAME_OLD_PASSWORD}`));
    };

    // when Forbidden error action
    this.errorActions[HttpStatusCodes.userAlreadydeletedFromSlaveBase] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${USER_ALREADY_DELETED_FROM_SLAVE_BASE}`));
    };

    // when Forbidden error action
    this.errorActions[HttpStatusCodes.userEmailModificationProhibited] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${USER_EMAIL_MODIFICATION_PROHIBITED}`));
    };
    // when Forbidden error action
    this.errorActions[HttpStatusCodes.OnlyOfficeManagerAccepteOrRefuseTheMobilityRequest] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${ONLY_OFFICE_MANAGER_ACCEPTE_OR_REFUSE_THE_MOBILITY_REQUEST}`));
    };
    // when GatewayTimeout error action
    this.errorActions[HttpStatusCodes.GatewayTimeout] = () => {
      this.growlService.ErrorNotification(this.translate.instant(GATEWAY_TIME_OUT_MSG));
    };

    this.errorActions[HttpAuthErrorCodes.CURRENT_USER_DO_NOT_HAVE_ANY_PERMISSIONS] = () =>{
      this.growlService.ErrorNotification(this.translate.instant(CURRENT_USER_DO_NOT_HAVE_ANY_PERMISSIONS))
    }

    // when Forbidden error action
    this.errorActions[HttpStatusCodes.userExitsInMasterBase] = () => {
      this.growlService.ErrorNotification(this.translate.instant(USER_EXITS_IN_MASTER_BASE));
    };

    // When privilege user with same level error
    this.errorActions[HttpStatusCodes.PrivilegeSameLevel] = () => {
      this.growlService.ErrorNotification(this.translate.instant(PRIVILEGE_SAME_LEVEL));
    };

    // When privilege user with superior level error
    this.errorActions[HttpStatusCodes.PrivilegSuperiorLevel] = () => {
      this.growlService.ErrorNotification(this.translate.instant(PRIVILEGE_SUPERIOR_LEVEL));
    };
    // This exception will be handled when the user wants to update an expense report when he is not allowed to do so.
    this.errorActions[HttpStatusCodes.PreventMobilityRequestAddModificationToNotAllowedUsers] = () => {
      this.growlService.ErrorNotification(this.translate.instant(PREVENT_MOBILITY_REQUEST_ADD_MODIFICATION_TO_NOT_ALLOWED_USERS));
    };

    // This exception will be handled when the user wants to add or update expense with existing code

    this.errorActions[HttpStatusCodes.DuplicatedExpenseCode] = () => {
      this.growlService.ErrorNotification(this.translate.instant(DUPLICATED_EXPENSE_CODE));
    }
    // when adding or modifying CIN that already exists
    this.errorActions[HttpStatusCodes.SameCinNumber] = () => {
      this.growlService.ErrorNotification(`${(this.translate.instant(SAME_CIN_NUMBER))}`);
    };

    // when adding or modifying CNSS that already exists
    this.errorActions[HttpStatusCodes.SameCnssNumber] = () => {
      this.growlService.ErrorNotification(`${(this.translate.instant(SAME_CNSS_NUMBER))}`);
    };

    // when Overtaking of leave is not authorized
    this.errorActions[HttpStatusCodes.OVERTAKING_OF_LEAVE_IS_NOT_AUTHORIZED] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(OVERTAKING_OF_LEAVE_IS_NOT_AUTHORIZED)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    // This exception will be handled when the training center has opening time less than closing time
    this.errorActions[HttpStatusCodes.TrainingCenterOpeningTimeLessThanClosingTimeException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(TRAINING_CENTER_OPENING_TIME_LESS_THAN_CLOSING_TIME_EXCEPTION)}`);
    };

    // TThis exception will be handled when there are duplicated training center names
    this.errorActions[HttpStatusCodes.DuplicatedTrainingCenterNameException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DUPLICATED_TRAINING_CENTER_NAMES)}`);
    };

    // TThis exception will be handled when there are duplicated training center names
    this.errorActions[HttpStatusCodes.MissingExternalTrainerException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(MISSING_EXTERNAL_TRAINER_EXCEPTION)}`);
    };
    // when Employee is the superior of the team manager
    this.errorActions[HttpStatusCodes.AddSuperiorToCollaboratorTeamException] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(ADD_SUPERIOR_TO_COLLABORATOR_TEAM_EXCEPTION)}`;
      // tslint:disable-next-line:forin
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    // when payslip preview error is generated
    this.errorActions[HttpStatusCodes.DuplicatedEmployeeRibException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DUPLICATED_EMPLOYEE_RIB_EXCEPTION)}`);
    };


    this.errorActions[HttpAccountErrorCodes.DOCUMENT_ACCOUNT_AMOUNT_CODE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENT_ACCOUNT_AMOUNT_CODE)}`);
    };


    /**
     * Training seance date less than session start date
     */
    this.errorActions[HttpStatusCodes.AddTrainingSeanceDateLapsWithoutEndDateOfSessionException] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(ADD_TRAINING_SEANCE_DATE_LAPS_WITHOUT_END_DATE_OF_SESSION_EXCEPTION)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    /**
     * Training seance date greater than session end date
     */
    this.errorActions[HttpStatusCodes.AddTrainingSeanceDateLapsWithoutStartDateOfSessionException] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(ADD_TRAINING_SEANCE_DATE_LAPS_WITHOUT_START_DATE_OF_SESSION_EXCEPTION)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    /**
     * Planified training seance add exception: startHours greater or equals the endHours
     */
    this.errorActions[HttpStatusCodes.AddTrainingSeanceWeeklyHoursException] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(ADD_TRAINING_SEANCE_HOURS_WEEKLY_EXCEPTION)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    /**
     * This exception will be handled when the hours of only planified seances weekly with the same date are overlapped
     */
    this.errorActions[HttpStatusCodes.AddTrainingSeanceHoursWeeklyLapsException] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(ADD_TRAINING_SEANCE_HOURS_WEEKLY_LAPS_EXCEPTION)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    /**
     * This exception will be handled when the session has an end date and doesn't have a start date
     */
    this.errorActions[HttpStatusCodes.SessionWithEndDateAndWithoutStartDate] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(SESSION_WITH_END_DATE_AND_WITHOUT_START_DATE)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    /*Recruitment request errors */
    this.errorActions[HttpStatusCodes.recruitmentUpdateViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(RECRUITMENT_UPDATE_VIOLATION)}`);
    };
    /*Exit employee request errors */
    this.errorActions[HttpStatusCodes.EmployeeExitUpdateViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXIT_EMPLOYEE_UPDATE_VIOLATION)}`);
    };
    /*Employee add error*/
    this.errorActions[HttpStatusCodes.EmployeeIdendityPapersViolation] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EMPLOYEE_IDENDITY_PAPERS_VIOLATION)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), `${this.translate.instant(listErrorParams[paramName])}`);
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    this.errorActions[HttpStatusCodes.SameCandidateCinNumber] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(SAME_CANDIDATE_CIN_NUMBER)}`);
    };
    this.errorActions[HttpStatusCodes.MobilityRequestSameOfficeViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(MOBILITY_REQUEST_SAME_OFFICE_VIOLATION)}`);
    };
    this.errorActions[HttpStatusCodes.AddInterviewTypeException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ADD_INTERVIEW_TYPE_EXCEPTION)}`);
    };
    this.errorActions[HttpStatusCodes.ContractDeleteCheck] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FAILED_TO_DELETE)}`);
    };
    this.errorActions[HttpStatusCodes.ExitEmployeeDeleteCheck] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(FAILED_TO_DELETE_EXIT_EMPLOYEE)}`);
    };

    /**
     * When the employee is the manager of his manager
     */
    this.errorActions[HttpStatusCodes.ReflexiveTeamManagerException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(REFLEXIVE_TEAM_MANAGER_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * When attempt to update a period wich is not contigous with the previous one
     */
    this.errorActions[HttpStatusCodes.PeriodUpdateStartDateContiguousException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(PERIOD_UPDATE_START_DATE_CONTIGUOUS_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * When attempt to update a period wich is not contigous with the next one
     */
    this.errorActions[HttpStatusCodes.PeriodUpdateEndDateContiguousException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(PERIOD_UPDATE_END_DATE_CONTIGUOUS_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * When the startDate and the startDate don't belong in period
     */
    this.errorActions[HttpStatusCodes.PeriodNotFoundException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(PERIOD_NOT_FOUND_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };


    /**
     * When the candidate mail is an employee email
     */
    this.errorActions[HttpStatusCodes.CandidateEmailIsAnEmployeeEmail] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(CANDIDATE_EMAIL_IS_AN_EMPLOYEE_EMAIL)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    // when Employee Recursivity Violation action
    this.errorActions[HttpStatusCodes.UserEmployeeUnicity] = () => {
      this.growlService.ErrorNotification(this.translate.instant(USER_EMPLOYEE_RELATION_UNICITY));
    };

    /**
     * When the candidate mail is duplicate in candidate list
     */
    this.errorActions[HttpStatusCodes.DuplicatedCandidateEmailException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATED_CANDIDATE_EMAIL_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * When attempt to add contract which startDate is less than a hiring date of the employee
     */
    this.errorActions[HttpStatusCodes.AddContractException] = (params?: any) => {
      let errorMEssagee = `${this.translate.instant(ADD_CONTRACT_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssagee = errorMEssagee.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssagee, null, null);
    };

    /**
     * When attempt when the startDate of the base salary is less than the startDate of the contract
     */
    this.errorActions[HttpStatusCodes.AddBaseSalaryException] = (params?: any) => {
      let errorMEssagee = `${this.translate.instant(ADD_BASE_SALARY_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssagee = errorMEssagee.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssagee, null, null);
    };

    /**
     * When attempt when the startDate of the base salary is less than the startDate of the contract
     */
    this.errorActions[HttpStatusCodes.AddContractBonusException] = (params?: any) => {
      let errorMEssagee = `${this.translate.instant(ADD_CONTRACT_BONUS_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssagee = errorMEssagee.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssagee, null, null);
    };

    /**
     * Launched when contract benefit in kind start date is less than contract start date
     */
    this.errorActions[HttpStatusCodes.ContractBenefitInKindStartDateException] = (params?: any) => {
      let errorMessage = `${this.translate.instant(CONTRACT_BENEFIT_IN_KIND_START_DATE_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMessage = errorMessage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMessage, null, null);
    };

    /**
     * Launched when contract benefit in kind expiration date is greater than contract end date
     */
    this.errorActions[HttpStatusCodes.ContractBenefitInKindExpirationDateException] = (params?: any) => {
      let errorMessage = `${this.translate.instant(CONTRACT_BENEFIT_IN_KIND_EXPIRATION_DATE_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMessage = errorMessage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMessage, null, null);
    };

    /**
     * Launched when benefit kind start date is greater than benefit in kind expiration date
     */
    this.errorActions[HttpStatusCodes.ContractBenefitInKindStartDateGreaterThanExpirationDateException] = (params?: any) => {
      let errorMessage = `${this.translate.instant(CONTRACT_BENEFIT_IN_KIND_START_DATE_GREATER_THAN_EXPIRATION_DATE_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMessage = errorMessage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMessage, null, null);
    };

    /**
     * Launched when offer benefit in kind start date is less than offer start date
     */
    this.errorActions[HttpStatusCodes.OfferBenefitInKindStartDateException] = (params?: any) => {
      let errorMessage = `${this.translate.instant(OFFER_BENEFIT_IN_KIND_START_DATE_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMessage = errorMessage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMessage, null, null);
    };

    /**
     * Launched when offer benefit in kind expiration date is greater than offer end date
     */
    this.errorActions[HttpStatusCodes.OfferBenefitInKindExpirationDateException] = (params?: any) => {
      let errorMessage = `${this.translate.instant(OFFER_BENEFIT_IN_KIND_EXPIRATION_DATE_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMessage = errorMessage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMessage, null, null);
    };

    /**
     * Launched when benefit in kind start date is greater than benefit in kind expiration date
     */
    this.errorActions[HttpStatusCodes.OfferBenefitInKindStartDateGreaterThanExpirationDateException] = (params?: any) => {
      let errorMessage = `${this.translate.instant(OFFER_BENEFIT_IN_KIND_START_DATE_GREATER_THAN_EXPIRATION_DATE_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMessage = errorMessage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMessage, null, null);
    };


    /**
     * When adding an existing inventory document
     */
    this.errorActions[HttpStatusCodes.ExpenseReportFileNotFoundException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXPENSE_REPORT_FILE_NOT_FOUND_EXCEPTION)}`);
    };

    /**
     * When the base salary does not unique per date
     */
    this.errorActions[HttpStatusCodes.BASESALARY_STARTDATE_MUST_BE_UNIQUE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BASESALARY_STARTDATE_MUST_BE_UNIQUE)}`);
    };
    /**
     * When the contract bonus does not unique per date
     */
    this.errorActions[HttpStatusCodes.CONTRACTBONUS_STARTDATE_MUST_BE_UNIQUE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CONTRACTBONUS_STARTDATE_MUST_BE_UNIQUE)}`);
    };
    /**
     * When the settlment is linked to paymentSlip or reconciliation or is status is cashed
     */
    this.errorActions[HttpStatusCodes.SettlementCannotBeModified] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(SETTLEMENT_CANNOT_BE_MODIFIED)}`);
    };

    // When user already have cash session
    this.errorActions[HttpStatusCodes.USER_ALREADY_HAS_CASH_SESSION] = () => {
      this.growlService.ErrorNotification(this.translate.instant(USER_ALREADY_HAS_CASH_SESSION));
    };
    // When user already have cash register
    this.errorActions[HttpStatusCodes.USER_ALREADY_HAS_CASH_REGISTER] = () => {
      this.growlService.ErrorNotification(this.translate.instant(USER_ALREADY_HAS_CASH_REGISTER));
    };
    /**
     * When attempt to assign one employee to project with assignement date less than project start date
     */
    this.errorActions[HttpStatusCodes.ASSIGNMENT_STARDATE_MUST_BE_BETWEEN_PROJECT_STARTDATE_AND_ENDDATE] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(ASSIGNMENT_STARDATE_MUST_BE_BETWEEN_PROJECT_STARTDATE_AND_ENDDATE)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * This exception will be handled when the date of assignment of an employee to a team is less than the date of creation of the team
     */
    this.errorActions[HttpStatusCodes.ASSIGNMENT_DATE_MUST_BE_BEFOR_TEAM_CREATION_DATE] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(ASSIGNMENT_DATE_MUST_BE_BEFOR_TEAM_CREATION_DATE)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
    * This exception will be handled when the IdCitizenShip is null
    */
    this.errorActions[HttpStatusCodes.INVALID_IDCITIZENSHIP] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(INVALID_IDCITIZENSHIP)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * When attempt to add more than one employee project with the same assignement date
     */
    this.errorActions[HttpStatusCodes.CANNOT_HAVE_MORE_THAN_ONE_ASIGNEMENT_WITH_SAME_DATE] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(CANNOT_HAVE_MORE_THAN_ONE_ASIGNEMENT_WITH_SAME_DATE)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * When attempt to add one employee with assignement date greater than unassignement date
     */
    this.errorActions[HttpStatusCodes.ASSIGNMENTDATE_MUST_BE_LOWER_THAN_UNASSIGNMENTDATE] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(ASSIGNMENTDATE_MUST_BE_LOWER_THAN_UNASSIGNMENTDATE)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };


    // when the schedules of the day are not covered  by the day of Timesheet
    this.errorActions[HttpStatusCodes.TIMESHEETDAYDOESNTCOVERHOURS] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(TIMESHEETDAYDOESNTCOVERHOURS)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          if (param === 'Date') {
            errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
              pipe.transform(new Date(params.Date), this.translate.instant(SharedConstant.DATE_FORMAT)));
          } else {
            errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
              params[param].substring(NumberConstant.ZERO, NumberConstant.FIVE));
          }
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * When attempt to add one employee with assignement date greater than unassignement date
     */
    this.errorActions[HttpStatusCodes.CANT_UPDATE_ASSIGNMENT_BECAUSE_USED_BY_TIMESHEETLINE] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(CANT_UPDATE_ASSIGNMENT_BECAUSE_USED_BY_TIMESHEETLINE)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * When attempt to delete one period associate with any tuimesheet or leave
     */
    this.errorActions[HttpStatusCodes.CANT_DELETE_PERIOD] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANT_DELETE_PERIOD)}`);
    };
    this.errorActions[HttpStatusCodes.CANT_UPDATE_PERIOD_STARTDATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANT_UPDATE_PERIOD_STARTDATE)}`);
    };
    this.errorActions[HttpStatusCodes.CANT_UPDATE_PERIOD_ENDDATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANT_UPDATE_PERIOD_ENDDATE)}`);
    };
    /**
     * When attempt to make fix request of timesheet which associate with an invoice
     */
    this.errorActions[HttpStatusCodes.CANNOT_MAKE_FIX_REQUEST] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_MAKE_FIX_REQUEST)}`);
    };
    /**
     * When attempt to submi leave in validated timesheet period
     */
    this.errorActions[HttpStatusCodes.CANNOT_SUBMIT_LEAVE_BECAUSE_TIMESHEET_HAS_INOICE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_SUBMIT_LEAVE_BECAUSE_TIMESHEET_HAS_INOICE)}`);
    };
    /**
     * When attempt to delete project associate with any timesheet
     */
    this.errorActions[HttpStatusCodes.CANT_DELETE_PROJECT_BECAUSE_USED_IN_TIMESHEET] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANT_DELETE_PROJECT_BECAUSE_USED_IN_TIMESHEET)}`);
    };
    /**
     * When attempt to delete team associate with any employee
     */
    this.errorActions[HttpStatusCodes.CANT_DELETE_TEAM_BECAUSE_USED_IN_EMPLOYEES] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANT_DELETE_TEAM_BECAUSE_USED_IN_EMPLOYEES)}`);
    };
    /**
    * This exception will be handled when currency id not exist in the base
    */
    this.errorActions[HttpStatusCodes.INVALID_IDCURRENCY_EXCEL_COLUMN] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(INVALID_IDCURRENCY_EXCEL_COLUMN)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
    * This exception will be handled when currency id not exist in the base
    */
    this.errorActions[HttpStatusCodes.INVALID_IDTAXEGROUPTIERS_EXCEL_COLUMN] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(INVALID_IDTAXEGROUPTIERS_EXCEL_COLUMN)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * When attempt to validate assignment date employee with start date project
     */
    this.errorActions[HttpStatusCodes.EMPLOYEE_PROJECT_VALIDITY_ASSIGNMENT_DATE] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(EMPLOYEE_PROJECT_VALIDITY_ASSIGNMENT_DATE)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * When attempt to delete team associate with any employee
     */
    this.errorActions[HttpStatusCodes.PERCENTAGE_MUST_BE_BETWEEN_ZERO_AND_HENDRED] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(PERCENTAGE_MUST_BE_BETWEEN_ZERO_AND_HENDRED)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * When attempt to add percentage of assignement lower than zero or greater than hundred
     */
    this.errorActions[HttpStatusCodes.VALIDATION_OF_PERCENTAGE_ASSIGNMENT_WITH_EMPLOYEE] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(VALIDATION_OF_PERCENTAGE_ASSIGNMENT_WITH_EMPLOYEE)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * This exception will be handled when the user wants to control a percentage assignment is not null.
     */
    this.errorActions[HttpStatusCodes.CONTROL_OF_PERCENTAGE_ASSIGNMENT_IS_NOT_NULL] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(CONTROL_OF_PERCENTAGE_ASSIGNMENT_IS_NOT_NULL)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
      * This exception will be handled when the employee not have a role
      */
    this.errorActions[HttpStatusCodes.EMPLOYEE_DID_NOT_HAVE_A_ROLE] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(EMPLOYEE_DID_NOT_HAVE_A_ROLE)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * When attempt to delete project associate with any timesheet
     */
    this.errorActions[HttpStatusCodes.MANAGER_CANNOT_BE_IN_HIS_MANAGING_TEAM] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(MANAGER_CANNOT_BE_IN_HIS_MANAGING_TEAM)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    /**
     * When try to add contract line from excel with data equal to zero
     */
    this.errorActions[HttpStatusCodes.INVALID_DATA_INPUT_FROM_EXCEL_FILE] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(INVALID_DATA_INPUT_FROM_EXCEL_FILE)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * When try to add contract line from excel with data equal to zero
     */
    this.errorActions[HttpStatusCodes.EXCEL_INVALID_DATA_COLUMN] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(EXCEL_INVALID_DATA_COLUMN)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * When try to add contract line from excel with SSN invalid
     */
    this.errorActions[HttpStatusCodes.EXCEL_INVALID_SSN_COLUMN] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(EXCEL_INVALID_SSN_COLUMN)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * When try to add contract line from excel with RIB invalid
     */
    this.errorActions[HttpStatusCodes.EXCEL_INVALID_RIB_COLUMN] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(EXCEL_INVALID_RIB_COLUMN)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
    * When try to add employee line from excel with not contract
    */
    this.errorActions[HttpStatusCodes.EOMPLYEE_DID_NOT_HAVE_A_CONTRACT_FROM_EXCEL] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(EOMPLYEE_DID_NOT_HAVE_A_CONTRACT_FROM_EXCEL)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
    * When try to add employee line from excel with not contract
    */
    this.errorActions[HttpStatusCodes.NUMBERS_NOT_FOUND_FROM_DB] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(NUMBERS_NOT_FOUND_FROM_DB)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * When try to add timesheet line with line total time equal to zero
     */
    this.errorActions[HttpStatusCodes.CANNOT_SUBMIT_TIMESHEETLINE_TOTAL_TIME_EQUAL_ZERO] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(CANNOT_SUBMIT_TIMESHEETLINE_TOTAL_TIME_EQUAL_ZERO)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          if (param === 'Date') {
            errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
              pipe.transform(new Date(params.Date), this.translate.instant(SharedConstant.DATE_FORMAT)));
          } else {
            errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
              params[param].substring(NumberConstant.ZERO, NumberConstant.FIVE));
          }
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * When document request status is defferent to waiting
     */
    this.errorActions[HttpStatusCodes.DocumentRequestDeleteViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DOCUMENTREQUESTDELETEVIOLATION)}`);
    };
    /**
     * This exception will be handled when the leave has expired for this month
     */
    this.errorActions[HttpStatusCodes.LEAVE_HAS_EXPIRED_FOR_THE_MONTH] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LEAVE_HAS_EXPIRED_FOR_THE_MONTH)}`);
    };
    /**
     * This exception will be handled when invalid start and end date
     */
    this.errorActions[HttpStatusCodes.INVALID_START_AND_END_DATE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INVALID_START_AND_END_DATE)}`);
    };

    /**
     * When expense report status is defferent to waiting
     */
    this.errorActions[HttpStatusCodes.ExpenseReportDeleteViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXPENSEREPORTDELETEVIOLATION)}`);
    };
    /**
     * When user try to cancel leave referenced by a timeSheet
     */
    this.errorActions[HttpStatusCodes.CANNOT_CANCEL_LEAVE_BECAUSE_TIMESHEET_HAS_INOICE] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_CANCEL_LEAVE_BECAUSE_TIMESHEET_HAS_INOICE)}`);
    };
    /**
     * When attempt to delete or update dayoff reference in leave
     */
    this.errorActions[HttpStatusCodes.CANNOT_UPDATE_BECAUSE_INVOICED_TIMEHSEET_EXIST] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_UPDATE_BECAUSE_INVOICED_TIMEHSEET_EXIST)}`);
    };
    /**
     * When there is no base salary
     */
    this.errorActions[HttpStatusCodes.BASE_SALARY_LACK] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BASE_SALARY_LACK)}`);
    };
    /**
     * Employee has at least two contracts with overlaping
     */
    this.errorActions[HttpStatusCodes.CONTRACT_OVERLAP_WITH_PARAMS] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(CONTRACT_OVERLAP_WITH_PARAMS)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // Employee has at least two contracts with overlaping
    this.errorActions[HttpStatusCodes.CONTRACT_OVERLAP] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CONTRACT_OVERLAP));
    };
    /**
     * Employee has more than one contract without end date
     */
    this.errorActions[HttpStatusCodes.MORE_THAN_ONE_CONTRACT_WITHOUT_ENDDATE_WITH_PARAMS] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(MORE_THAN_ONE_CONTRACT_WITHOUT_ENDDATE_WITH_PARAMS)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            params[param]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // Employee has more than one contract without end date
    this.errorActions[HttpStatusCodes.MORE_THAN_ONE_CONTRACT_WITHOUT_ENDDATE] = () => {
      this.growlService.ErrorNotification(this.translate.instant(MORE_THAN_ONE_CONTRACT_WITHOUT_ENDDATE));
    };
    // when maximum registration number is attained
    this.errorActions[HttpStatusCodes.REGISTRATION_NUMBER_MAXIMAL_ACHIEVED] = () => {
      this.growlService.ErrorNotification(this.translate.instant(REGISTRATION_NUMBER_MAXIMAL_ACHIEVED));
    };
    // when changing password uncorrect confirmation
    this.errorActions[HttpStatusCodes.UndefinedRole] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${UNDEFINED_ROLE}`));
    };
    // When the number of schedules defined is different from three
    this.errorActions[HttpStatusCodes.PERIOD_MUST_HAVE_TWO_WORKING_HOURS_FOR_TIMESHEET_PER_HALF_DAY] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${PERIOD_MUST_HAVE_TWO_WORKING_HOURS_FOR_TIMESHEET_PER_HALF_DAY}`));
    };

    // when enter a bad reference or an invalid formalism : lexical validation
    this.errorActions[HttpStatusCodes.LexicalError] = (listErrorParams?: any) => {
      if (listErrorParams.hasOwnProperty(BAD_REFERENCE)) {
        let errorMEssage = `${this.translate.instant(BAD_REFERENCE)}`;
        for (const paramName in listErrorParams) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
        this.growlService.ErrorNotification(errorMEssage, undefined, this.translate.instant(LEXICAL_ERROR));
      } else if (listErrorParams.hasOwnProperty(FORMALISM_VALUE)) {
        let errorMEssage = `${this.translate.instant(FORMALISM_VALUE)}`;
        for (const paramName in listErrorParams) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
        this.growlService.ErrorNotification(errorMEssage, undefined, this.translate.instant(LEXICAL_ERROR));
      }
    };
    // when enter a bad rule : Syntactic error
    this.errorActions[HttpStatusCodes.SYNTACTIC_ERROR] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SYNTACTIC_ERROR));
    };
    // when enter a bad rule : Syntactic error
    this.errorActions[HttpStatusCodes.EXECUTION_ERROR] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EXECUTION_ERROR));
    };
    /**
     * When attempt to delete closed session
     */
    this.errorActions[HttpStatusCodes.CANNOT_DELETE_CLOSED_SESSION] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CANNOT_DELETE_CLOSED_SESSION));
    };
    /**
     * Selected employee has no payslips
     */
    this.errorActions[HttpStatusCodes.EmployeeWithNoPayslipException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EMPLOYEE_WITH_NO_PAYSLIP_EXCEPTION)}`);
    };

    // This exception will be handled when job to update is in hierarchy level of chosen upper job
    this.errorActions[HttpStatusCodes.JobHierarchyLevelViolation] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(JOB_HIERARCHY_LEVEL_VIOLATION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param]));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    // This exception will be handled when employee to update is equal to the upper employee
    this.errorActions[HttpStatusCodes.EmployeeEqualToUpperEmployeeException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EMPLOYEE_EQUAL_TO_UPPER_EMPLOYEE_EXCEPTION)}`);
    };
    // This exception will be handled when updating expired contract
    this.errorActions[HttpStatusCodes.ContractUpdateCheck] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CONTRACT_UPDATE_CHECK)}`);
    };

    /**
     * When attempt to generate employer declaration
     */
    this.errorActions[HttpStatusCodes.ANY_SOURCE_DEDUCTION] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ANY_SOURCE_DEDUCTION)}`);
    };
    // This exception will be handled when there is no cnss declaration details generated
    this.errorActions[HttpStatusCodes.CnssDeclarationDetailsException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(CNSS_DECLARATION_DETAILS_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    this.errorActions[HttpStatusCodes.unpaidWithholdingTax] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(UNPAID_WITHHOLDING_TAX)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          const value = (typeof params[param] === 'string') ? this.translate.instant(params[param].toUpperCase()) : params[param];
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'), value);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    this.errorActions[HttpStatusCodes.deletedFinancialCommitments] = (params?: any) => {
      let errorMEssage = ``;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          const arrayCodes = params[param] as string[];
          if (arrayCodes.length > 1) {
            errorMEssage = `${this.translate.instant(DELETED_FINANCIAL_COMMITMENTS)}`;
            errorMEssage = errorMEssage.replace('{CODES}', arrayCodes.toString());
          } else {
            errorMEssage = `${this.translate.instant(DELETED_FINANCIAL_COMMITMENT)}`;
            errorMEssage = errorMEssage.replace('{CODE}', arrayCodes.toString());
          }
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    this.errorActions[HttpStatusCodes.selectedFinancialCommitmentsHasBeenChanged] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(SELECTED_FINANCIAL_COMMITMENTS_HAS_BEEN_CHANGED)}`);
    };

    // this exception is throw when user delete paymentSlip which state is not provisional
    this.errorActions[HttpStatusCodes.deletePaymentSlipNotProvisionnal] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DELETE_PAYMENT_SLIP_NOT_PROVISIONAL)}`);
    };

    // This exception will be handled the selected employee is chosen as interviewer to his own interview
    this.errorActions[HttpStatusCodes.EmployeeToInterviewMustNotBeInterviewer] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EMPLOYEE_TO_INTERVIEW_MUST_NOT_BE_INTERVIEWER)}`);
    };

    // This exception will be handled when total of number of days worked, days paid leave and days non paid leave
    // is greater than max number of days allowed
    this.errorActions[HttpStatusCodes.AttendanceMaxDaysAllowed] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ATTENDANCE_MAX_DAYS_ALLOWED)}`);
    };

    // This exception will be handled when there is a negative bonus session
    this.errorActions[HttpStatusCodes.NegativeBonusSession] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NEGATIVE_BONUS_SESSION)}`);
    };

    // This exception will be handled when the incoming employer rate is not a rate
    this.errorActions[HttpStatusCodes.IncorrectEmployerRate] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INCORRECT_EMPLOYER_RATE)}`);
    };

    // This exception will be handled when the incoming salary rate is not a rate
    this.errorActions[HttpStatusCodes.IncorrectSalaryRate] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INCORRECT_SALARY_RATE)}`);
    };

    // This exception will be handled when the incoming work accident quota rate is not a rate
    this.errorActions[HttpStatusCodes.IncorrectWorkAccidentQuota] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INCORRECT_WORK_ACCIDENT_RATE)}`);
    };

    // This exception will be handled when the incoming operating code already exists
    this.errorActions[HttpStatusCodes.ExistingOperatingCode] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EXISTING_OPERATING_CODE)}`);
    };

    // This exception will be handled when adding required base salary with start date different then the contract's one
    this.errorActions[HttpStatusCodes.requiredBaseSalaryStartdate] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REQUIRED_BASESALARY_STARTDATE)}`);
    };
    // This exception will be handled when adding required base salary with start date different then the contract's one
    this.errorActions[HttpStatusCodes.ContractTypeMinMaxViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(MIN_LESS_THAN_MAX)}`);
    };
    this.errorActions[HttpStatusCodes.ContractWithUndefinedEndDateExists] = () => {
      this.growlService.warningNotification(this.translate.instant(CONTRACT_WITH_UNDEFINED_ENDDATE_EXISTS));
    };
    this.errorActions[HttpStatusCodes.BaseSalaryValue] = () => {
      this.growlService.warningNotification(this.translate.instant(BASE_SALARY_VALUE));
    };
    // this exception will be handled when an interviewer has interview at the same hour
    this.errorActions[HttpStatusCodes.InterviewerOccupied] = () => {
      this.growlService.warningNotification(this.translate.instant(INTERVIEWER_OCCUPIED));
    };
    // this exception will be handled when an employee has interview at the same hour
    this.errorActions[HttpStatusCodes.EmployeeOccupied] = () => {
      this.growlService.warningNotification(this.translate.instant(EMPLOYEE_OCCUPIED));
    };
    // this exception will be handled when Deletion Fails
    this.errorActions[HttpStatusCodes.DeletionFailed] = () => {
      this.growlService.ErrorNotification(this.translate.instant(DELETION_FAILED));
    };

    // this exception will be handled when Deletion Fails
    this.errorActions[HttpStatusCodes.DeletionUsedUserFailed] = () => {
      this.growlService.ErrorNotification(this.translate.instant(DELETION_USED_USER_FAILED));
    };

    // this exception will be handled when Deletion Fails
    this.errorActions[HttpStatusCodes.MatriculeMustBeANumber] = () => {
      this.growlService.warningNotification(this.translate.instant(MATRICULE_MUST_BE_A_NUMBER));
    };
    // This exception will be handled when the limits of an order or applicability of a salary rule isn't respected
    this.errorActions[HttpStatusCodes.OrderAndApplicabilityLimits] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(ORDER_AND_APPLICABILITY_LIMITS)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param]));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };

    // This exception will be handled when the interview supervisor isn't in the list of required interviewers
    this.errorActions[HttpStatusCodes.SupervisorNotInRequiredInterviewers] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SUPERVISOR_NOT_IN_REQUIRED_INTERVIEWERS));
    };
    // This exception will be handled when the connected user can't update other users passwords
    this.errorActions[HttpStatusCodes.CannotChangePassword] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CANNOT_CHANGE_PASSWORD));
    };

    // This exception will be handled when the interview supervisor isn't in the list of required interviewers
    this.errorActions[HttpStatusCodes.EmployeeHasAnyContract] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EMPLOYEE_HAS_ANY_CONTRACT));
    };

    // this exception will be handled when adding another accepted Offer to the candidate
    this.errorActions[HttpStatusCodes.CandidateAlreadyAcceptedInOtherOffer] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CANDIDATE_ALREADY_ACCEPTED_IN_OTHER_OFFER));
    };

    /**
    * When the current period is not contiguous with the previous
    */
    this.errorActions[HttpStatusCodes.VariableStartDateValidity] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(VARIABLE_START_DATE_VALIDITY)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // This exception is handled when employee exit release date to the same employee already exists
    this.errorActions[HttpStatusCodes.ExisitingEmployeeExitReleaseDate] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EXISTING_EMPLOYEE_EXIT_RELEASE_DATE));
    };
    // This exception is handled when employee does not have a contract
    this.errorActions[HttpStatusCodes.EmployeeWithoutContract] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(EMPLOYEE_WITHOUT_CONTRACT)}`);
    };
    // This exception will be handled when the number of worked days per month is exceeded
    this.errorActions[HttpStatusCodes.NumberOfWorkedDaysExceeded] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NUMBER_OF_WORKED_DAYS_EXCEEDED)}`);
    };
    // This exception will be handled when the number of worked days per month isn't reached
    this.errorActions[HttpStatusCodes.NumberOfWorkedDaysNotReached] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NUMBER_OF_WORKED_DAYS_NOT_REACHED)}`);
    };
    // This exception will be handled when the loan amount exceeds the authorized limit
    this.errorActions[HttpStatusCodes.LoanExceedsLimit] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(LOAN_EXCEEDS_LIMIT)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // This exception will be handled when there is already a loan in the chosen month
    this.errorActions[HttpStatusCodes.LoanExistenceInSameMonth] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LOAN_EXISTENCE_IN_SAME_MONTH)}`);
    };
    // This exception will be handled when the maximum number of days for a leave type is exceeded
    this.errorActions[HttpStatusCodes.LeaveTypeMaximumNumberOfDaysLimitException] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(LEAVE_TYPE_MAXIMUM_NUMBER_OF_DAYS_LIMIT_EXCEPTION)}`);
    };
    // This exception will be handled when the leave to add period is after the leave type expiration date
    this.errorActions[HttpStatusCodes.LeaveTypeExpirationDateViolation] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(LEAVE_TYPE_EXPIRATION_DATE_VIOLATION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // This exception will be handled when the contract type code isn't alphabetic
    this.errorActions[HttpStatusCodes.ContractTypeCodeViolation] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CONTRACT_TYPE_CODE_VIOLATION)}`);
    };

    // This exception will handled when more than one validityperiod have same start date
    this.errorActions[HttpStatusCodes.PeriodicityStartdateMustBeUnique] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(PERIODICITY_STARTDATE_MUST_BE_UNIQUE)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param]));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // When the bonus validity are the same startDate
    this.errorActions[HttpStatusCodes.DuplicatedBonusValidityException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATED_BONUS_VALIDITY_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // This exception will be handled when the user wants to update an expense report when he is not allowed to do so.
    this.errorActions[HttpStatusCodes.ExpenseReportUpdateViolation] = () => {
      this.growlService.warningNotification(this.translate.instant(EXPENSE_REPORT_UPDATE_VIOLATION));
    };
    // This exception will be handled when the user wants to update an expense report when he is not allowed to do so.
    this.errorActions[HttpStatusCodes.DocumentRequestUpdateViolation] = () => {
      this.growlService.ErrorNotification(this.translate.instant(DOCUMENT_REQUEST_UPDATE_VIOLATION));
    };
    // This exception will be handled when the training seance date  not included in session period
    this.errorActions[HttpStatusCodes.AddTrainingSeanceDateLapsException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(ADD_TRAINING_SEANCE_DATE_LAPS_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // This exception will be handled when the training session start date or end date already exists in another period
    this.errorActions[HttpStatusCodes.AddTrainingSessionPeriodException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(ADD_TRAINING_SESSION_PERIOD_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    /**
     * Training seance add exception: startHours greater or equals the endHours
     */
    this.errorActions[HttpStatusCodes.AddTrainingSeanceHoursException] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(ADD_TRAINING_SEANCE_HOURS_EXCEPTION)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    /**
     * This exception will be handled when the hours of the seances with the same date are lap
     */
    this.errorActions[HttpStatusCodes.AddTrainingSeanceHoursLapsException] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(ADD_TRAINING_SEANCE_HOURS_LAPS_EXCEPTION)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // when update the training request which state is not wainting
    this.errorActions[HttpStatusCodes.UpdateTrainingRequestException] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UPDATE_TRAINING_REQUEST_EXCEPTION));
    };
    // throw when the hours is not found in the period
    this.errorActions[HttpStatusCodes.HoursNotFoundInPeriodException] = (params?: any) => {
      let errorMEssage = `${this.translate.instant(HOURS_NOT_FOUND_IN_PERIOD_EXCEPTION)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssage = errorMEssage.replace('{'.concat(param).concat('}'),
            this.translate.instant(timePipe.transform(params[param]).toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage, null, null);
    };
    // when add two training request for the same training
    this.errorActions[HttpStatusCodes.AddTrainingRequestException] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(ADD_TRAINING_REQUEST_EXCEPTION)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'),
          this.translate.instant(listErrorParams[paramName].toUpperCase()));
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // This exception will handled when attempt to close session without payslips
    this.errorActions[HttpStatusCodes.CanNotCloseSessionWithoutPayslip] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CAN_NOT_CLOSE_SESSION_WITHOUT_PAYSLIP));
    };
    // This exception will handled when attempt to close session without payslips
    this.errorActions[HttpStatusCodes.CanNotCLoseSessionInFuture] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CAN_NOT_CLOSE_SESSION_IN_FUTURE));
    };
    // This exception will handled when attempt to close session with wrong or not calculated payslips
    this.errorActions[HttpStatusCodes.CanNotCloseSessionWithWrongOrNotCalculatedPayslip] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CAN_NOT_CLOSE_SESSION_WITH_WRONG_OR_NOT_CALCULATED_PAYSLIP));
    };
    // This exception will be handled when the average daily rate is lower than zero or greater than one billion
    this.errorActions[HttpStatusCodes.AverageDailyRateException] = () => {
      this.growlService.ErrorNotification(this.translate.instant(AVERAGE_DAILY_RATE_EXCEPTION));
    };
    // This exception will be handled when the average daily rate of an employee is lower than zero or greater than one billion
    this.errorActions[HttpStatusCodes.EmployeeAverageDailyRateException] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EMPLOYEE_AVERAGE_DAILY_RATE_EXCPTION)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // This exception will be handled when there are duplicated annual review priorities
    this.errorActions[HttpStatusCodes.DuplicatedAnnualReviewManagerPriority] = () => {
      this.growlService.ErrorNotification(this.translate.instant(DUPLICATED_ANNUAL_REVIEW_MANAGER_PRIORITY));
    };
    // This exception will handled when there is no transfer order detail attached to generated transfer order
    this.errorActions[HttpStatusCodes.TransferOrderWithNoTransferOrderDetails] = () => {
      this.growlService.ErrorNotification(this.translate.instant(TRANSFER_ORDER_WITH_NO_TRANSFER_ORDER_DETAIL));
    };
    // This exception will be handled when there is an overlimit expense report amount
    this.errorActions[HttpStatusCodes.ExpenseReportDetailLimit] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EXPENSE_REPORT_DETAIL_LIMIT));
    };
    // This exception will be handled when currency code isn't equal to three
    this.errorActions[HttpStatusCodes.CurrencyCodeNotVerfied] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CURRENCY_CODE_NOT_VERIFIED));
    };
    // this exception will be handled When the old password does not match what the user entered in the old password field
    this.errorActions[HttpStatusCodes.CheckOldPassword] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CHECK_OLD_PASSWORD));
    };
    // this exception will be handled When the users have not been synchronized with the master database
    this.errorActions[HttpStatusCodes.UsersNotSynchronized] = () => {
      this.growlService.ErrorNotification(this.translate.instant(USERS_NOT_SYNCHRONIZED));
    };
    // This exception is handled when employee has not any payslip between his hiring date and physical exit date
    this.errorActions[HttpStatusCodes.EmployeeHasAnyPayslip] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EMPLOYEE_HAS_ANY_PAYSLIP));
    };
    // This exception will handled when the variable reference contains numbers
    this.errorActions[HttpStatusCodes.VariableReferenceViolation] = () => {
      this.growlService.ErrorNotification(this.translate.instant(VARIABLE_REFERENCE_VIOLATION));
    };
    // This exception is handled when there is a file in expense report that doesn't have a specified extension
    this.errorActions[HttpStatusCodes.ExpenseReportFileExtensionViolation] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EXPENSE_REPORT_FILE_EXTENSION_VIOLATION));
    };
    /// This exception will be handled when Chosen item exist in provisonal inventory
    this.errorActions[HttpStatusCodes.ChosenItemExistInProvisionalInventory] = () => {
      this.growlService.ErrorNotification(this.translate.instant(Chosen_Item_Exist_In_Provisional_Inventory));
    };
    /// This exception will be handled when Chosen item exist in provisonal inventory
    this.errorActions[HttpStatusCodes.DocumentHaveItemExistInProvisionalInventory] = () => {
      this.growlService.ErrorNotification(this.translate.instant(Document_Have_Item_Exist_In_Provisional_Inventory));
    };

    /// This exception will be handled when Chosen item exist in provisonal inventory
    this.errorActions[HttpStatusCodes.SelectedLinesContainsItemExistInProvisionalInventory] = () => {
      this.growlService.ErrorNotification(this.translate.instant(Selected_Lines_Contains_Item_Exist_In_Provisional_Inventory));
    };
    /// This exception will be handled when Chosen item exist in provisonal inventory
    this.errorActions[HttpStatusCodes.SomeItemExistInProvisionalInventory] = () => {
      this.growlService.ErrorNotification(this.translate.instant(Some_Items_Exist_In_Provisional_Inventory));
    };

    // This exception is handled when there is duplicated a language in recruitment offer
    this.errorActions[HttpStatusCodes.DuplicatedLanguageInRecuitmentOffer] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATED_LANGUAGE_RECRUITMENT_OFFER)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // This exception will handled when attempt to update contract associate with closed session
    this.errorActions[HttpStatusCodes.CantUpdateEntityBecauseAnyPayslipIsUsedInClosedSesion] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(CANT_UPDATE_ENTITY_BECAUSE_ANY_PAYSLIP_IS_USED_IN_CLOSED_SESION)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'),
            this.translate.instant(listErrorParams[paramName].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // This exception is handled when drupal connection has failed
    this.errorActions[HttpStatusCodes.FailedDrupalConnection] = () => {
      this.growlService.warningNotification(this.translate.instant(FAILED_DRUPAL_CONNECTION));
    };
    this.errorActions[HttpStatusCodes.NoValidityPeriodIsConfiguredForThisPeriod] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(NO_VALIDITY_PERIOD_IS_CONFIGURED_FOR_THIS_PERIOD)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'),
            this.translate.instant(listErrorParams[paramName].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // This exception is handled when drupal connection has failed
    this.errorActions[HttpStatusCodes.RegistrationNumberMinimalAchieved] = () => {
      this.growlService.ErrorNotification(this.translate.instant(REGISTRATION_NUMBER_MINIMAL_ACHIEVED));
    };
    // This exception is handled when drupal connection has failed
    this.errorActions[HttpStatusCodes.InvalidRegistrationNumber] = () => {
      this.growlService.ErrorNotification(this.translate.instant(INVALID_REGISTRATION_NUMBER));
    };
    /// This exception will be handled when generate inventory contains items exist il provisonal stock movement
    this.errorActions[HttpStatusCodes.ItemsExistInProvisonalStockMovement] = () => {
      this.growlService.ErrorNotification(this.translate.instant(Items_Exist_In_Provisonal_StockMovement));
    };
    this.errorActions[HttpStatusCodes.NoRowForThisInventory] = () => {
      this.growlService.ErrorNotification(this.translate.instant(No_Row_For_This_Inventory));
    };
    /// This exception will be handled when validate inventory that is deleted
    this.errorActions[HttpStatusCodes.ThisInventoryIsDeleted] = () => {
      this.growlService.ErrorNotification(this.translate.instant(This_Inventory_Is_Deleted));
    };
    /// This exception will be handled when validate inventory that is already validated
    this.errorActions[HttpStatusCodes.ThisInventoryIsValidated] = () => {
      this.growlService.ErrorNotification(this.translate.instant(This_Inventory_Is_Validated));
    };
    /**
 * When attempt to add new inventory but there is an existing inventory with the same date and status
 */
    this.errorActions[HttpStatusCodes.CheckItemsQty] = (params?: any) => {
      let errorMEssagee = `${this.translate.instant(Check_Items_Qty)}`;
      for (const param in params) {
        if (params.hasOwnProperty(param)) {
          errorMEssagee = errorMEssagee.replace('{'.concat(param).concat('}'),
            this.translate.instant(params[param].toUpperCase()));
        }
      }
      this.growlService.ErrorNotification(errorMEssagee, null, null);
    };
    // This exception is handled when cin length is wrong
    this.errorActions[HttpStatusCodes.InvalidCinLength] = () => {
      this.growlService.ErrorNotification(this.translate.instant(INVALID_CIN_NUMBER));
    };
    /// This exception will be handled when the selected item don't have a measure unit
    this.errorActions[HttpStatusCodes.ItemWithoutMeasureUnit] = () => {
      this.growlService.ErrorNotification(this.translate.instant(Item_Without_Measure_Unit));
    };
    // Interview start time exceeds end time
    this.errorActions[HttpStatusCodes.InterviewStartTimeExceedsEndTime] = () => {
      this.growlService.ErrorNotification(this.translate.instant(INTERVIEW_START_TIME_EXCEEDS_END_TIME));
    };
    /// This exception will be handled when qty format is invalide
    this.errorActions[HttpStatusCodes.WrongQty] = () => {
      this.growlService.ErrorNotification(this.translate.instant(WRONG_PATERN));
    };
    //  This exception will be handled to forbid single loan installment deletion
    this.errorActions[HttpStatusCodes.ForbidLoanInstallmentDeletion] = () => {
      this.growlService.ErrorNotification(this.translate.instant(FORBID_LOAN_INSTALLMENT_DELETION));
    };
    //  This exception will be handled there is only one unpaid loan installment which value will exceed loan amount
    this.errorActions[HttpStatusCodes.LoanAmountExceeded] = () => {
      this.growlService.ErrorNotification(this.translate.instant(LOAN_AMOUNT_EXCEEDED));
    };
    //  This exception will be handled the loan installment amount to update is negative
    this.errorActions[HttpStatusCodes.NegativeLoanInstallment] = () => {
      this.growlService.ErrorNotification(this.translate.instant(NEGATIVE_LOAN_INSTALLMENT));
    };
    //  This exception will be handled the loan amount is zero or negative
    this.errorActions[HttpStatusCodes.NegativeLoanAmount] = () => {
      this.growlService.ErrorNotification(this.translate.instant(NEGATIVE_LOAN_AMOUNT));
    };
    //  This exception will be handled when there are more than one bonus in contratct or offer without end date
    this.errorActions[HttpStatusCodes.MultipleContractOrOfferBonuesesWithoutEndDate] = () => {
      this.growlService.ErrorNotification(this.translate.instant(MULTIPLE_CONTRACT_OR_OFFER_BONUSES_WITHOUT_END_DATE));
    };
    //  This exception will be handled when there is an overlap of the same bonus in contract of offer
    this.errorActions[HttpStatusCodes.OverlapOfSameBonusInContractOrOffer] = () => {
      this.growlService.ErrorNotification(this.translate.instant(OVERLAP_OF_SAME_BONUS_IN_CONTRACT_OR_OFFER));
    };
    this.errorActions[HttpStatusCodes.CodeAlreadyExist] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(CODE_ALREADY_EXIST)}`;
      errorMEssage = errorMEssage.replace('{CODE}',
        this.translate.instant(listErrorParams['CODE']));
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_CODE_ALREADY_EXIST));
    };
    // A salary structure must have at least one associated rule or a parent structure
    this.errorActions[HttpStatusCodes.SalarystructureMustHaveRuleOrParent] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SALARY_STRUCTURE_MUST_HAVE_RULE_OR_PARENT));
    };
    // When circular relationship is detected between this salary structure and its parent's structure
    this.errorActions[HttpStatusCodes.CircularRelationshipBetweenSalarySrtructures] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CIRCULAR_RELATIONSHIP_BETWEEN_SALARY_SRTRUCTURES));
    };
    //  This exception will be handled when deleting a valid intentory
    this.errorActions[HttpStatusCodes.CantDeleteValidInventory] = () => {
      this.growlService.ErrorNotification(this.translate.instant(Cant_Delete_Valid_Inventory));
    };

    //  This exception will be handled when update deleted intentory
    this.errorActions[HttpStatusCodes.CantUpdateDeletedInventory] = () => {
      this.growlService.ErrorNotification(this.translate.instant(Cant_Update_Deleted_Inventory));
    };
    //  This exception will be handled when update a valid intentory
    this.errorActions[HttpStatusCodes.CantUpdateValidInventory] = () => {
      this.growlService.ErrorNotification(this.translate.instant(Cant_Update_Valid_Inventory));
    };
    // This exception will be handled when there is an overlap of the same bonus in contract of offer
    this.errorActions[HttpStatusCodes.NumberOfCandidateExceeded] = () => {
      this.growlService.warningNotification(this.translate.instant(NUMBER_OF_CANDIDATE_EXCEEDED));
    };
    // This exception will be handled when net salary is negative
    this.errorActions[HttpStatusCodes.NegativeSalary] = () => {
      this.growlService.ErrorNotification(this.translate.instant(NEGATIVE_SALARY));
    };

    /// This exception will be handled when generated list contains items without measure unit
    this.errorActions[HttpStatusCodes.ThereAreItemsWithoutMeasureUnit] = () => {
      this.growlService.ErrorNotification(this.translate.instant(There_Are_Items_Without_Measure_Unit));
    };
    /// this exception will be handled when updating a used prices
    this.errorActions[HttpStatusCodes.CantUpdateUsedPrice] = () => {
      this.growlService.ErrorNotification(this.translate.instant(Cant_Update_Used_Price));
    };

    // This exception will be handled when exit deposit date before hiring date
    this.errorActions[HttpStatusCodes.ExitDepositDateBeforeHiringDate] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EXITDEPOSITDATE_BEFORE_HIRINGDATE));
    };
    // This exception will be handled when release date before hiring date
    this.errorActions[HttpStatusCodes.ReleaseDateBeforeHiringDate] = () => {
      this.growlService.ErrorNotification(this.translate.instant(RELEASEDATE_BEFORE_HIRINGDATE));
    };
    // This exception will be handled when exit deposit date after release date
    this.errorActions[HttpStatusCodes.ExitDepositDateAfterReleaseDate] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EXITDEPOSITDATE_AFTER_RELEASEDATE));
    };
    // This exception will be handled when interview date befor hiring date
    this.errorActions[HttpStatusCodes.InterviewDateBeforeHiringDate] = () => {
      this.growlService.ErrorNotification(this.translate.instant(INTERVIEWDATE_BEFORE_HIRINGDATE));
    };
    // This exception will be handled when exit deposit date after interview date
    this.errorActions[HttpStatusCodes.ExitDepositDateAfterInterviewDate] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EXITDEPOSITDATE_AFTER_INTERVIEWDATE));
    };
    // This exception will be handled when Jasper server is unreachable
    this.errorActions[HttpStatusCodes.UnreachableJasperServer] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UNREACHABLE_JASPER_SERVER));
    };
    //This exception will be handled when the number of months for the advance overrun one
    this.errorActions[HttpStatusCodes.MonthNumberOverrun] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(MONTH_NUMBER_OVERRUN)}`);
    };
    this.errorActions[HttpAuthErrorCodes.USER_ALREADY_LOGGED_IN] = () => {
      this.growlService.ErrorNotification(this.translate.instant(USER_ALREADY_LOGGED_IN));
    };

    // This exception will be handled when exit physical date does not include in the selected period
    this.errorActions[HttpStatusCodes.ValidateResignedEmployee] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(VALIDATE_RESIGNED_EMPLOYEE)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // This exception will be handled when employee is resigned
    this.errorActions[HttpStatusCodes.ActionNotAllowedWithResignedEmployee] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(ACTION_NOT_ALLOWED_ON_RESIGNED_EMPLOYEE)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // This exception will be handled when exit employe release has no physical exit date
    this.errorActions[HttpStatusCodes.EmployeeExithasNoExitPhysicalDate] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EMPLOYEE_EXIT_HAS_NO_EXIT_PHYSICAL_DATE));
    };
    // This exception will be handled when employee has some contract after exit employee physical date
    this.errorActions[HttpStatusCodes.EmployeeHasSomeContractAfterExitPhysicalDate] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EMPLOYEE_HAS_SOME_CONTRACT_AFTER_EXIT_PHYSICAL_DATE));
    };
    // This exception will be handled when the date of the loan Installment is after contract date
    this.errorActions[HttpStatusCodes.ForbidLoanInstallmentUpdate] = () => {
      this.growlService.ErrorNotification(this.translate.instant(FORBID_LOAN_INSTALLMENT_UPDATE));
    };
    // This exception will be handled when the date of the interview is before recruitment creation date
    this.errorActions[HttpStatusCodes.InterviewDateBeforeRecuirmentCreationDate] = () => {
      this.growlService.ErrorNotification(this.translate.instant(INTERVIEWDATE_BEFORE_RECRUITMENTCREATIONDATE));
    };
    /// This exception will be handled when the addition of EmployerRate and SalaryRate exceeds 100
    this.errorActions[HttpStatusCodes.EmployerSalaryRateExceedsLimit] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EMPLOYER_SALARY_RATE_EXCEEDS_LIMIT));
    };
    // This exception will be handled when the end date for a contract is required
    this.errorActions[HttpStatusCodes.RequiredContractEndDate] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(REQUIRED_CONTRACT_END_DATE)}`);
    };
    // This exception will be handled when update used product type
    this.errorActions[HttpStatusCodes.UpdateUsedProductType] = () => {
      this.growlService.ErrorNotification(this.translate.instant(UPDATE_USED_PRODUCT_TYPE));
    };
    /// This exception will be handled when the user is inactif
    this.errorActions[HttpStatusCodes.disabledUser] = () => {
      this.growlService.ErrorNotification(this.translate.instant(USER_DONT_HAVE_PERMISSION_IN_BASE));
    };
    /// this exception will be handled when the article is already exist in the document
    this.errorActions[HttpStatusCodes.ArticleAlreadyExistInDocument] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ARTICLE_ALREADY_EXIST_IN_DOCUMENT));
    };
    // This exception will be handled when generate delivery form that already invoiced
    this.errorActions[HttpStatusCodes.AllDeleveryInvoiced] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ALL_DELIVERY_INVOICED)}`);
    };

    // This exception will be handled when expense report has no type
    this.errorActions[HttpStatusCodes.MissingExpenseReportType] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(MISSING_EXPENSE_REPORT_TYPE)}`);
    };
    // This exception will be handled when the end date for a contract is required
    this.errorActions[HttpStatusCodes.CannotCloseSourceDeductionSessionWithoutClosedPayslipSession] = () => {
      this.growlService.ErrorNotification(`${this.translate.
        instant(CANNOT_CLOSE_SOURCE_DEDUCTION_SESSION_WITHOUT_CLOSED_PAYSLIP_SESSION)}`);
    };
    // This exception will be handled when the end date for a contract is required
    this.errorActions[HttpStatusCodes.CannotCloseSourceDeductionSessionWithWrongOrNotCalculatedSourceDeduction] = () => {
      this.growlService.ErrorNotification(`${this.translate.
        instant(CANNOT_CLOSE_SOURCE_DEDUCTION_SESSION_WITH_WRONG_OR_NOT_CALCULATED_SOURCE_DEDUCTION)}`);
    };
    // This exception will be handled when closing transfer order without closed payslip session
    this.errorActions[HttpStatusCodes.CannotCloseTransferOrderWithoutClosedPayslipSession] = () => {
      this.growlService.ErrorNotification(`${this.translate.
        instant(CANNOT_CLOSE_TRANSFER_ORDER_WITHOUT_CLOSED_PAYSLIP_SESSION)}`);
    };
    /// This exception will be handled when the user is inactif
    this.errorActions[HttpStatusCodes.disabledUser] = () => {
      this.growlService.ErrorNotification(this.translate.instant(USER_DONT_HAVE_PERMISSION_IN_BASE));
    };

    // This exception is thrown when the user want to close not correct transferorder
    this.errorActions[HttpStatusCodes.CannotCloseNotCorrectTransferOrder] = () => {
      this.growlService.ErrorNotification(`${this.translate.
        instant(CANNOT_CLOSE_NOT_CLOSED_TRANSFER_ORDER)}`);
    };
    // This exception will be handled when the employee to delete is an upper hierarchique
    this.errorActions[HttpStatusCodes.DeleteEmployeeError] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(DELETE_EMPLOYEE_ERROR)}`;
      for (const paramName in listErrorParams) {
        errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'),
          this.translate.instant(listErrorParams[paramName].toUpperCase()));
      }
      this.growlService.ErrorNotification(errorMEssage, null, this.translate.instant(TITLE_DELETE_ERROR));
    };
    // This exception will be handled when closing transfer order without closed payslip session
    this.errorActions[HttpStatusCodes.MissingData] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(MISSING_DATA)}`);
    };
    // This exception will be handled when the average daily rate of an employee is lower than zero or greater than one billion
    this.errorActions[HttpStatusCodes.DuplicatedBonusForSameContract] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATED_BONUS_FOR_SAME_CONTRACT)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };
    // This exception will be handled when the payslip to broadcast isn't correct
    this.errorActions[HttpStatusCodes.CannotBroadcastPayslip] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_BROADCAST_PAYSLIP)}`);
    };

    // This exception is thrown when the user when update or add item with Fodec Only
    this.errorActions[HttpStatusCodes.ItemWithFodecOnly] = () => {
      this.growlService.ErrorNotification(`${this.translate.
        instant(CANNOT_ADD_OR_UPDATE_ITEM_WITH_FODEC_TAX_ONLY)}`);
    };
    // This exception will be handled when update or add item with many tax amount type
    this.errorActions[HttpStatusCodes.ItemWithAmountTaxOnly] = () => {
      this.growlService.ErrorNotification(`${this.translate.
        instant(CANNOT_ADD_OR_UPDATE_ITEM_WITH_MANY_TAX_AMOUNT)}`);
    };
    // This exception will be handled when calculable tax not in tax group
    this.errorActions[HttpStatusCodes.ErrorGroupTax] = () => {
      this.growlService.ErrorNotification(`${this.translate.
        instant(ERROR_GROUP_TAX)}`);
    };
    // This exception is thrown when user attemps to broadcast file to uncorrect file path
    this.errorActions[HttpStatusCodes.SpecifiedPathIsIncorrect] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(SPECIFIED_PATH_IS_INCORRECT)}`);
    };
    // This exception is thrown when user user can't broadcast file
    this.errorActions[HttpStatusCodes.CantBroadCastFile] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_BROADCAST_FILE)}`);
    };
    // This exception will be handled when there we don't select salary rule other than those from parent
    this.errorActions[HttpStatusCodes.CannotAddSalaryStructureWithParentAndWithoutNewSalaryRule] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_ADD_SALARY_STRUCTURE_WITH_PARENT_AND_WITHOUT_NEW_SALARY_RULE)}`);
    };

    // This exception will be handled when there is duplication of interviews
    this.errorActions[HttpStatusCodes.InterviewDuplication] = () => {
      this.growlService.ErrorNotification(this.translate.instant(INTERVIEW_DUPLICATION));
    };
    // This exception will be handled when  EmployeeExitPhysical Date before leave start date or before leave end date
    this.errorActions[HttpStatusCodes.EmployeeExitPhysicalDateBeforeLeaveDate] = () => {
      this.growlService.ErrorNotification(this.translate.instant(EMPLOYEE_EXIT_PHYSICAL_DATE_BEFORE_LEAVE_DATE));
    };
    // This exception will be handled when the Bonus aleardy exists in Session
    this.errorActions[HttpStatusCodes.BonusExistanceInSession] = () => {
      this.growlService.ErrorNotification(`${this.translate.
        instant(BONUS_EXISTANCE_IN_SESSION)}`);
    };
    // This exception will be handled when there are not validated timeheets in billing session when closing it
    this.errorActions[HttpStatusCodes.CannotCloseBillingSession] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_CLOSE_BILLING_SESSION)}`);
    };
    // This exception is thrown when the user want to close a deleted session
    this.errorActions[HttpStatusCodes.CanNotCLoseDeletedSession] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_CLOSE_DELETED_SESSION)}`);
    };
    // This exception will be handled when deleting an already deleted entity
    this.errorActions[HttpStatusCodes.AlreadyDeletedEntity] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ALREADY_DELETED_ENTITY)}`);
    };
    // This exception will be handled when we try to generate leave balance for exit employee
    this.errorActions[HttpStatusCodes.CannotGenerateLeaveBalance] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CANNOT_GENERATE_LEAVE_BALANCE));
    };
    // This exception will be handled when connected user tries to validate his proper request
    this.errorActions[HttpStatusCodes.ConnectedUserCannotValidateHisRequest] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CONNECTED_USER_CANNOT_VALIDATE_HIS_REQUEST)}`);
    };
    // This exception will be handled when the user tries to add a shared document entity without a document
    this.errorActions[HttpStatusCodes.CannotAddSharedDocumentEntityWithoutDocument] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_ADD_SHARED_DOCUMENT_ENTITY_WITHOUT_DOCUMENT)}`);
    };
    this.errorActions[HttpAuthErrorCodes.IS_NOT_STARK_USER] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(IS_NOT_STARK_USER, { email: params[0] })}`);
    };
    this.errorActions[HttpAuthErrorCodes.USER_WITH_EMAIL_NOT_ACTIVE] = () => {
      this.authService.logout(this.translate.instant('USER_WITH_EMAIL_NOT_ACTIVE'));
    };

    // This exception is thrown when the value of the bonus inserted equal to zero
    this.errorActions[HttpStatusCodes.BonusValueEqualToZero] = () => {
      this.growlService.warningNotification(this.translate.instant(BONUS_VALUE_EQUAL_TO_ZERO));
    };
    /// This exception will be handled when adding item with existing code
    this.errorActions[HttpStatusCodes.ItemAlreadyExist] = () => {
      this.growlService.ErrorNotification(this.translate.instant(Item_Already_Exist));
    };
    /// This exception will be handled when the  collection of vehicule brand , model and sub model  is already exist
    this.errorActions[HttpStatusCodes.CollectionBrandModelSubModelAlreadyExist] = () => {
      this.growlService.warningNotification(this.translate.instant(COLLECTION_BRAND_MODEL_SUBMODEL_EXIST));
    };
    /// This exception will be handled when generating a new doc without validate the old provisional invoices
    this.errorActions[HttpStatusCodes.ValidatePreviousInvoiceForTermInvoicing] = () => {
      this.growlService.warningNotification(this.translate.instant(VALIDATE_PREVIOUS_INVOICES));
    };
    /// This exception will be handled when shelf and storage already exists in warehouse
    this.errorActions[HttpStatusCodes.ShelfAndStorageAlreadyExists] = () => {
      this.growlService.ErrorNotification(this.translate.instant(SHELF_AND_STORAGE_ALREADY_EXISTS));
    };
    /// This exception will be handled when the user tries to change stock managed field in product type
    this.errorActions[HttpStatusCodes.CannotChangeStockManagedFromProductType] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CANNOT_CHANGE_STOCK_MANAGED_FROM_PRODUCT_TYPE));
    };
    /// This exception will be handled when the warehouse name already exists under same warehouse parent
    this.errorActions[HttpStatusCodes.WarehouseMustBeUniqueByWarehouseParent] = () => {
      this.growlService.ErrorNotification(this.translate.instant(WAREHOUSE_MUST_BE_UNIQUE_BY_WAREHOUSE_PARENT));
    };
    /// This exception will be handled when deleting an Item warehouse with quantity
    this.errorActions[HttpStatusCodes.ItemAlreadyExistsIwarehouse] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ITEM_ALREADY_EXISTS_IN_WAREHOUSE));
    };

    this.errorActions[HttpAuthErrorCodes.USER_WITH_EMAIL_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(USER_WITH_EMAIL_NOT_FOUND, { email: params[0] })}`);
    };

    this.errorActions[HttpAuthErrorCodes.NO_COMPANIES_FOR_USER] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(NO_COMPANIES_FOR_USER)}`);
    };

    this.errorActions[HttpAuthErrorCodes.INVALID_TOKEN] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(INVALID_TOKEN)}`);
    };

    this.errorActions[HttpAuthErrorCodes.CURRENT_ROLE_IN_USE] = () => {
      this.growlService.ErrorNotification(this.translate.instant(CURRENT_ROLE_IN_USE));
    };

    this.errorActions[HttpAuthErrorCodes.COMPANY_WITH_ID_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(COMPANY_WITH_ID_NOT_FOUND, { id: params[0] })}`);
    };

    this.errorActions[HttpAuthErrorCodes.COMPANY_WITH_CODE_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(COMPANY_WITH_CODE_NOT_FOUND, { code: params[0] })}`);
    };

    this.errorActions[HttpAuthErrorCodes.SUB_MODULE_WITH_ID_NOT_FOUND] = (params?: Array<string>) => {
      this.growlService.ErrorNotification(`${this.translate.instant(SUB_MODULE_WITH_ID_NOT_FOUND, { id: params[0] })}`);
    };

    /// This exception will be handled when oem item already exists
    this.errorActions[HttpStatusCodes.ExistingOemItemPerBrand] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(EXISTING_OEM_ITEM_PER_BRAND)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    }
    this.errorActions[HttpStatusCodes.NoDataToReturn] = () => {
      this.growlService.ErrorNotification(this.translate.instant(NO_DATA_TO_RETURN));
    };

    this.errorActions[HttpStatusCodes.DeleteTiersError] = () => {
      this.growlService.ErrorNotification(this.translate.instant(ERROR_DELETE));
    };

    this.errorActions[HttpStatusCodes.DuplicatedBonusForSameContract] = (listErrorParams?: any) => {
      let errorMEssage = `${this.translate.instant(DUPLICATED_BONUS_FOR_SAME_CONTRACT)}`;
      for (const paramName in listErrorParams) {
        if (paramName) {
          errorMEssage = errorMEssage.replace('{'.concat(paramName).concat('}'), listErrorParams[paramName]);
        }
      }
      this.growlService.ErrorNotification(errorMEssage);
    };

    this.errorActions[HttpStatusCodes.DeleteCashRegisterError] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CASH_REGISTER_OPENED)}`);
    };
    // This exception will be handled when the user tries to validate a document entity without a document
    this.errorActions[HttpStatusCodes.CannotValidateDocumentRequestEntityWithoutDocument] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_VALIDATE_DOCUMENT_REQUEST_ENTITY_WITHOUT_DOCUMENT)}`);
    };
    // This exception will be handled when attempt to add employee team without assignent date
    this.errorActions[HttpStatusCodes.CannotAddEmployeeTeamWithoutAssignementDate] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(CANNOT_ADD_EMPLOYEE_TEAM_WITHOUT_ASSIGNEMENT_DATE)}`);
    };
    // When the color status of opportunity is already used
    this.errorActions[HttpCrmErrorCodes.STATUS_COLOR_ALREADY_USED] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${STATUS_COLOR_ALREADY_USED}`));
    };
    // When the title status of opportunity is already used
    this.errorActions[HttpCrmErrorCodes.STATUS_TITLE_ALREADY_USED] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${STATUS_TITLE_ALREADY_USED}`));
    };
    // When contact related to opportunity
    this.errorActions[HttpCrmErrorCodes.IMPOSSIBLE_TO_DELETE_CONTACT_RELATED_TO_OPP] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${IMPOSSIBLE_TO_DELETE_CONTACT_RELATED_TO_OPP}`));
    };
    // When contact related to claim
    this.errorActions[HttpCrmErrorCodes.IMPOSSIBLE_TO_DELETE_CONTACT_RELATED_TO_CLAIM] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${IMPOSSIBLE_TO_DELETE_CONTACT_RELATED_TO_CLAIM}`));
    };
    //  When contact related to opportunity and claim
    this.errorActions[HttpCrmErrorCodes.IMPOSSIBLE_TO_DELETE_CONTACT_RELATED_TO_OPP_CLAIM] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${IMPOSSIBLE_TO_DELETE_CONTACT_RELATED_TO_OPP_CLAIM}`));
    };
    // When organization related to contact
    this.errorActions[HttpCrmErrorCodes.IMPOSSIBLE_TO_DELETE_ORGANIZATION_CONTACTS] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${SUPPRESSION_IMPOSSIBLE_RELATED_TO_CONTACT}`));
    };
    // When organization related to opportunity
    this.errorActions[HttpCrmErrorCodes.IMPOSSIBLE_TO_DELETE_ORGANIZATION_OPPORTUNITY] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${SUPPRESSION_IMPOSSIBLE_RELATED_TO_OPPORTUNITY}`));
    };
    // This exception will be handled when the server Btob has unreachable
    this.errorActions[HttpStatusCodes.BtoBServerIsUnreachable] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(BTOB_SERVER_IS_UNREACHABLE)}`);
    };
    // When organization related to opportunity
    this.errorActions[HttpCrmErrorCodes.ANOTHER_ACTION_FOUND_WITHIN_THE_SAME_RANGE] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${ACTIONS_IN_SAME_RANGE_ALREADY_EXISTS}`));
    };
    // When Email is already used
    this.errorActions[HttpCrmErrorCodes.EMAIL_IS_ALREADY_USED] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${EMAIL_IS_ALREADY_USED}`));
    };

    // This exception will be handled when add document line before adding document
    this.errorActions[HttpStatusCodes.ADD_DOCUMENT_LINE_TO_NOT_EXISTING_DOCUMENT] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${ADD_DOCUMENT_LINE_TO_NOT_EXISTING_DOCUMENT}`));
    };

    // This exception will be handled when deleted Settlement mode
    this.errorActions[HttpStatusCodes.DeletedSettlementMode] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${DELETED_SETTLEMENT_MODE}`));
    };


    // When the code of unit of mesure is already used
    this.errorActions[HttpErrorManufacturingCode.UNIT_OF_MESURE_CODE_ALREADY_EXISTS] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UNIT_OF_MESURE_CODE_ALREADY_EXISTS)}`);
    };


    // This exception will be handled when cancel order atteched to payed deposit invoice
    this.errorActions[HttpStatusCodes.DepositInvoiceIsPayed] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(DEPOSIT_INVOICE_IS_PAYED)}`);
    };


    // When the name of organisation is already used
    this.errorActions[HttpCrmErrorCodes.ORGANISATION_NAME_ALREADY_USED] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${ORGANISATION_NAME_ALREADY_USED}`));
    };

    // When the email of organisation is already used
    this.errorActions[HttpCrmErrorCodes.ORGANISATION_EMAIL_ALREADY_USED] = () => {
      this.growlService.ErrorNotification(this.translate.instant(`${ORGANISATION_EMAIL_ALREADY_USED}`));
    };

    // This exception will be handled when trying to change the amount of reserved sales delivery
    this.errorActions[HttpStatusCodes.DeliveryContainsReservedLines] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(UPDATE_AMOUNT_OF_RESERVED_DELEVERY)}`);
    };

    // This exception will be handled when trying to change the amount of sales delivery that contains product without unit price
    this.errorActions[HttpStatusCodes.DeliveryContainsItemsWithoutPrice] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(SOME_LINES_ARE_ZERO)}`);
    };
     // This exception will be handled when trying to generate deposit invoice from order with sales delivery
     this.errorActions[HttpStatusCodes.OrderContainsSalesDelivery] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ORDER_CONTAIN_SALES_DELIVERY)}`);
    };

    /// This exception will be handled when trying to generate invoice invoice from order with amount that is less than the advance amount 
    this.errorActions[HttpStatusCodes.OrderAmountLessThanAdvance] = () => {
      this.growlService.ErrorNotification(`${this.translate.instant(ORDER_AMOUNT_LESS_THAN_ADVANCE)}`);
    };
  }
}
